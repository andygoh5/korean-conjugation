{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,S,E,C,E,O,G,E,U,C,E,O,C,C,C,I,E,W,E,C,E,E,C,E,E,E,iB,CImBA,SAAS,EAAO,CAAK,SACnB,AAAI,AAAU,OAAV,EACK,OAEL,IAAU,OAAO,GACZ,OAAO,EAET,AAAA,CAAA,CAAA,CAAA,EAAG,QAAQ,CACf,IAAI,CAAC,GACL,KAAK,CAAC,EAAG,IACT,WAAW,EAChB,CCxBA,SAAS,EAAQ,CAAK,QACpB,AAAsB,WAAlB,EAAO,IAGJ,CAAC,EAAM,MAAM,AACtB,CCFA,SAAS,EAAc,EAAO,EAAE,CAAE,CAAK,CAAE,CAAG,EAC1C,GAAI,EAAQ,GAAO,MAAO,CAAA,EAC1B,IAAM,EAAO,EAAK,UAAU,CAAC,GAC7B,OAAO,GAAS,GAAQ,GAAQ,CAClC,C,M,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ELFO,SAAS,EAAO,CAAS,EAC5B,IAAI,CAAC,SAAS,CAAG,GAAa,GAC9B,IAAI,CAAC,OAAO,CAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CACpC,IAAI,CAAC,cAAc,CAAG,CAAA,EACtB,IAAI,CAAC,gBAAgB,CAAG,KAExB,IAAI,CAAC,MAAM,CAAG,WACV,IAAI,EAAS,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAE,WAMjD,OALI,SAAS,CAAC,EAAE,EAAI,IAAI,CAAC,OAAO,CAAG,IAE/B,AADA,CAAA,EAAS,IAAI,EAAO,EAApB,EACO,gBAAgB,CAAG,IAAI,CAAC,gBAAgB,CAC/C,EAAO,cAAc,CAAG,IAAI,CAAC,cAAc,EAExC,CACX,CACJ,C,E,E,O,C,S,I,G,E,E,O,C,U,I,GAQA,EAAO,SAAS,CAAG,IAAI,OAGvB,EAAO,SAAS,CAAC,QAAQ,CAAG,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AC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,IAAK,IAAK,MAE7D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0B,CAAC,IAAK,IAAK,KAAM,IAAK,MAE9D,GAAc,0BAA0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,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,EAAK,CAAA,EAAM,GAAM,CAAA,EAAM,EAAK,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,EAAK,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,EAAK,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,KAAQ,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,KAAQ,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,EAAK,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO,CAAA,EAAM,IAAO,CAAA,EAAM,GAAM,CAAA,EAAM,GAAM,CAAA,EAAM,IAAO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CA,CACI,QAAW,qBACX,IAAO,SACX,EACA,CACI,QAAW,+BACX,IAAO,SACX,EACA,CACI,QAAW,gBACX,IAAO,aACX,EACA,CACI,QAAW,cACX,IAAO,SACX,EACA,CACI,QAAW,OACX,IAAO,YACX,EACA,CACI,QAAW,OACX,IAAO,cACX,EACA,CACI,QAAW,OACX,IAAO,WACX,EACA,CACI,QAAW,OACX,IAAO,UACX,EACA,CACI,QAAW,OACX,IAAO,eACX,EACA,CACI,QAAW,OACX,IAAO,cACX,EACA,CACI,QAAW,MACX,IAAO,OACX,EACA,CACI,QAAW,MACX,IAAO,WACX,EACA,CACI,QAAW,MACX,IAAO,WACX,EACA,CACI,QAAW,OACX,IAAO,UACX,EACA,CACI,QAAW,OACX,IAAO,mBACX,EACA,CACI,QAAW,OACX,IAAO,gBACX,EACA,CACI,QAAW,MACX,IAAO,aACX,EACA,CACI,QAAW,KACX,IAAO,UACX,EACA,CACI,QAAW,MACX,IAAO,qBACX,EACA,CACI,QAAW,MACX,IAAO,SACX,EACA,CACI,QAAW,OACX,IAAO,SACX,EACA,CACI,QAAW,MACX,IAAO,oBACX,EACA,CACI,QAAW,OACX,IAAO,eACX,EACA,CACI,QAAW,OACX,IAAO,aACX,EACA,CACI,QAAW,OACX,IAAO,eACX,EACA,CACI,QAAW,KACX,IAAO,qBACX,EACA,CACI,QAAW,KACX,IAAO,eACX,EACA,CACI,QAAW,KACX,IAAO,UACX,EACH,CACa,EACb,C7C4WoD,EA+TzD,AAAA,GAAkB,SAAS,cAAc,CAAC,qBAAsB,CAAA,GAC3D,IACJ,SAAS,cAAc,CAAC,mBAAmB,KAAK","sources":["<anon>","src/conjugation/hangeul.js","src/main.js","node_modules/wanakana/esm/index.js","node_modules/src/utils/typeOf.js","node_modules/src/utils/isEmpty.js","node_modules/src/utils/isCharInRange.js","node_modules/src/constants.js","node_modules/src/utils/isCharJapanese.js","node_modules/src/isJapanese.js","node_modules/node_modules/memoize-one/dist/memoize-one.esm.js","node_modules/node_modules/dequal/dist/index.mjs","node_modules/src/utils/mergeWithDefaultOptions.js","node_modules/src/utils/kanaMapping.js","node_modules/src/utils/romajiToKanaMap.js","node_modules/src/utils/isCharUpperCase.js","node_modules/src/utils/isCharLongDash.js","node_modules/src/utils/isCharSlashDot.js","node_modules/src/utils/isCharHiragana.js","node_modules/src/utils/hiraganaToKatakana.js","node_modules/src/toKana.js","node_modules/src/utils/dom.js","node_modules/src/utils/logInputEvents.js","node_modules/src/bind.js","node_modules/src/unbind.js","node_modules/src/utils/isCharRomaji.js","node_modules/src/isRomaji.js","node_modules/src/utils/isCharKatakana.js","node_modules/src/utils/isCharKana.js","node_modules/src/isKana.js","node_modules/src/isHiragana.js","node_modules/src/isKatakana.js","node_modules/src/utils/isCharKanji.js","node_modules/src/isKanji.js","node_modules/src/isMixed.js","node_modules/src/utils/katakanaToHiragana.js","node_modules/src/utils/kanaToRomajiMap.js","node_modules/src/toRomaji.js","node_modules/src/utils/isCharEnglishPunctuation.js","node_modules/src/toHiragana.js","node_modules/src/toKatakana.js","node_modules/src/utils/isCharJapanesePunctuation.js","node_modules/src/tokenize.js","node_modules/src/stripOkurigana.js","src/settingManagement.js","src/wordEnums.js","src/utils.js","src/worddata.js","src/conjugation/conjugator.js","src/conjugation/pronunciation.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8ro1P\", function(module, exports) {\n\n$parcel$export(module.exports, \"Geulja\", () => $62537be26463873a$export$5fc85369385cf331);\n$parcel$export(module.exports, \"hangeul\", () => $62537be26463873a$export$559d605efc99d06a);\n// vim: set ts=4 sw=4 expandtab\n// (C) 2010 Dan Bravender - licensed under the AGPL 3.0\n/*  Geulja is used to track modifications that have been made to\n    characters. Currently, it keeps track of characters' original\n    padchims (for ㄷ -> ㄹ irregulars) and if the character has\n    no padchim but should be treated as if it does (for ㅅ\n    irregulars). When substrings are extracted the Geulja class\n    keeps these markers for the last character only.\n*/ function $62537be26463873a$export$5fc85369385cf331(__value__) {\n    this.__value__ = __value__ || \"\";\n    this._length = this.__value__.length; // Use a different property name for length\n    this.hidden_padchim = false;\n    this.original_padchim = null;\n    this.charAt = function() {\n        let result = String.prototype.charAt.apply(this, arguments);\n        if (arguments[0] == this._length - 1) {\n            result = new $62537be26463873a$export$5fc85369385cf331(result);\n            result.original_padchim = this.original_padchim;\n            result.hidden_padchim = this.hidden_padchim;\n        }\n        return result;\n    };\n}\n// with(Geulja.prototype = new String) {\n//     toString = valueOf = function() {\n//         return this.__value__\n//     };\n// }\n$62537be26463873a$export$5fc85369385cf331.prototype = new String();\n// Assign the methods directly to Geulja.prototype\n$62537be26463873a$export$5fc85369385cf331.prototype.toString = $62537be26463873a$export$5fc85369385cf331.prototype.valueOf = function() {\n    return this.__value__;\n};\nvar $62537be26463873a$export$559d605efc99d06a = {};\n$62537be26463873a$export$559d605efc99d06a.Geulja = $62537be26463873a$export$5fc85369385cf331;\n$62537be26463873a$export$559d605efc99d06a.is_hangeul = function(character) {\n    if (character.charCodeAt(0) >= \"\\uAC00\".charCodeAt(0) && character.charCodeAt(0) <= \"\\uD7A3\".charCodeAt(0)) return true;\n    return false;\n};\n// Equations lifted directly from:\n// http://www.kfunigraz.ac.at/~katzer/korean_hangul_unicode.html\n$62537be26463873a$export$559d605efc99d06a.lead = function(character) {\n    return String.fromCharCode(Math.floor(character.charCodeAt(0) - 44032) / 588 + 4352);\n};\n$62537be26463873a$export$559d605efc99d06a.vowel = function(character) {\n    let padchim_character = $62537be26463873a$export$559d605efc99d06a.padchim(character);\n    let padchim_offset;\n    if (!padchim_character || padchim_character == true) padchim_offset = -1;\n    else padchim_offset = padchim_character.charCodeAt(0) - \"\\u11A8\".charCodeAt(0);\n    return String.fromCharCode(Math.floor((character.charCodeAt(0) - 44032 - padchim_offset) % 588 / 28) + \"\\u314F\".charCodeAt(0));\n};\n$62537be26463873a$export$559d605efc99d06a.padchim = function(character) {\n    if (character.hidden_padchim) return true;\n    if (character.original_padchim) return character.original_padchim;\n    let p = String.fromCharCode((character.charCodeAt(0) - 44032) % 28 + \"\\u11A8\".charCodeAt(0) - 1);\n    if (p.charCodeAt(0) == 4519) return null;\n    else return p;\n};\n$62537be26463873a$export$559d605efc99d06a.join = function(lead, vowel, padchim) {\n    let lead_offset = lead.charCodeAt(0) - \"\\u1100\".charCodeAt(0);\n    let vowel_offset = vowel.charCodeAt(0) - \"\\u314F\".charCodeAt(0);\n    let padchim_offset;\n    if (padchim) padchim_offset = padchim.charCodeAt(0) - \"\\u11A8\".charCodeAt(0);\n    else padchim_offset = -1;\n    return String.fromCharCode(padchim_offset + vowel_offset * 28 + lead_offset * 588 + 44032 + 1);\n};\n$62537be26463873a$export$559d605efc99d06a.find_vowel_to_append = function(string) {\n    self = $62537be26463873a$export$559d605efc99d06a;\n    let append = null;\n    string.split(\"\").reverse().forEach(function(character) {\n        if (character in {\n            \"\\uB728\": true,\n            \"\\uC4F0\": true,\n            \"\\uD2B8\": true\n        }) {\n            if (!append) append = \"\\uC5B4\";\n        }\n        if (self.vowel(character) == \"\\u3161\" && !self.padchim(character)) ;\n        else if (self.vowel(character) in {\n            \"\\u3157\": true,\n            \"\\u314F\": true,\n            \"\\u3151\": true\n        }) {\n            if (!append) append = \"\\uC544\";\n        } else if (!append) append = \"\\uC5B4\";\n    });\n    if (!append) append = \"\\uC5B4\";\n    return append;\n};\n$62537be26463873a$export$559d605efc99d06a.match = function(character, l, v, p) {\n    return (l == \"*\" || this.lead(character) == l) && (v == \"*\" || this.vowel(character) == v) && (p == \"*\" || this.padchim(character) == p);\n};\n// export var hangeul = (() => {\n//     this.Geulja = Geulja;\n//     this.is_hangeul = function (character) {\n//         if (character.charCodeAt(0) >= '가'.charCodeAt(0) &&\n//             character.charCodeAt(0) <= '힣'.charCodeAt(0)) {\n//             return true;\n//         }\n//         return false;\n//     };\n//     // Equations lifted directly from:\n//     // http://www.kfunigraz.ac.at/~katzer/korean_hangul_unicode.html\n//     this.lead = function (character) {\n//         return String.fromCharCode((Math.floor(character.charCodeAt(0) - 44032) / 588) + 4352);\n//     };\n//     this.vowel = function (character) {\n//         padchim_character = this.padchim(character);\n//         if (!padchim_character || padchim_character == true) {\n//             padchim_offset = -1;\n//         } else {\n//             padchim_offset = padchim_character.charCodeAt(0) - 'ᆨ'.charCodeAt(0);\n//         }\n//         return String.fromCharCode(Math.floor(((character.charCodeAt(0) - 44032 - padchim_offset) % 588) / 28) + 'ㅏ'.charCodeAt(0));\n//     };\n//     this.padchim = function (character) {\n//         if (character.hidden_padchim) {\n//             return true;\n//         }\n//         if (character.original_padchim) {\n//             return character.original_padchim;\n//         }\n//         p = String.fromCharCode(((character.charCodeAt(0) - 44032) % 28) + 'ᆨ'.charCodeAt(0) - 1)\n//         if (p.charCodeAt(0) == 4519) {\n//             return null;\n//         } else {\n//             return p;\n//         }\n//     };\n//     this.join = function (lead, vowel, padchim) {\n//         lead_offset = lead.charCodeAt(0) - 'ᄀ'.charCodeAt(0);\n//         vowel_offset = vowel.charCodeAt(0) - 'ㅏ'.charCodeAt(0);\n//         if (padchim) {\n//             padchim_offset = padchim.charCodeAt(0) - 'ᆨ'.charCodeAt(0);\n//         } else {\n//             padchim_offset = -1;\n//         }\n//         return String.fromCharCode(padchim_offset + (vowel_offset) * 28 + (lead_offset) * 588 + 44032 + 1);\n//     };\n//     this.find_vowel_to_append = function (string) {\n//         self = this;\n//         append = null;\n//         string.split('').reverse().forEach(function (character) {\n//             if (character in { '뜨': true, '쓰': true, '트': true }) {\n//                 if (!append) append = '어';\n//             }\n//             if (self.vowel(character) == 'ㅡ' && !self.padchim(character)) {\n//                 //continue\n//             } else if (self.vowel(character) in { 'ㅗ': true, 'ㅏ': true, 'ㅑ': true }) {\n//                 if (!append) append = '아';\n//             } else {\n//                 if (!append) append = '어';\n//             }\n//         });\n//         if (!append) append = '어';\n//         return append;\n//     };\n//     this.match = function (character, l, v, p) {\n//         return (l == '*' || this.lead(character) == l) &&\n//             (v == '*' || this.vowel(character) == v) &&\n//             (p == '*' || this.padchim(character) == p)\n//     };\n//     return this;\n// })();\n// Export functions to node\ntry {\n    for(f in $62537be26463873a$export$559d605efc99d06a)module.exports[f] = $62537be26463873a$export$559d605efc99d06a[f];\n} catch (e) {}\n\n});\n\n// since the weights are mostly only used to make things repeat after x amount of rounds, they are overkill\n// would be less work to just wait x rounds and immeditely show what you missed, without updating any weights.\n/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */ function $741555d9057b000f$var$typeOf(value) {\n    if (value === null) return \"null\";\n    if (value !== Object(value)) return typeof value;\n    return ({}).toString.call(value).slice(8, -1).toLowerCase();\n}\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */ function $741555d9057b000f$var$isEmpty(input) {\n    if ($741555d9057b000f$var$typeOf(input) !== \"string\") return true;\n    return !input.length;\n}\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharInRange(char = \"\", start, end) {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    const code = char.charCodeAt(0);\n    return start <= code && code <= end;\n}\nconst $741555d9057b000f$export$a4ad2735b021c132 = \"5.0.2\";\nconst $741555d9057b000f$export$4cb93ec9ed11137c = {\n    HIRAGANA: \"toHiragana\",\n    KATAKANA: \"toKatakana\"\n};\nconst $741555d9057b000f$export$9b45cb7ce8e39e14 = {\n    HEPBURN: \"hepburn\"\n};\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */ const $741555d9057b000f$var$DEFAULT_OPTIONS = {\n    useObsoleteKana: false,\n    passRomaji: false,\n    upcaseKatakana: false,\n    IMEMode: false,\n    convertLongVowelMark: true,\n    romanization: $741555d9057b000f$export$9b45cb7ce8e39e14.HEPBURN\n};\nconst $741555d9057b000f$var$LATIN_UPPERCASE_START = 0x41;\nconst $741555d9057b000f$var$LATIN_UPPERCASE_END = 0x5a;\nconst $741555d9057b000f$var$LOWERCASE_ZENKAKU_START = 0xff41;\nconst $741555d9057b000f$var$LOWERCASE_ZENKAKU_END = 0xff5a;\nconst $741555d9057b000f$var$UPPERCASE_ZENKAKU_START = 0xff21;\nconst $741555d9057b000f$var$UPPERCASE_ZENKAKU_END = 0xff3a;\nconst $741555d9057b000f$var$HIRAGANA_START = 0x3041;\nconst $741555d9057b000f$var$HIRAGANA_END = 0x3096;\nconst $741555d9057b000f$var$KATAKANA_START = 0x30a1;\nconst $741555d9057b000f$var$KATAKANA_END = 0x30fc;\nconst $741555d9057b000f$var$KANJI_START = 0x4e00;\nconst $741555d9057b000f$var$KANJI_END = 0x9faf;\nconst $741555d9057b000f$var$PROLONGED_SOUND_MARK = 0x30fc;\nconst $741555d9057b000f$var$KANA_SLASH_DOT = 0x30fb;\nconst $741555d9057b000f$var$ZENKAKU_NUMBERS = [\n    0xff10,\n    0xff19\n];\nconst $741555d9057b000f$var$ZENKAKU_UPPERCASE = [\n    $741555d9057b000f$var$UPPERCASE_ZENKAKU_START,\n    $741555d9057b000f$var$UPPERCASE_ZENKAKU_END\n];\nconst $741555d9057b000f$var$ZENKAKU_LOWERCASE = [\n    $741555d9057b000f$var$LOWERCASE_ZENKAKU_START,\n    $741555d9057b000f$var$LOWERCASE_ZENKAKU_END\n];\nconst $741555d9057b000f$var$ZENKAKU_PUNCTUATION_1 = [\n    0xff01,\n    0xff0f\n];\nconst $741555d9057b000f$var$ZENKAKU_PUNCTUATION_2 = [\n    0xff1a,\n    0xff1f\n];\nconst $741555d9057b000f$var$ZENKAKU_PUNCTUATION_3 = [\n    0xff3b,\n    0xff3f\n];\nconst $741555d9057b000f$var$ZENKAKU_PUNCTUATION_4 = [\n    0xff5b,\n    0xff60\n];\nconst $741555d9057b000f$var$ZENKAKU_SYMBOLS_CURRENCY = [\n    0xffe0,\n    0xffee\n];\nconst $741555d9057b000f$var$HIRAGANA_CHARS = [\n    0x3040,\n    0x309f\n];\nconst $741555d9057b000f$var$KATAKANA_CHARS = [\n    0x30a0,\n    0x30ff\n];\nconst $741555d9057b000f$var$HANKAKU_KATAKANA = [\n    0xff66,\n    0xff9f\n];\nconst $741555d9057b000f$var$KATAKANA_PUNCTUATION = [\n    0x30fb,\n    0x30fc\n];\nconst $741555d9057b000f$var$KANA_PUNCTUATION = [\n    0xff61,\n    0xff65\n];\nconst $741555d9057b000f$var$CJK_SYMBOLS_PUNCTUATION = [\n    0x3000,\n    0x303f\n];\nconst $741555d9057b000f$var$COMMON_CJK = [\n    0x4e00,\n    0x9fff\n];\nconst $741555d9057b000f$var$RARE_CJK = [\n    0x3400,\n    0x4dbf\n];\nconst $741555d9057b000f$var$KANA_RANGES = [\n    $741555d9057b000f$var$HIRAGANA_CHARS,\n    $741555d9057b000f$var$KATAKANA_CHARS,\n    $741555d9057b000f$var$KANA_PUNCTUATION,\n    $741555d9057b000f$var$HANKAKU_KATAKANA\n];\nconst $741555d9057b000f$var$JA_PUNCTUATION_RANGES = [\n    $741555d9057b000f$var$CJK_SYMBOLS_PUNCTUATION,\n    $741555d9057b000f$var$KANA_PUNCTUATION,\n    $741555d9057b000f$var$KATAKANA_PUNCTUATION,\n    $741555d9057b000f$var$ZENKAKU_PUNCTUATION_1,\n    $741555d9057b000f$var$ZENKAKU_PUNCTUATION_2,\n    $741555d9057b000f$var$ZENKAKU_PUNCTUATION_3,\n    $741555d9057b000f$var$ZENKAKU_PUNCTUATION_4,\n    $741555d9057b000f$var$ZENKAKU_SYMBOLS_CURRENCY\n];\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nconst $741555d9057b000f$var$JAPANESE_RANGES = [\n    ...$741555d9057b000f$var$KANA_RANGES,\n    ...$741555d9057b000f$var$JA_PUNCTUATION_RANGES,\n    $741555d9057b000f$var$ZENKAKU_UPPERCASE,\n    $741555d9057b000f$var$ZENKAKU_LOWERCASE,\n    $741555d9057b000f$var$ZENKAKU_NUMBERS,\n    $741555d9057b000f$var$COMMON_CJK,\n    $741555d9057b000f$var$RARE_CJK\n];\nconst $741555d9057b000f$var$MODERN_ENGLISH = [\n    0x0000,\n    0x007f\n];\nconst $741555d9057b000f$var$HEPBURN_MACRON_RANGES = [\n    [\n        0x0100,\n        0x0101\n    ],\n    [\n        0x0112,\n        0x0113\n    ],\n    [\n        0x012a,\n        0x012b\n    ],\n    [\n        0x014c,\n        0x014d\n    ],\n    [\n        0x016a,\n        0x016b\n    ]\n];\nconst $741555d9057b000f$var$SMART_QUOTE_RANGES = [\n    [\n        0x2018,\n        0x2019\n    ],\n    [\n        0x201c,\n        0x201d\n    ]\n];\nconst $741555d9057b000f$var$ROMAJI_RANGES = [\n    $741555d9057b000f$var$MODERN_ENGLISH,\n    ...$741555d9057b000f$var$HEPBURN_MACRON_RANGES\n];\nconst $741555d9057b000f$var$EN_PUNCTUATION_RANGES = [\n    [\n        0x20,\n        0x2f\n    ],\n    [\n        0x3a,\n        0x3f\n    ],\n    [\n        0x5b,\n        0x60\n    ],\n    [\n        0x7b,\n        0x7e\n    ],\n    ...$741555d9057b000f$var$SMART_QUOTE_RANGES\n];\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharJapanese(char = \"\") {\n    return $741555d9057b000f$var$JAPANESE_RANGES.some(([start, end])=>$741555d9057b000f$var$isCharInRange(char, start, end));\n}\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */ function $741555d9057b000f$export$33dfa193fc452c06(input = \"\", allowed) {\n    const augmented = $741555d9057b000f$var$typeOf(allowed) === \"regexp\";\n    return $741555d9057b000f$var$isEmpty(input) ? false : [\n        ...input\n    ].every((char)=>{\n        const isJa = $741555d9057b000f$var$isCharJapanese(char);\n        return !augmented ? isJa : isJa || allowed.test(char);\n    });\n}\nvar $741555d9057b000f$var$safeIsNaN = Number.isNaN || function ponyfill(value) {\n    return typeof value === \"number\" && value !== value;\n};\nfunction $741555d9057b000f$var$isEqual(first, second) {\n    if (first === second) return true;\n    if ($741555d9057b000f$var$safeIsNaN(first) && $741555d9057b000f$var$safeIsNaN(second)) return true;\n    return false;\n}\nfunction $741555d9057b000f$var$areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) return false;\n    for(var i = 0; i < newInputs.length; i++){\n        if (!$741555d9057b000f$var$isEqual(newInputs[i], lastInputs[i])) return false;\n    }\n    return true;\n}\nfunction $741555d9057b000f$var$memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) isEqual = $741555d9057b000f$var$areInputsEqual;\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for(var _i = 0; _i < arguments.length; _i++)newArgs[_i] = arguments[_i];\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) return cache.lastResult;\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\nvar $741555d9057b000f$var$has = Object.prototype.hasOwnProperty;\nfunction $741555d9057b000f$var$find(iter, tar, key) {\n    for (key of iter.keys()){\n        if ($741555d9057b000f$var$dequal(key, tar)) return key;\n    }\n}\nfunction $741555d9057b000f$var$dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar) return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n        if (ctor === Date) return foo.getTime() === bar.getTime();\n        if (ctor === RegExp) return foo.toString() === bar.toString();\n        if (ctor === Array) {\n            if ((len = foo.length) === bar.length) {\n                while(len-- && $741555d9057b000f$var$dequal(foo[len], bar[len]));\n            }\n            return len === -1;\n        }\n        if (ctor === Set) {\n            if (foo.size !== bar.size) return false;\n            for (len of foo){\n                tmp = len;\n                if (tmp && typeof tmp === \"object\") {\n                    tmp = $741555d9057b000f$var$find(bar, tmp);\n                    if (!tmp) return false;\n                }\n                if (!bar.has(tmp)) return false;\n            }\n            return true;\n        }\n        if (ctor === Map) {\n            if (foo.size !== bar.size) return false;\n            for (len of foo){\n                tmp = len[0];\n                if (tmp && typeof tmp === \"object\") {\n                    tmp = $741555d9057b000f$var$find(bar, tmp);\n                    if (!tmp) return false;\n                }\n                if (!$741555d9057b000f$var$dequal(len[1], bar.get(tmp))) return false;\n            }\n            return true;\n        }\n        if (ctor === ArrayBuffer) {\n            foo = new Uint8Array(foo);\n            bar = new Uint8Array(bar);\n        } else if (ctor === DataView) {\n            if ((len = foo.byteLength) === bar.byteLength) {\n                while(len-- && foo.getInt8(len) === bar.getInt8(len));\n            }\n            return len === -1;\n        }\n        if (ArrayBuffer.isView(foo)) {\n            if ((len = foo.byteLength) === bar.byteLength) {\n                while(len-- && foo[len] === bar[len]);\n            }\n            return len === -1;\n        }\n        if (!ctor || typeof foo === \"object\") {\n            len = 0;\n            for(ctor in foo){\n                if ($741555d9057b000f$var$has.call(foo, ctor) && ++len && !$741555d9057b000f$var$has.call(bar, ctor)) return false;\n                if (!(ctor in bar) || !$741555d9057b000f$var$dequal(foo[ctor], bar[ctor])) return false;\n            }\n            return Object.keys(bar).length === len;\n        }\n    }\n    return foo !== foo && bar !== bar;\n}\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */ const $741555d9057b000f$var$mergeWithDefaultOptions = (opts = {})=>Object.assign({}, $741555d9057b000f$var$DEFAULT_OPTIONS, opts);\nfunction $741555d9057b000f$var$applyMapping(string, mapping, convertEnding) {\n    const root = mapping;\n    function nextSubtree(tree, nextChar) {\n        const subtree = tree[nextChar];\n        if (subtree === undefined) return undefined;\n        // if the next child node does not have a node value, set its node value to the input\n        return Object.assign({\n            \"\": tree[\"\"] + nextChar\n        }, tree[nextChar]);\n    }\n    function newChunk(remaining, currentCursor) {\n        // start parsing a new chunk\n        const firstChar = remaining.charAt(0);\n        return parse(Object.assign({\n            \"\": firstChar\n        }, root[firstChar]), remaining.slice(1), currentCursor, currentCursor + 1);\n    }\n    function parse(tree, remaining, lastCursor, currentCursor) {\n        if (!remaining) {\n            if (convertEnding || Object.keys(tree).length === 1) // nothing more to consume, just commit the last chunk and return it\n            // so as to not have an empty element at the end of the result\n            return tree[\"\"] ? [\n                [\n                    lastCursor,\n                    currentCursor,\n                    tree[\"\"]\n                ]\n            ] : [];\n            // if we don't want to convert the ending, because there are still possible continuations\n            // return null as the final node value\n            return [\n                [\n                    lastCursor,\n                    currentCursor,\n                    null\n                ]\n            ];\n        }\n        if (Object.keys(tree).length === 1) return [\n            [\n                lastCursor,\n                currentCursor,\n                tree[\"\"]\n            ]\n        ].concat(newChunk(remaining, currentCursor));\n        const subtree = nextSubtree(tree, remaining.charAt(0));\n        if (subtree === undefined) return [\n            [\n                lastCursor,\n                currentCursor,\n                tree[\"\"]\n            ]\n        ].concat(newChunk(remaining, currentCursor));\n        // continue current branch\n        return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n    }\n    return newChunk(string, 0);\n}\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nfunction $741555d9057b000f$var$transform(tree) {\n    return Object.entries(tree).reduce((map, [char, subtree])=>{\n        const endOfBranch = $741555d9057b000f$var$typeOf(subtree) === \"string\";\n        // eslint-disable-next-line no-param-reassign\n        map[char] = endOfBranch ? {\n            \"\": subtree\n        } : $741555d9057b000f$var$transform(subtree);\n        return map;\n    }, {});\n}\nfunction $741555d9057b000f$var$getSubTreeOf(tree, string) {\n    return string.split(\"\").reduce((correctSubTree, char)=>{\n        if (correctSubTree[char] === undefined) // eslint-disable-next-line no-param-reassign\n        correctSubTree[char] = {};\n        return correctSubTree[char];\n    }, tree);\n}\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */ function $741555d9057b000f$var$createCustomMapping(customMap = {}) {\n    const customTree = {};\n    if ($741555d9057b000f$var$typeOf(customMap) === \"object\") Object.entries(customMap).forEach(([roma, kana])=>{\n        let subTree = customTree;\n        roma.split(\"\").forEach((char)=>{\n            if (subTree[char] === undefined) subTree[char] = {};\n            subTree = subTree[char];\n        });\n        subTree[\"\"] = kana;\n    });\n    return function makeMap(map) {\n        const mapCopy = JSON.parse(JSON.stringify(map));\n        function transformMap(mapSubtree, customSubtree) {\n            if (mapSubtree === undefined || $741555d9057b000f$var$typeOf(mapSubtree) === \"string\") return customSubtree;\n            return Object.entries(customSubtree).reduce((newSubtree, [char, subtree])=>{\n                // eslint-disable-next-line no-param-reassign\n                newSubtree[char] = transformMap(mapSubtree[char], subtree);\n                return newSubtree;\n            }, mapSubtree);\n        }\n        return transformMap(mapCopy, customTree);\n    };\n}\n// allow consumer to pass either function or object as customMapping\nfunction $741555d9057b000f$var$mergeCustomMapping(map, customMapping) {\n    if (!customMapping) return map;\n    return $741555d9057b000f$var$typeOf(customMapping) === \"function\" ? customMapping(map) : $741555d9057b000f$var$createCustomMapping(customMapping)(map);\n}\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */ // prettier-ignore\nconst $741555d9057b000f$var$BASIC_KUNREI = {\n    a: \"\\u3042\",\n    i: \"\\u3044\",\n    u: \"\\u3046\",\n    e: \"\\u3048\",\n    o: \"\\u304A\",\n    k: {\n        a: \"\\u304B\",\n        i: \"\\u304D\",\n        u: \"\\u304F\",\n        e: \"\\u3051\",\n        o: \"\\u3053\"\n    },\n    s: {\n        a: \"\\u3055\",\n        i: \"\\u3057\",\n        u: \"\\u3059\",\n        e: \"\\u305B\",\n        o: \"\\u305D\"\n    },\n    t: {\n        a: \"\\u305F\",\n        i: \"\\u3061\",\n        u: \"\\u3064\",\n        e: \"\\u3066\",\n        o: \"\\u3068\"\n    },\n    n: {\n        a: \"\\u306A\",\n        i: \"\\u306B\",\n        u: \"\\u306C\",\n        e: \"\\u306D\",\n        o: \"\\u306E\"\n    },\n    h: {\n        a: \"\\u306F\",\n        i: \"\\u3072\",\n        u: \"\\u3075\",\n        e: \"\\u3078\",\n        o: \"\\u307B\"\n    },\n    m: {\n        a: \"\\u307E\",\n        i: \"\\u307F\",\n        u: \"\\u3080\",\n        e: \"\\u3081\",\n        o: \"\\u3082\"\n    },\n    y: {\n        a: \"\\u3084\",\n        u: \"\\u3086\",\n        o: \"\\u3088\"\n    },\n    r: {\n        a: \"\\u3089\",\n        i: \"\\u308A\",\n        u: \"\\u308B\",\n        e: \"\\u308C\",\n        o: \"\\u308D\"\n    },\n    w: {\n        a: \"\\u308F\",\n        i: \"\\u3090\",\n        e: \"\\u3091\",\n        o: \"\\u3092\"\n    },\n    g: {\n        a: \"\\u304C\",\n        i: \"\\u304E\",\n        u: \"\\u3050\",\n        e: \"\\u3052\",\n        o: \"\\u3054\"\n    },\n    z: {\n        a: \"\\u3056\",\n        i: \"\\u3058\",\n        u: \"\\u305A\",\n        e: \"\\u305C\",\n        o: \"\\u305E\"\n    },\n    d: {\n        a: \"\\u3060\",\n        i: \"\\u3062\",\n        u: \"\\u3065\",\n        e: \"\\u3067\",\n        o: \"\\u3069\"\n    },\n    b: {\n        a: \"\\u3070\",\n        i: \"\\u3073\",\n        u: \"\\u3076\",\n        e: \"\\u3079\",\n        o: \"\\u307C\"\n    },\n    p: {\n        a: \"\\u3071\",\n        i: \"\\u3074\",\n        u: \"\\u3077\",\n        e: \"\\u307A\",\n        o: \"\\u307D\"\n    },\n    v: {\n        a: \"\\u3094\\u3041\",\n        i: \"\\u3094\\u3043\",\n        u: \"\\u3094\",\n        e: \"\\u3094\\u3047\",\n        o: \"\\u3094\\u3049\"\n    }\n};\nconst $741555d9057b000f$var$SPECIAL_SYMBOLS$1 = {\n    \".\": \"\\u3002\",\n    \",\": \"\\u3001\",\n    \":\": \"\\uFF1A\",\n    \"/\": \"\\u30FB\",\n    \"!\": \"\\uFF01\",\n    \"?\": \"\\uFF1F\",\n    \"~\": \"\\u301C\",\n    \"-\": \"\\u30FC\",\n    \"\\u2018\": \"\\u300C\",\n    \"\\u2019\": \"\\u300D\",\n    \"\\u201C\": \"\\u300E\",\n    \"\\u201D\": \"\\u300F\",\n    \"[\": \"\\uFF3B\",\n    \"]\": \"\\uFF3D\",\n    \"(\": \"\\uFF08\",\n    \")\": \"\\uFF09\",\n    \"{\": \"\\uFF5B\",\n    \"}\": \"\\uFF5D\"\n};\nconst $741555d9057b000f$var$CONSONANTS = {\n    k: \"\\u304D\",\n    s: \"\\u3057\",\n    t: \"\\u3061\",\n    n: \"\\u306B\",\n    h: \"\\u3072\",\n    m: \"\\u307F\",\n    r: \"\\u308A\",\n    g: \"\\u304E\",\n    z: \"\\u3058\",\n    d: \"\\u3062\",\n    b: \"\\u3073\",\n    p: \"\\u3074\",\n    v: \"\\u3094\",\n    q: \"\\u304F\",\n    f: \"\\u3075\"\n};\nconst $741555d9057b000f$var$SMALL_Y$1 = {\n    ya: \"\\u3083\",\n    yi: \"\\u3043\",\n    yu: \"\\u3085\",\n    ye: \"\\u3047\",\n    yo: \"\\u3087\"\n};\nconst $741555d9057b000f$var$SMALL_VOWELS = {\n    a: \"\\u3041\",\n    i: \"\\u3043\",\n    u: \"\\u3045\",\n    e: \"\\u3047\",\n    o: \"\\u3049\"\n};\n// typing one should be the same as having typed the other instead\nconst $741555d9057b000f$var$ALIASES = {\n    sh: \"sy\",\n    ch: \"ty\",\n    cy: \"ty\",\n    chy: \"ty\",\n    shy: \"sy\",\n    j: \"zy\",\n    jy: \"zy\",\n    // exceptions to above rules\n    shi: \"si\",\n    chi: \"ti\",\n    tsu: \"tu\",\n    ji: \"zi\",\n    fu: \"hu\"\n};\n// xtu -> っ\nconst $741555d9057b000f$var$SMALL_LETTERS = Object.assign({\n    tu: \"\\u3063\",\n    wa: \"\\u308E\",\n    ka: \"\\u30F5\",\n    ke: \"\\u30F6\"\n}, $741555d9057b000f$var$SMALL_VOWELS, $741555d9057b000f$var$SMALL_Y$1);\n// don't follow any notable patterns\nconst $741555d9057b000f$var$SPECIAL_CASES = {\n    yi: \"\\u3044\",\n    wu: \"\\u3046\",\n    ye: \"\\u3044\\u3047\",\n    wi: \"\\u3046\\u3043\",\n    we: \"\\u3046\\u3047\",\n    kwa: \"\\u304F\\u3041\",\n    whu: \"\\u3046\",\n    // because it's not thya for てゃ but tha\n    // and tha is not てぁ, but てゃ\n    tha: \"\\u3066\\u3083\",\n    thu: \"\\u3066\\u3085\",\n    tho: \"\\u3066\\u3087\",\n    dha: \"\\u3067\\u3083\",\n    dhu: \"\\u3067\\u3085\",\n    dho: \"\\u3067\\u3087\"\n};\nconst $741555d9057b000f$var$AIUEO_CONSTRUCTIONS = {\n    wh: \"\\u3046\",\n    kw: \"\\u304F\",\n    qw: \"\\u304F\",\n    q: \"\\u304F\",\n    gw: \"\\u3050\",\n    sw: \"\\u3059\",\n    ts: \"\\u3064\",\n    th: \"\\u3066\",\n    tw: \"\\u3068\",\n    dh: \"\\u3067\",\n    dw: \"\\u3069\",\n    fw: \"\\u3075\",\n    f: \"\\u3075\"\n};\n/* eslint-enable */ function $741555d9057b000f$var$createRomajiToKanaMap$1() {\n    const kanaTree = $741555d9057b000f$var$transform($741555d9057b000f$var$BASIC_KUNREI);\n    // pseudo partial application\n    const subtreeOf = (string)=>$741555d9057b000f$var$getSubTreeOf(kanaTree, string);\n    // add tya, sya, etc.\n    Object.entries($741555d9057b000f$var$CONSONANTS).forEach(([consonant, yKana])=>{\n        Object.entries($741555d9057b000f$var$SMALL_Y$1).forEach(([roma, kana])=>{\n            // for example kyo -> き + ょ\n            subtreeOf(consonant + roma)[\"\"] = yKana + kana;\n        });\n    });\n    Object.entries($741555d9057b000f$var$SPECIAL_SYMBOLS$1).forEach(([symbol, jsymbol])=>{\n        subtreeOf(symbol)[\"\"] = jsymbol;\n    });\n    // things like うぃ, くぃ, etc.\n    Object.entries($741555d9057b000f$var$AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana])=>{\n        Object.entries($741555d9057b000f$var$SMALL_VOWELS).forEach(([vowel, kana])=>{\n            const subtree = subtreeOf(consonant + vowel);\n            subtree[\"\"] = aiueoKana + kana;\n        });\n    });\n    // different ways to write ん\n    [\n        \"n\",\n        \"n'\",\n        \"xn\"\n    ].forEach((nChar)=>{\n        subtreeOf(nChar)[\"\"] = \"\\u3093\";\n    });\n    // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n    kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n    Object.entries($741555d9057b000f$var$ALIASES).forEach(([string, alternative])=>{\n        const allExceptLast = string.slice(0, string.length - 1);\n        const last = string.charAt(string.length - 1);\n        const parentTree = subtreeOf(allExceptLast);\n        // copy to avoid recursive containment\n        parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n    });\n    function getAlternatives(string) {\n        return [\n            ...Object.entries($741555d9057b000f$var$ALIASES),\n            [\n                \"c\",\n                \"k\"\n            ]\n        ].reduce((list, [alt, roma])=>string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list, []);\n    }\n    Object.entries($741555d9057b000f$var$SMALL_LETTERS).forEach(([kunreiRoma, kana])=>{\n        const last = (char)=>char.charAt(char.length - 1);\n        const allExceptLast = (chars)=>chars.slice(0, chars.length - 1);\n        const xRoma = `x${kunreiRoma}`;\n        const xSubtree = subtreeOf(xRoma);\n        xSubtree[\"\"] = kana;\n        // ltu -> xtu -> っ\n        const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n        parentTree[last(kunreiRoma)] = xSubtree;\n        // ltsu -> ltu -> っ\n        getAlternatives(kunreiRoma).forEach((altRoma)=>{\n            [\n                \"l\",\n                \"x\"\n            ].forEach((prefix)=>{\n                const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n                altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n            });\n        });\n    });\n    Object.entries($741555d9057b000f$var$SPECIAL_CASES).forEach(([string, kana])=>{\n        subtreeOf(string)[\"\"] = kana;\n    });\n    // add kka, tta, etc.\n    function addTsu(tree) {\n        return Object.entries(tree).reduce((tsuTree, [key, value])=>{\n            if (!key) // we have reached the bottom of this branch\n            // eslint-disable-next-line no-param-reassign\n            tsuTree[key] = `\\u{3063}${value}`;\n            else // more subtrees\n            // eslint-disable-next-line no-param-reassign\n            tsuTree[key] = addTsu(value);\n            return tsuTree;\n        }, {});\n    }\n    // have to explicitly name c here, because we made it a copy of k, not a reference\n    [\n        ...Object.keys($741555d9057b000f$var$CONSONANTS),\n        \"c\",\n        \"y\",\n        \"w\",\n        \"j\"\n    ].forEach((consonant)=>{\n        const subtree = kanaTree[consonant];\n        subtree[consonant] = addTsu(subtree);\n    });\n    // nn should not be っん\n    delete kanaTree.n.n;\n    // solidify the results, so that there there is referential transparency within the tree\n    return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\nlet $741555d9057b000f$var$romajiToKanaMap = null;\nfunction $741555d9057b000f$var$getRomajiToKanaTree() {\n    if ($741555d9057b000f$var$romajiToKanaMap == null) $741555d9057b000f$var$romajiToKanaMap = $741555d9057b000f$var$createRomajiToKanaMap$1();\n    return $741555d9057b000f$var$romajiToKanaMap;\n}\nconst $741555d9057b000f$var$USE_OBSOLETE_KANA_MAP = $741555d9057b000f$var$createCustomMapping({\n    wi: \"\\u3090\",\n    we: \"\\u3091\"\n});\nfunction $741555d9057b000f$var$IME_MODE_MAP(map) {\n    // in IME mode, we do not want to convert single ns\n    const mapCopy = JSON.parse(JSON.stringify(map));\n    mapCopy.n.n = {\n        \"\": \"\\u3093\"\n    };\n    mapCopy.n[\" \"] = {\n        \"\": \"\\u3093\"\n    };\n    return mapCopy;\n}\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharUpperCase(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return $741555d9057b000f$var$isCharInRange(char, $741555d9057b000f$var$LATIN_UPPERCASE_START, $741555d9057b000f$var$LATIN_UPPERCASE_END);\n}\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharLongDash(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return char.charCodeAt(0) === $741555d9057b000f$var$PROLONGED_SOUND_MARK;\n}\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */ function $741555d9057b000f$var$isCharSlashDot(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return char.charCodeAt(0) === $741555d9057b000f$var$KANA_SLASH_DOT;\n}\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharHiragana(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    if ($741555d9057b000f$var$isCharLongDash(char)) return true;\n    return $741555d9057b000f$var$isCharInRange(char, $741555d9057b000f$var$HIRAGANA_START, $741555d9057b000f$var$HIRAGANA_END);\n}\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */ function $741555d9057b000f$var$hiraganaToKatakana(input = \"\") {\n    const kata = [];\n    input.split(\"\").forEach((char)=>{\n        // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n        if ($741555d9057b000f$var$isCharLongDash(char) || $741555d9057b000f$var$isCharSlashDot(char)) kata.push(char);\n        else if ($741555d9057b000f$var$isCharHiragana(char)) {\n            // Shift charcode.\n            const code = char.charCodeAt(0) + ($741555d9057b000f$var$KATAKANA_START - $741555d9057b000f$var$HIRAGANA_START);\n            const kataChar = String.fromCharCode(code);\n            kata.push(kataChar);\n        } else // Pass non-hiragana chars through\n        kata.push(char);\n    });\n    return kata.join(\"\");\n}\n// memoize and deeply compare args so we only recreate when necessary\nconst $741555d9057b000f$var$createRomajiToKanaMap = $741555d9057b000f$var$memoizeOne((IMEMode, useObsoleteKana, customKanaMapping)=>{\n    let map = $741555d9057b000f$var$getRomajiToKanaTree();\n    map = IMEMode ? $741555d9057b000f$var$IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? $741555d9057b000f$var$USE_OBSOLETE_KANA_MAP(map) : map;\n    if (customKanaMapping) map = $741555d9057b000f$var$mergeCustomMapping(map, customKanaMapping);\n    return map;\n}, $741555d9057b000f$var$dequal);\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */ function $741555d9057b000f$export$4973add5c59f0c7b(input = \"\", options = {}, map) {\n    let config;\n    if (!map) {\n        config = $741555d9057b000f$var$mergeWithDefaultOptions(options);\n        map = $741555d9057b000f$var$createRomajiToKanaMap(config.IMEMode, config.useObsoleteKana, config.customKanaMapping);\n    } else config = options;\n    // throw away the substring index information and just concatenate all the kana\n    return $741555d9057b000f$var$splitIntoConvertedKana(input, config, map).map((kanaToken)=>{\n        const [start, end, kana] = kanaToken;\n        if (kana === null) // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n        const enforceHiragana = config.IMEMode === $741555d9057b000f$export$4cb93ec9ed11137c.HIRAGANA;\n        const enforceKatakana = config.IMEMode === $741555d9057b000f$export$4cb93ec9ed11137c.KATAKANA || [\n            ...input.slice(start, end)\n        ].every($741555d9057b000f$var$isCharUpperCase);\n        return enforceHiragana || !enforceKatakana ? kana : $741555d9057b000f$var$hiraganaToKatakana(kana);\n    }).join(\"\");\n}\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */ function $741555d9057b000f$var$splitIntoConvertedKana(input = \"\", options = {}, map) {\n    const { IMEMode: IMEMode, useObsoleteKana: useObsoleteKana, customKanaMapping: customKanaMapping } = options;\n    if (!map) map = $741555d9057b000f$var$createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n    return $741555d9057b000f$var$applyMapping(input.toLowerCase(), map, !IMEMode);\n}\nlet $741555d9057b000f$var$LISTENERS = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */ function $741555d9057b000f$var$makeOnInput(options) {\n    let prevInput;\n    // Enforce IMEMode if not already specified\n    const mergedConfig = Object.assign({}, $741555d9057b000f$var$mergeWithDefaultOptions(options), {\n        IMEMode: options.IMEMode || true\n    });\n    const preConfiguredMap = $741555d9057b000f$var$createRomajiToKanaMap(mergedConfig.IMEMode, mergedConfig.useObsoleteKana, mergedConfig.customKanaMapping);\n    const triggers = [\n        ...Object.keys(preConfiguredMap),\n        ...Object.keys(preConfiguredMap).map((char)=>char.toUpperCase())\n    ];\n    return function onInput({ target: target }) {\n        if (target.value !== prevInput && target.dataset.ignoreComposition !== \"true\") $741555d9057b000f$var$convertInput(target, mergedConfig, preConfiguredMap, triggers);\n    };\n}\nfunction $741555d9057b000f$var$convertInput(target, options, map, triggers, prevInput) {\n    const [head, textToConvert, tail] = $741555d9057b000f$var$splitInput(target.value, target.selectionEnd, triggers);\n    const convertedText = $741555d9057b000f$export$4973add5c59f0c7b(textToConvert, options, map);\n    const changed = textToConvert !== convertedText;\n    if (changed) {\n        const newCursor = head.length + convertedText.length;\n        const newValue = head + convertedText + tail;\n        // eslint-disable-next-line no-param-reassign\n        target.value = newValue;\n        if (tail.length) // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n        setTimeout(()=>target.setSelectionRange(newCursor, newCursor), 1);\n        else target.setSelectionRange(newCursor, newCursor);\n    }\n}\nfunction $741555d9057b000f$var$onComposition({ type: type, target: target, data: data }) {\n    // navigator.platform is not 100% reliable for singling out all OS,\n    // but for determining desktop \"Mac OS\" it is effective enough.\n    const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n    // We don't want to ignore on Android:\n    // https://github.com/WaniKani/WanaKana/issues/82\n    // But MacOS IME auto-closes if we don't ignore:\n    // https://github.com/WaniKani/WanaKana/issues/71\n    // Other platform Japanese IMEs pass through happily\n    if (isMacOS) {\n        if (type === \"compositionupdate\" && $741555d9057b000f$export$33dfa193fc452c06(data)) // eslint-disable-next-line no-param-reassign\n        target.dataset.ignoreComposition = \"true\";\n        if (type === \"compositionend\") // eslint-disable-next-line no-param-reassign\n        target.dataset.ignoreComposition = \"false\";\n    }\n}\nfunction $741555d9057b000f$var$trackListeners(id, inputHandler, compositionHandler) {\n    $741555d9057b000f$var$LISTENERS = $741555d9057b000f$var$LISTENERS.concat({\n        id: id,\n        inputHandler: inputHandler,\n        compositionHandler: compositionHandler\n    });\n}\nfunction $741555d9057b000f$var$untrackListeners({ id: targetId }) {\n    $741555d9057b000f$var$LISTENERS = $741555d9057b000f$var$LISTENERS.filter(({ id: id })=>id !== targetId);\n}\nfunction $741555d9057b000f$var$findListeners(el) {\n    return el && $741555d9057b000f$var$LISTENERS.find(({ id: id })=>id === el.getAttribute(\"data-wanakana-id\"));\n}\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nfunction $741555d9057b000f$var$splitInput(text = \"\", cursor = 0, triggers = []) {\n    let head;\n    let toConvert;\n    let tail;\n    if (cursor === 0 && triggers.includes(text[0])) [head, toConvert, tail] = $741555d9057b000f$var$workFromStart(text, triggers);\n    else if (cursor > 0) [head, toConvert, tail] = $741555d9057b000f$var$workBackwards(text, cursor);\n    else {\n        [head, toConvert] = $741555d9057b000f$var$takeWhileAndSlice(text, (char)=>!triggers.includes(char));\n        [toConvert, tail] = $741555d9057b000f$var$takeWhileAndSlice(toConvert, (char)=>!$741555d9057b000f$export$33dfa193fc452c06(char));\n    }\n    return [\n        head,\n        toConvert,\n        tail\n    ];\n}\nfunction $741555d9057b000f$var$workFromStart(text, catalystChars) {\n    return [\n        \"\",\n        ...$741555d9057b000f$var$takeWhileAndSlice(text, (char)=>catalystChars.includes(char) || !$741555d9057b000f$export$33dfa193fc452c06(char, /[0-9]/))\n    ];\n}\nfunction $741555d9057b000f$var$workBackwards(text = \"\", startIndex = 0) {\n    const [toConvert, head] = $741555d9057b000f$var$takeWhileAndSlice([\n        ...text.slice(0, startIndex)\n    ].reverse(), (char)=>!$741555d9057b000f$export$33dfa193fc452c06(char));\n    return [\n        head.reverse().join(\"\"),\n        toConvert.split(\"\").reverse().join(\"\"),\n        text.slice(startIndex)\n    ];\n}\nfunction $741555d9057b000f$var$takeWhileAndSlice(source = {}, predicate = (x)=>!!x) {\n    const result = [];\n    const { length: length } = source;\n    let i = 0;\n    while(i < length && predicate(source[i], i)){\n        result.push(source[i]);\n        i += 1;\n    }\n    return [\n        result.join(\"\"),\n        source.slice(i)\n    ];\n}\n/* eslint-disable no-console */ const $741555d9057b000f$var$onInput = ({ target: { value: value, selectionStart: selectionStart, selectionEnd: selectionEnd } })=>console.log(\"input:\", {\n        value: value,\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n    });\nconst $741555d9057b000f$var$onCompositionStart = ()=>console.log(\"compositionstart\");\nconst $741555d9057b000f$var$onCompositionUpdate = ({ target: { value: value, selectionStart: selectionStart, selectionEnd: selectionEnd }, data: data })=>console.log(\"compositionupdate\", {\n        data: data,\n        value: value,\n        selectionStart: selectionStart,\n        selectionEnd: selectionEnd\n    });\nconst $741555d9057b000f$var$onCompositionEnd = ()=>console.log(\"compositionend\");\nconst $741555d9057b000f$var$events = {\n    input: $741555d9057b000f$var$onInput,\n    compositionstart: $741555d9057b000f$var$onCompositionStart,\n    compositionupdate: $741555d9057b000f$var$onCompositionUpdate,\n    compositionend: $741555d9057b000f$var$onCompositionEnd\n};\nconst $741555d9057b000f$var$addDebugListeners = (input)=>{\n    Object.entries($741555d9057b000f$var$events).forEach(([event, handler])=>input.addEventListener(event, handler));\n};\nconst $741555d9057b000f$var$removeDebugListeners = (input)=>{\n    Object.entries($741555d9057b000f$var$events).forEach(([event, handler])=>input.removeEventListener(event, handler));\n};\nconst $741555d9057b000f$var$ELEMENTS = [\n    \"TEXTAREA\",\n    \"INPUT\"\n];\nlet $741555d9057b000f$var$idCounter = 0;\nconst $741555d9057b000f$var$newId = ()=>{\n    $741555d9057b000f$var$idCounter += 1;\n    return `${Date.now()}${$741555d9057b000f$var$idCounter}`;\n};\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */ function $741555d9057b000f$export$2385a24977818dd0(element = {}, options = {}, debug = false) {\n    if (!$741555d9057b000f$var$ELEMENTS.includes(element.nodeName)) throw new Error(`Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(element)})`);\n    const onInput = $741555d9057b000f$var$makeOnInput(options);\n    const id = $741555d9057b000f$var$newId();\n    element.setAttribute(\"data-wanakana-id\", id);\n    element.setAttribute(\"lang\", \"ja\");\n    element.setAttribute(\"autoCapitalize\", \"none\");\n    element.setAttribute(\"autoCorrect\", \"off\");\n    element.setAttribute(\"autoComplete\", \"off\");\n    element.setAttribute(\"spellCheck\", \"false\");\n    element.addEventListener(\"input\", onInput);\n    element.addEventListener(\"compositionupdate\", $741555d9057b000f$var$onComposition);\n    element.addEventListener(\"compositionend\", $741555d9057b000f$var$onComposition);\n    $741555d9057b000f$var$trackListeners(id, onInput, $741555d9057b000f$var$onComposition);\n    if (debug === true) $741555d9057b000f$var$addDebugListeners(element);\n}\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLElement} element textarea, input\n */ function $741555d9057b000f$export$433e98592e7124fd(element, debug = false) {\n    const listeners = $741555d9057b000f$var$findListeners(element);\n    if (listeners == null) throw new Error(`Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(element)}`);\n    const { inputHandler: inputHandler, compositionHandler: compositionHandler } = listeners;\n    element.removeAttribute(\"data-wanakana-id\");\n    element.removeAttribute(\"data-ignore-composition\");\n    element.removeEventListener(\"input\", inputHandler);\n    element.removeEventListener(\"compositionstart\", compositionHandler);\n    element.removeEventListener(\"compositionupdate\", compositionHandler);\n    element.removeEventListener(\"compositionend\", compositionHandler);\n    $741555d9057b000f$var$untrackListeners(listeners);\n    if (debug === true) $741555d9057b000f$var$removeDebugListeners(element);\n}\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharRomaji(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return $741555d9057b000f$var$ROMAJI_RANGES.some(([start, end])=>$741555d9057b000f$var$isCharInRange(char, start, end));\n}\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */ function $741555d9057b000f$export$28956e30362f46cb(input = \"\", allowed) {\n    const augmented = $741555d9057b000f$var$typeOf(allowed) === \"regexp\";\n    return $741555d9057b000f$var$isEmpty(input) ? false : [\n        ...input\n    ].every((char)=>{\n        const isRoma = $741555d9057b000f$var$isCharRomaji(char);\n        return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharKatakana(char = \"\") {\n    return $741555d9057b000f$var$isCharInRange(char, $741555d9057b000f$var$KATAKANA_START, $741555d9057b000f$var$KATAKANA_END);\n}\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharKana(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return $741555d9057b000f$var$isCharHiragana(char) || $741555d9057b000f$var$isCharKatakana(char);\n}\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */ function $741555d9057b000f$export$89c35efdd540c5db(input = \"\") {\n    if ($741555d9057b000f$var$isEmpty(input)) return false;\n    return [\n        ...input\n    ].every($741555d9057b000f$var$isCharKana);\n}\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */ function $741555d9057b000f$export$564fffeb22be4c11(input = \"\") {\n    if ($741555d9057b000f$var$isEmpty(input)) return false;\n    return [\n        ...input\n    ].every($741555d9057b000f$var$isCharHiragana);\n}\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */ function $741555d9057b000f$export$9565d2ed9558b472(input = \"\") {\n    if ($741555d9057b000f$var$isEmpty(input)) return false;\n    return [\n        ...input\n    ].every($741555d9057b000f$var$isCharKatakana);\n}\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharKanji(char = \"\") {\n    return $741555d9057b000f$var$isCharInRange(char, $741555d9057b000f$var$KANJI_START, $741555d9057b000f$var$KANJI_END);\n}\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */ function $741555d9057b000f$export$92376b026946860f(input = \"\") {\n    if ($741555d9057b000f$var$isEmpty(input)) return false;\n    return [\n        ...input\n    ].every($741555d9057b000f$var$isCharKanji);\n}\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */ function $741555d9057b000f$export$e534968524b67a52(input = \"\", options = {\n    passKanji: true\n}) {\n    const chars = [\n        ...input\n    ];\n    let hasKanji = false;\n    if (!options.passKanji) hasKanji = chars.some($741555d9057b000f$export$92376b026946860f);\n    return (chars.some($741555d9057b000f$export$564fffeb22be4c11) || chars.some($741555d9057b000f$export$9565d2ed9558b472)) && chars.some($741555d9057b000f$export$28956e30362f46cb) && !hasKanji;\n}\nconst $741555d9057b000f$var$isCharInitialLongDash = (char, index)=>$741555d9057b000f$var$isCharLongDash(char) && index < 1;\nconst $741555d9057b000f$var$isCharInnerLongDash = (char, index)=>$741555d9057b000f$var$isCharLongDash(char) && index > 0;\nconst $741555d9057b000f$var$isKanaAsSymbol = (char)=>[\n        \"\\u30F6\",\n        \"\\u30F5\"\n    ].includes(char);\nconst $741555d9057b000f$var$LONG_VOWELS = {\n    a: \"\\u3042\",\n    i: \"\\u3044\",\n    u: \"\\u3046\",\n    e: \"\\u3048\",\n    o: \"\\u3046\"\n};\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction $741555d9057b000f$var$katakanaToHiragana(input = \"\", toRomaji, { isDestinationRomaji: isDestinationRomaji, convertLongVowelMark: convertLongVowelMark } = {}) {\n    let previousKana = \"\";\n    return input.split(\"\").reduce((hira, char, index)=>{\n        // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n        if ($741555d9057b000f$var$isCharSlashDot(char) || $741555d9057b000f$var$isCharInitialLongDash(char, index) || $741555d9057b000f$var$isKanaAsSymbol(char)) return hira.concat(char);\n        // Transform long vowels: 'オー' to 'おう'\n        if (convertLongVowelMark && previousKana && $741555d9057b000f$var$isCharInnerLongDash(char, index)) {\n            // Transform previousKana back to romaji, and slice off the vowel\n            const romaji = toRomaji(previousKana).slice(-1);\n            // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n            if ($741555d9057b000f$var$isCharKatakana(input[index - 1]) && romaji === \"o\" && isDestinationRomaji) return hira.concat(\"\\u304A\");\n            return hira.concat($741555d9057b000f$var$LONG_VOWELS[romaji]);\n        // Transform all other chars\n        }\n        if (!$741555d9057b000f$var$isCharLongDash(char) && $741555d9057b000f$var$isCharKatakana(char)) {\n            const code = char.charCodeAt(0) + ($741555d9057b000f$var$HIRAGANA_START - $741555d9057b000f$var$KATAKANA_START);\n            const hiraChar = String.fromCharCode(code);\n            previousKana = hiraChar;\n            return hira.concat(hiraChar);\n        }\n        // Pass non katakana chars through\n        previousKana = \"\";\n        return hira.concat(char);\n    }, []).join(\"\");\n}\nlet $741555d9057b000f$var$kanaToHepburnMap = null;\n/* eslint-disable */ // prettier-ignore\nconst $741555d9057b000f$var$BASIC_ROMAJI = {\n    \\u3042: \"a\",\n    \\u3044: \"i\",\n    \\u3046: \"u\",\n    \\u3048: \"e\",\n    \\u304A: \"o\",\n    \\u304B: \"ka\",\n    \\u304D: \"ki\",\n    \\u304F: \"ku\",\n    \\u3051: \"ke\",\n    \\u3053: \"ko\",\n    \\u3055: \"sa\",\n    \\u3057: \"shi\",\n    \\u3059: \"su\",\n    \\u305B: \"se\",\n    \\u305D: \"so\",\n    \\u305F: \"ta\",\n    \\u3061: \"chi\",\n    \\u3064: \"tsu\",\n    \\u3066: \"te\",\n    \\u3068: \"to\",\n    \\u306A: \"na\",\n    \\u306B: \"ni\",\n    \\u306C: \"nu\",\n    \\u306D: \"ne\",\n    \\u306E: \"no\",\n    \\u306F: \"ha\",\n    \\u3072: \"hi\",\n    \\u3075: \"fu\",\n    \\u3078: \"he\",\n    \\u307B: \"ho\",\n    \\u307E: \"ma\",\n    \\u307F: \"mi\",\n    \\u3080: \"mu\",\n    \\u3081: \"me\",\n    \\u3082: \"mo\",\n    \\u3089: \"ra\",\n    \\u308A: \"ri\",\n    \\u308B: \"ru\",\n    \\u308C: \"re\",\n    \\u308D: \"ro\",\n    \\u3084: \"ya\",\n    \\u3086: \"yu\",\n    \\u3088: \"yo\",\n    \\u308F: \"wa\",\n    \\u3090: \"wi\",\n    \\u3091: \"we\",\n    \\u3092: \"wo\",\n    \\u3093: \"n\",\n    \\u304C: \"ga\",\n    \\u304E: \"gi\",\n    \\u3050: \"gu\",\n    \\u3052: \"ge\",\n    \\u3054: \"go\",\n    \\u3056: \"za\",\n    \\u3058: \"ji\",\n    \\u305A: \"zu\",\n    \\u305C: \"ze\",\n    \\u305E: \"zo\",\n    \\u3060: \"da\",\n    \\u3062: \"ji\",\n    \\u3065: \"zu\",\n    \\u3067: \"de\",\n    \\u3069: \"do\",\n    \\u3070: \"ba\",\n    \\u3073: \"bi\",\n    \\u3076: \"bu\",\n    \\u3079: \"be\",\n    \\u307C: \"bo\",\n    \\u3071: \"pa\",\n    \\u3074: \"pi\",\n    \\u3077: \"pu\",\n    \\u307A: \"pe\",\n    \\u307D: \"po\",\n    \\u3094\\u3041: \"va\",\n    \\u3094\\u3043: \"vi\",\n    \\u3094: \"vu\",\n    \\u3094\\u3047: \"ve\",\n    \\u3094\\u3049: \"vo\"\n};\n/* eslint-enable  */ const $741555d9057b000f$var$SPECIAL_SYMBOLS = {\n    \"\\u3002\": \".\",\n    \"\\u3001\": \",\",\n    \"\\uFF1A\": \":\",\n    \"\\u30FB\": \"/\",\n    \"\\uFF01\": \"!\",\n    \"\\uFF1F\": \"?\",\n    \"\\u301C\": \"~\",\n    \"\\u30FC\": \"-\",\n    \"\\u300C\": \"\\u2018\",\n    \"\\u300D\": \"\\u2019\",\n    \"\\u300E\": \"\\u201C\",\n    \"\\u300F\": \"\\u201D\",\n    \"\\uFF3B\": \"[\",\n    \"\\uFF3D\": \"]\",\n    \"\\uFF08\": \"(\",\n    \"\\uFF09\": \")\",\n    \"\\uFF5B\": \"{\",\n    \"\\uFF5D\": \"}\",\n    \"\\u3000\": \" \"\n};\n// んい -> n'i\nconst $741555d9057b000f$var$AMBIGUOUS_VOWELS = [\n    \"\\u3042\",\n    \"\\u3044\",\n    \"\\u3046\",\n    \"\\u3048\",\n    \"\\u304A\",\n    \"\\u3084\",\n    \"\\u3086\",\n    \"\\u3088\"\n];\nconst $741555d9057b000f$var$SMALL_Y = {\n    \\u3083: \"ya\",\n    \\u3085: \"yu\",\n    \\u3087: \"yo\"\n};\nconst $741555d9057b000f$var$SMALL_Y_EXTRA = {\n    \\u3043: \"yi\",\n    \\u3047: \"ye\"\n};\nconst $741555d9057b000f$var$SMALL_AIUEO = {\n    \\u3041: \"a\",\n    \\u3043: \"i\",\n    \\u3045: \"u\",\n    \\u3047: \"e\",\n    \\u3049: \"o\"\n};\nconst $741555d9057b000f$var$YOON_KANA = [\n    \"\\u304D\",\n    \"\\u306B\",\n    \"\\u3072\",\n    \"\\u307F\",\n    \"\\u308A\",\n    \"\\u304E\",\n    \"\\u3073\",\n    \"\\u3074\",\n    \"\\u3094\",\n    \"\\u304F\",\n    \"\\u3075\"\n];\nconst $741555d9057b000f$var$YOON_EXCEPTIONS = {\n    \\u3057: \"sh\",\n    \\u3061: \"ch\",\n    \\u3058: \"j\",\n    \\u3062: \"j\"\n};\nconst $741555d9057b000f$var$SMALL_KANA = {\n    \\u3063: \"\",\n    \\u3083: \"ya\",\n    \\u3085: \"yu\",\n    \\u3087: \"yo\",\n    \\u3041: \"a\",\n    \\u3043: \"i\",\n    \\u3045: \"u\",\n    \\u3047: \"e\",\n    \\u3049: \"o\"\n};\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst $741555d9057b000f$var$SOKUON_WHITELIST = {\n    b: \"b\",\n    c: \"t\",\n    d: \"d\",\n    f: \"f\",\n    g: \"g\",\n    h: \"h\",\n    j: \"j\",\n    k: \"k\",\n    m: \"m\",\n    p: \"p\",\n    q: \"q\",\n    r: \"r\",\n    s: \"s\",\n    t: \"t\",\n    v: \"v\",\n    w: \"w\",\n    x: \"x\",\n    z: \"z\"\n};\nfunction $741555d9057b000f$var$getKanaToHepburnTree() {\n    if ($741555d9057b000f$var$kanaToHepburnMap == null) $741555d9057b000f$var$kanaToHepburnMap = $741555d9057b000f$var$createKanaToHepburnMap();\n    return $741555d9057b000f$var$kanaToHepburnMap;\n}\nfunction $741555d9057b000f$var$getKanaToRomajiTree(romanization) {\n    switch(romanization){\n        case $741555d9057b000f$export$9b45cb7ce8e39e14.HEPBURN:\n            return $741555d9057b000f$var$getKanaToHepburnTree();\n        default:\n            return {};\n    }\n}\nfunction $741555d9057b000f$var$createKanaToHepburnMap() {\n    const romajiTree = $741555d9057b000f$var$transform($741555d9057b000f$var$BASIC_ROMAJI);\n    const subtreeOf = (string)=>$741555d9057b000f$var$getSubTreeOf(romajiTree, string);\n    const setTrans = (string, transliteration)=>{\n        subtreeOf(string)[\"\"] = transliteration;\n    };\n    Object.entries($741555d9057b000f$var$SPECIAL_SYMBOLS).forEach(([jsymbol, symbol])=>{\n        subtreeOf(jsymbol)[\"\"] = symbol;\n    });\n    [\n        ...Object.entries($741555d9057b000f$var$SMALL_Y),\n        ...Object.entries($741555d9057b000f$var$SMALL_AIUEO)\n    ].forEach(([roma, kana])=>{\n        setTrans(roma, kana);\n    });\n    // きゃ -> kya\n    $741555d9057b000f$var$YOON_KANA.forEach((kana)=>{\n        const firstRomajiChar = subtreeOf(kana)[\"\"][0];\n        Object.entries($741555d9057b000f$var$SMALL_Y).forEach(([yKana, yRoma])=>{\n            setTrans(kana + yKana, firstRomajiChar + yRoma);\n        });\n        // きぃ -> kyi\n        Object.entries($741555d9057b000f$var$SMALL_Y_EXTRA).forEach(([yKana, yRoma])=>{\n            setTrans(kana + yKana, firstRomajiChar + yRoma);\n        });\n    });\n    Object.entries($741555d9057b000f$var$YOON_EXCEPTIONS).forEach(([kana, roma])=>{\n        // じゃ -> ja\n        Object.entries($741555d9057b000f$var$SMALL_Y).forEach(([yKana, yRoma])=>{\n            setTrans(kana + yKana, roma + yRoma[1]);\n        });\n        // じぃ -> jyi, じぇ -> je\n        setTrans(`${kana}\\u{3043}`, `${roma}yi`);\n        setTrans(`${kana}\\u{3047}`, `${roma}e`);\n    });\n    romajiTree[\"\\u3063\"] = $741555d9057b000f$var$resolveTsu(romajiTree);\n    Object.entries($741555d9057b000f$var$SMALL_KANA).forEach(([kana, roma])=>{\n        setTrans(kana, roma);\n    });\n    $741555d9057b000f$var$AMBIGUOUS_VOWELS.forEach((kana)=>{\n        setTrans(`\\u{3093}${kana}`, `n'${subtreeOf(kana)[\"\"]}`);\n    });\n    // NOTE: could be re-enabled with an option?\n    // // んば -> mbo\n    // const LABIAL = [\n    //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n    //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n    //   'ま', 'み', 'む', 'め', 'も',\n    // ];\n    // LABIAL.forEach((kana) => {\n    //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n    // });\n    return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\nfunction $741555d9057b000f$var$resolveTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value])=>{\n        if (!key) {\n            // we have reached the bottom of this branch\n            const consonant = value.charAt(0);\n            // eslint-disable-next-line no-param-reassign\n            tsuTree[key] = Object.keys($741555d9057b000f$var$SOKUON_WHITELIST).includes(consonant) ? $741555d9057b000f$var$SOKUON_WHITELIST[consonant] + value : value;\n        } else // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = $741555d9057b000f$var$resolveTsu(value);\n        return tsuTree;\n    }, {});\n}\n// memoize and deeply compare args so we only recreate when necessary\nconst $741555d9057b000f$var$createKanaToRomajiMap = $741555d9057b000f$var$memoizeOne((romanization, customRomajiMapping)=>{\n    let map = $741555d9057b000f$var$getKanaToRomajiTree(romanization);\n    if (customRomajiMapping) map = $741555d9057b000f$var$mergeCustomMapping(map, customRomajiMapping);\n    return map;\n}, $741555d9057b000f$var$dequal);\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */ function $741555d9057b000f$export$b0fffd8625644e57(input = \"\", options = {}, map) {\n    const config = $741555d9057b000f$var$mergeWithDefaultOptions(options);\n    if (!map) map = $741555d9057b000f$var$createKanaToRomajiMap(config.romanization, config.customRomajiMapping);\n    // just throw away the substring index information and simply concatenate all the kana\n    return $741555d9057b000f$var$splitIntoRomaji(input, config, map).map((romajiToken)=>{\n        const [start, end, romaji] = romajiToken;\n        const makeUpperCase = config.upcaseKatakana && $741555d9057b000f$export$9565d2ed9558b472(input.slice(start, end));\n        return makeUpperCase ? romaji.toUpperCase() : romaji;\n    }).join(\"\");\n}\nfunction $741555d9057b000f$var$splitIntoRomaji(input, options, map) {\n    if (!map) map = $741555d9057b000f$var$createKanaToRomajiMap(options.romanization, options.customRomajiMapping);\n    const config = Object.assign({}, {\n        isDestinationRomaji: true\n    }, options);\n    return $741555d9057b000f$var$applyMapping($741555d9057b000f$var$katakanaToHiragana(input, $741555d9057b000f$export$b0fffd8625644e57, config), map, !options.IMEMode);\n}\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharEnglishPunctuation(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return $741555d9057b000f$var$EN_PUNCTUATION_RANGES.some(([start, end])=>$741555d9057b000f$var$isCharInRange(char, start, end));\n}\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */ function $741555d9057b000f$export$28ab6cab47a15260(input = \"\", options = {}) {\n    const config = $741555d9057b000f$var$mergeWithDefaultOptions(options);\n    if (config.passRomaji) return $741555d9057b000f$var$katakanaToHiragana(input, $741555d9057b000f$export$b0fffd8625644e57, config);\n    if ($741555d9057b000f$export$e534968524b67a52(input, {\n        passKanji: true\n    })) {\n        const convertedKatakana = $741555d9057b000f$var$katakanaToHiragana(input, $741555d9057b000f$export$b0fffd8625644e57, config);\n        return $741555d9057b000f$export$4973add5c59f0c7b(convertedKatakana.toLowerCase(), config);\n    }\n    if ($741555d9057b000f$export$28956e30362f46cb(input) || $741555d9057b000f$var$isCharEnglishPunctuation(input)) return $741555d9057b000f$export$4973add5c59f0c7b(input.toLowerCase(), config);\n    return $741555d9057b000f$var$katakanaToHiragana(input, $741555d9057b000f$export$b0fffd8625644e57, config);\n}\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */ function $741555d9057b000f$export$a7c1b085022f6eaa(input = \"\", options = {}) {\n    const mergedOptions = $741555d9057b000f$var$mergeWithDefaultOptions(options);\n    if (mergedOptions.passRomaji) return $741555d9057b000f$var$hiraganaToKatakana(input);\n    if ($741555d9057b000f$export$e534968524b67a52(input) || $741555d9057b000f$export$28956e30362f46cb(input) || $741555d9057b000f$var$isCharEnglishPunctuation(input)) {\n        const hiragana = $741555d9057b000f$export$4973add5c59f0c7b(input.toLowerCase(), mergedOptions);\n        return $741555d9057b000f$var$hiraganaToKatakana(hiragana);\n    }\n    return $741555d9057b000f$var$hiraganaToKatakana(input);\n}\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */ function $741555d9057b000f$var$isCharJapanesePunctuation(char = \"\") {\n    if ($741555d9057b000f$var$isEmpty(char)) return false;\n    return $741555d9057b000f$var$JA_PUNCTUATION_RANGES.some(([start, end])=>$741555d9057b000f$var$isCharInRange(char, start, end));\n}\nconst $741555d9057b000f$var$isCharEnSpace = (x)=>x === \" \";\nconst $741555d9057b000f$var$isCharJaSpace = (x)=>x === \"\\u3000\";\nconst $741555d9057b000f$var$isCharJaNum = (x)=>/[０-９]/.test(x);\nconst $741555d9057b000f$var$isCharEnNum = (x)=>/[0-9]/.test(x);\nconst $741555d9057b000f$var$TOKEN_TYPES = {\n    EN: \"en\",\n    JA: \"ja\",\n    EN_NUM: \"englishNumeral\",\n    JA_NUM: \"japaneseNumeral\",\n    EN_PUNC: \"englishPunctuation\",\n    JA_PUNC: \"japanesePunctuation\",\n    KANJI: \"kanji\",\n    HIRAGANA: \"hiragana\",\n    KATAKANA: \"katakana\",\n    SPACE: \"space\",\n    OTHER: \"other\"\n};\n// prettier-ignore\nfunction $741555d9057b000f$var$getType(input, compact = false) {\n    const { EN: EN, JA: JA, EN_NUM: EN_NUM, JA_NUM: JA_NUM, EN_PUNC: EN_PUNC, JA_PUNC: JA_PUNC, KANJI: KANJI, HIRAGANA: HIRAGANA, KATAKANA: KATAKANA, SPACE: SPACE, OTHER: OTHER } = $741555d9057b000f$var$TOKEN_TYPES;\n    if (compact) switch(true){\n        case $741555d9057b000f$var$isCharJaNum(input):\n            return OTHER;\n        case $741555d9057b000f$var$isCharEnNum(input):\n            return OTHER;\n        case $741555d9057b000f$var$isCharEnSpace(input):\n            return EN;\n        case $741555d9057b000f$var$isCharEnglishPunctuation(input):\n            return OTHER;\n        case $741555d9057b000f$var$isCharJaSpace(input):\n            return JA;\n        case $741555d9057b000f$var$isCharJapanesePunctuation(input):\n            return OTHER;\n        case $741555d9057b000f$var$isCharJapanese(input):\n            return JA;\n        case $741555d9057b000f$var$isCharRomaji(input):\n            return EN;\n        default:\n            return OTHER;\n    }\n    else switch(true){\n        case $741555d9057b000f$var$isCharJaSpace(input):\n            return SPACE;\n        case $741555d9057b000f$var$isCharEnSpace(input):\n            return SPACE;\n        case $741555d9057b000f$var$isCharJaNum(input):\n            return JA_NUM;\n        case $741555d9057b000f$var$isCharEnNum(input):\n            return EN_NUM;\n        case $741555d9057b000f$var$isCharEnglishPunctuation(input):\n            return EN_PUNC;\n        case $741555d9057b000f$var$isCharJapanesePunctuation(input):\n            return JA_PUNC;\n        case $741555d9057b000f$var$isCharKanji(input):\n            return KANJI;\n        case $741555d9057b000f$var$isCharHiragana(input):\n            return HIRAGANA;\n        case $741555d9057b000f$var$isCharKatakana(input):\n            return KATAKANA;\n        case $741555d9057b000f$var$isCharJapanese(input):\n            return JA;\n        case $741555d9057b000f$var$isCharRomaji(input):\n            return EN;\n        default:\n            return OTHER;\n    }\n}\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */ function $741555d9057b000f$export$660b2ee2d4fb4eff(input, { compact: compact = false, detailed: detailed = false } = {}) {\n    if (input == null || $741555d9057b000f$var$isEmpty(input)) return [];\n    const chars = [\n        ...input\n    ];\n    let initial = chars.shift();\n    let prevType = $741555d9057b000f$var$getType(initial, compact);\n    initial = detailed ? {\n        type: prevType,\n        value: initial\n    } : initial;\n    const result = chars.reduce((tokens, char)=>{\n        const currType = $741555d9057b000f$var$getType(char, compact);\n        const sameType = currType === prevType;\n        prevType = currType;\n        let newValue = char;\n        if (sameType) newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n        return detailed ? tokens.concat({\n            type: currType,\n            value: newValue\n        }) : tokens.concat(newValue);\n    }, [\n        initial\n    ]);\n    return result;\n}\nconst $741555d9057b000f$var$isLeadingWithoutInitialKana = (input, leading)=>leading && !$741555d9057b000f$export$89c35efdd540c5db(input[0]);\nconst $741555d9057b000f$var$isTrailingWithoutFinalKana = (input, leading)=>!leading && !$741555d9057b000f$export$89c35efdd540c5db(input[input.length - 1]);\nconst $741555d9057b000f$var$isInvalidMatcher = (input, matchKanji)=>matchKanji && ![\n        ...matchKanji\n    ].some($741555d9057b000f$export$92376b026946860f) || !matchKanji && $741555d9057b000f$export$89c35efdd540c5db(input);\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */ function $741555d9057b000f$export$765969e1457dc91a(input = \"\", { leading: leading = false, matchKanji: matchKanji = \"\" } = {}) {\n    if (!$741555d9057b000f$export$33dfa193fc452c06(input) || $741555d9057b000f$var$isLeadingWithoutInitialKana(input, leading) || $741555d9057b000f$var$isTrailingWithoutFinalKana(input, leading) || $741555d9057b000f$var$isInvalidMatcher(input, matchKanji)) return input;\n    const chars = matchKanji || input;\n    const okuriganaRegex = new RegExp(leading ? `^${$741555d9057b000f$export$660b2ee2d4fb4eff(chars).shift()}` : `${$741555d9057b000f$export$660b2ee2d4fb4eff(chars).pop()}$`);\n    return input.replace(okuriganaRegex, \"\");\n}\n\n\nconst $18fe9b1b6336f500$export$aa00f474800863da = Object.freeze({\n    verb: \"verb\",\n    adjective: \"adjective\"\n});\nconst $18fe9b1b6336f500$export$45aabe1f61557e96 = Object.freeze({\n    present: \"Present\",\n    past: \"Past\",\n    te: \"\\u3066-form\",\n    adverb: \"Adverb\",\n    volitional: \"Volitional\",\n    passive: \"Passive\",\n    causative: \"Causative\",\n    potential: \"Potential\",\n    imperative: \"Imperative\"\n});\n\n\nfunction $820877bea407f5fe$export$ef83af2c8dc2c683(element, isDisplayNone) {\n    $820877bea407f5fe$var$toggleClassName(element, \"display-none\", isDisplayNone);\n}\nfunction $820877bea407f5fe$export$877ee1ca1de102fd(element, isBackgroundNone) {\n    $820877bea407f5fe$var$toggleClassName(element, \"background-none\", isBackgroundNone);\n}\nfunction $820877bea407f5fe$var$toggleClassName(element, className, enabled) {\n    if (enabled) element.classList.add(className);\n    else element.classList.remove(className);\n}\nfunction $820877bea407f5fe$export$4720c7d384d77b7d(length) {\n    let array = new Array(length);\n    for(let i = 0; i < array.length; i++)array[i] = [];\n    return array;\n}\n\n\nconst $68e612a17b33f886$export$1a0f0b5f10fa2085 = Object.freeze({\n    always: \"always\",\n    onlyAfterAnswering: \"after\"\n});\nconst $68e612a17b33f886$var$nonConjugationSettings = $68e612a17b33f886$var$getNonConjugationSettingsSet();\nfunction $68e612a17b33f886$var$getNonConjugationSettingsSet() {\n    const settings = new Set();\n    document.querySelectorAll(\"#non-conjugation-settings input\").forEach((input)=>settings.add(input.getAttribute(\"name\")));\n    return settings;\n}\nfunction $68e612a17b33f886$export$d04e1a4f8a41f042(settings) {\n    let prunedSettings = JSON.parse(JSON.stringify(settings));\n    $68e612a17b33f886$var$nonConjugationSettings.forEach((s)=>{\n        delete prunedSettings[s];\n    });\n    return prunedSettings;\n}\nconst $68e612a17b33f886$export$f598fee9a8761f8f = ()=>{\n    // First set all checkboxes to true\n    // document.getElementById(\"options-form\")\n    // \t.querySelectorAll('[type=\"checkbox\"]').checked = true;\n    const inputs = document.getElementById(\"options-form\").querySelectorAll('[type=\"checkbox\"]');\n    const settings = {};\n    for (const input of Array.from(inputs))settings[input.name] = true;\n    // Set any advanced conjugation checkboxes to false\n    const advancedInputs = document.getElementById(\"options-form\").querySelectorAll('.advanced-section [type=\"checkbox\"]');\n    for (const input of Array.from(advancedInputs))settings[input.name] = false;\n    // Set input radio values\n    settings[\"translationTiming\"] = $68e612a17b33f886$export$1a0f0b5f10fa2085.always;\n    settings[\"furiganaTiming\"] = $68e612a17b33f886$export$1a0f0b5f10fa2085.always;\n    return settings;\n};\nconst $68e612a17b33f886$export$100e28ec40f7f33c = ()=>{\n    const settings = {};\n    const nonConjugationInputs = document.getElementById(\"non-conjugation-settings\").querySelectorAll('[type=\"checkbox\"]');\n    for (let input of Array.from(nonConjugationInputs))settings[input.name] = true;\n    // Set input radio values\n    settings[\"translationTiming\"] = $68e612a17b33f886$export$1a0f0b5f10fa2085.always;\n    settings[\"furiganaTiming\"] = $68e612a17b33f886$export$1a0f0b5f10fa2085.always;\n    // All conjugation settings (including advanced options) are added as false\n    const conjugationInputs = document.getElementById(\"conjugation-settings\").querySelectorAll('[type=\"checkbox\"]');\n    for (let input of Array.from(conjugationInputs))settings[input.name] = false;\n    return settings;\n};\nfunction $68e612a17b33f886$export$41be671a9fdd6b82() {\n    const optionsGroups = document.getElementsByClassName(\"options-group\");\n    for (const optionGroup of Array.from(optionsGroups))// Note that this registers a listener for a click anywhere in the\n    // options-group element (not just the checkboxes).\n    optionGroup.addEventListener(\"click\", (e)=>$68e612a17b33f886$var$optionsGroupCheckError(e.currentTarget));\n    const verbInputsWithVariations = document.getElementsByClassName(\"verb-has-variations\");\n    const verbInputsWithPolitenessOnly = document.getElementsByClassName(\"verb-has-politeness\");\n    for (const input of Array.from(verbInputsWithVariations).concat(Array.from(verbInputsWithPolitenessOnly)))input.addEventListener(\"click\", $68e612a17b33f886$var$showHideVerbVariationOptions);\n    const adjectiveInputsWithVariations = document.getElementsByClassName(\"adjective-has-variations\");\n    for (const input of Array.from(adjectiveInputsWithVariations))input.addEventListener(\"click\", $68e612a17b33f886$var$showHideAdjectiveVariationOptions);\n    // document\n    // \t.getElementById(\"furigana-checkbox\")\n    // \t.addEventListener(\"click\", showHideFuriganaSubOptions);\n    document.getElementById(\"translation-checkbox\").addEventListener(\"click\", $68e612a17b33f886$var$showHideTranslationSubOptions);\n    document.getElementById(\"verbs-checkbox\").addEventListener(\"click\", $68e612a17b33f886$var$verbAndAdjCheckError);\n    // document\n    // \t.getElementById(\"adjectives-checkbox\")\n    // \t.addEventListener(\"click\", verbAndAdjCheckError);\n    // top level errors\n    const optionsView = document.getElementById(\"options-view\");\n// optionsView.addEventListener(\"click\", verbPresAffPlainCheckError);\n// optionsView.addEventListener(\"click\", adjPresAffPlainCheckError);\n}\nfunction $68e612a17b33f886$var$checkToEnableBackButton() {\n    let errors = document.getElementsByClassName(\"settings-error-text\");\n    for (let error of Array.from(errors))// checks if any error messages take up space on the screen\n    if (error.offsetWidth > 0 && error.offsetHeight > 0) {\n        document.getElementById(\"back-button\").disabled = true;\n        return;\n    }\n    document.getElementById(\"back-button\").disabled = false;\n}\n/**\n * If enabled is true, sets errorElement's content to errorMessage.\n * Otherwise, hides errorElement and tries to enable the back button.\n *\n * @param {boolean} enabled\n * @param {Element} errorElement\n * @param {String} errorMessage\n */ function $68e612a17b33f886$var$toggleError(enabled, errorElement1, errorMessage) {\n    if (enabled) {\n        let backButton = document.getElementById(\"back-button\");\n        errorElement1.textContent = errorMessage;\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(errorElement1, false);\n        backButton.disabled = true;\n    } else {\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(errorElement1, true);\n        $68e612a17b33f886$var$checkToEnableBackButton();\n    }\n}\nfunction $68e612a17b33f886$var$doCheckboxesHaveValue(inputs, shouldBeChecked) {\n    for (let input of Array.from(inputs)){\n        if (input.checked !== shouldBeChecked) return false;\n    }\n    return true;\n}\nfunction $68e612a17b33f886$var$checkInputsAndToggleError(inputs, errorElement1, errorMessage, shouldBeChecked) {\n    $68e612a17b33f886$var$toggleError($68e612a17b33f886$var$doCheckboxesHaveValue(inputs, shouldBeChecked), errorElement1, errorMessage);\n}\nfunction $68e612a17b33f886$var$optionsGroupCheckError(groupElement) {\n    let inputs = groupElement.getElementsByTagName(\"input\");\n    let errorElement1 = groupElement.getElementsByClassName(\"settings-error-text\")[0];\n    $68e612a17b33f886$var$checkInputsAndToggleError(inputs, errorElement1, \"*Must choose at least 1 option from this category\", false);\n}\nfunction $68e612a17b33f886$var$verbAndAdjCheckError() {\n    let inputs = [\n        document.querySelector('input[name=\"verb\"]')\n    ];\n    (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"verb-options-container\"), !inputs[0].checked);\n    // toggleDisplayNone(\n    // \tdocument.getElementById(\"adjective-options-container\"),\n    // \t!inputs[1].checked\n    // );\n    let errorElement1 = document.getElementById(\"top-must-choose\");\n    $68e612a17b33f886$var$checkInputsAndToggleError(inputs, errorElement1, \"*Must choose at least 1 option from this category\", false);\n}\n// Relies on naming between verb and adjective checkboxes being parallel in the html\nfunction $68e612a17b33f886$var$areOnlyPresAffPlainChecked(partOfSpeech) {\n    // const allInputsToValidate = Array.from(\n    // \tdocument\n    // \t\t.getElementById(`${partOfSpeech}-conjugation-type-group`)\n    // \t\t.getElementsByTagName(\"input\")\n    // ).concat(\n    // \tArray.from(\n    // \t\tdocument\n    // \t\t\t.getElementById(`${partOfSpeech}-variations-container`)\n    // \t\t\t.getElementsByTagName(\"input\")\n    // \t)\n    // );\n    const allInputsToValidate = Array.from(document.getElementById(`${partOfSpeech}-variations-container`).getElementsByTagName(\"input\"));\n    const inputsToBeChecked = new Set([\n        `${partOfSpeech}present`,\n        `${partOfSpeech}affirmative`,\n        `${partOfSpeech}plain`\n    ]);\n    for (const input of allInputsToValidate){\n        // We're validating that only the inputs in inputsToBeChecked are checked.\n        // Otherwise, return early to prevent the error from being displayed.\n        if (!input.checked && inputsToBeChecked.has(input.name) || input.checked && !inputsToBeChecked.has(input.name)) return false;\n    }\n    // If we make it here, then only present, affirmative, and plain were checked in their respective option groups\n    return true;\n}\nfunction $68e612a17b33f886$var$verbPresAffPlainCheckError() {\n    // let optionsGroup = document.getElementById(\"verb-conjugation-type-group\");\n    // let errorElement = optionsGroup.getElementsByClassName(\n    // \t\"settings-error-text\"\n    // )[0];\n    if ($68e612a17b33f886$var$areOnlyPresAffPlainChecked((0, $18fe9b1b6336f500$export$aa00f474800863da).verb)) {\n        $68e612a17b33f886$var$toggleError(true, errorElement, \"*Invalid combination: present, affirmative, plain\");\n        // These inputs could be hidden because the parent \"Verb\" option is unchecked, so check to enable back button\n        $68e612a17b33f886$var$checkToEnableBackButton();\n    } else $68e612a17b33f886$var$optionsGroupCheckError(optionsGroup);\n}\nfunction $68e612a17b33f886$var$adjPresAffPlainCheckError() {\n    let optionsGroup1 = document.getElementById(\"adjective-type-group\");\n    let errorElement1 = optionsGroup1.getElementsByClassName(\"settings-error-text\")[0];\n    let iAdjInput = document.querySelector('input[name=\"adjectivei\"]');\n    let irrAdjInput = document.querySelector('input[name=\"adjectiveirregular\"]');\n    let naAdjInput = document.querySelector('input[name=\"adjectivena\"]');\n    if ($68e612a17b33f886$var$areOnlyPresAffPlainChecked((0, $18fe9b1b6336f500$export$aa00f474800863da).adjective) && !naAdjInput.checked && (iAdjInput.checked || irrAdjInput.checked)) {\n        $68e612a17b33f886$var$toggleError(true, errorElement1, \"*Invalid combination: \\u3044/irregular, present, affirmative, plain\");\n        // element could be hidden because verb is unchecked, so check to enable back button\n        $68e612a17b33f886$var$checkToEnableBackButton();\n    } else if (document.querySelector('input[name=\"adjective\"]').checked) $68e612a17b33f886$var$optionsGroupCheckError(optionsGroup1);\n}\n/**\n * Shows or hides UI options based on the values of checkboxes.\n *\n * @param {string} triggeringInputsClass - The class that's been put on inputs that trigger this show/hide\n * @param {string} showHideContainerId - The container to show/hide. Should either be an element with an \"options-group\" class, or be an element that contains other \"options-group\" elements\n * @returns {boolean} - true if the options were shown, false if hidden\n */ function $68e612a17b33f886$var$showHideUiOptions(triggeringInputsClass, showHideContainerId) {\n    const inputsThatTrigger = document.getElementsByClassName(triggeringInputsClass);\n    const showHideContainer = document.getElementById(showHideContainerId);\n    // Check if showHideContainer is an options-group itself, or if it contains options-group elements\n    const optionGroups = showHideContainer.classList.contains(\"options-group\") ? [\n        showHideContainer\n    ] : showHideContainer.getElementsByClassName(\"options-group\");\n    for (const input of Array.from(inputsThatTrigger))if (input.checked) {\n        for (const optionGroup of Array.from(optionGroups)){\n            $68e612a17b33f886$var$optionsGroupCheckError(optionGroup);\n            (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(optionGroup, false);\n        }\n        return true;\n    }\n    for (const optionGroup of Array.from(optionGroups))(0, $820877bea407f5fe$export$ef83af2c8dc2c683)(optionGroup, true);\n    return false;\n}\n// In this context the options Affirmative, Negative, Plain, and Polite\n// are considered \"variations\" on other conjugation types.\n// Not all types (like て for verbs, adverbs for adjectives) have variations.\nfunction $68e612a17b33f886$var$showHideVerbVariationOptions() {\n    // First try to show/hide all variation options\n    const showingAllVariations = $68e612a17b33f886$var$showHideUiOptions(\"verb-selected\", \"verb-variations-container\");\n    // If all variations aren't shown, see if just politeness options should be shown\n    if (!showingAllVariations) $68e612a17b33f886$var$showHideUiOptions(\"verb-has-politeness\", \"verb-politeness-container\");\n}\nfunction $68e612a17b33f886$var$showHideAdjectiveVariationOptions() {\n    $68e612a17b33f886$var$showHideUiOptions(\"adjective-has-variations\", \"adjective-variations-container\");\n}\nfunction $68e612a17b33f886$var$showHideFuriganaSubOptions() {\n    (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"furigana-sub-options\"), !document.getElementById(\"furigana-checkbox\").checked);\n}\nfunction $68e612a17b33f886$var$showHideTranslationSubOptions() {\n    (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"translation-sub-options\"), !document.getElementById(\"translation-checkbox\").checked);\n}\nfunction $68e612a17b33f886$export$7b52e59d7da90ebe(settings) {\n    $68e612a17b33f886$export$3feb6355be08b5e5(settings.emoji);\n    $68e612a17b33f886$export$aee73cd064bb7d20(settings.streak);\n// showTranslation and showFurigana are dependent on the state, so we can't set them here\n}\nfunction $68e612a17b33f886$export$9ad811eb0029a5fe(settings, completeWordList) {\n    $68e612a17b33f886$export$7b52e59d7da90ebe(settings);\n    let currentWordList = (0, $820877bea407f5fe$export$4720c7d384d77b7d)(completeWordList.length);\n    const verbRegex = /^verb_.+/;\n    if (settings.verb !== false) {\n        // Copy all of the verbs over\n        currentWordList[0] = [\n            ...completeWordList[0]\n        ];\n        // currentWordList[0] = [];\n        let verbOptions = Object.keys(settings).filter((el)=>verbRegex.test(el));\n        // Filter out the verbs we don't want\n        for(let i = 0; i < verbOptions.length; i++)if (settings[verbOptions[i]] === true) currentWordList[0] = currentWordList[0].concat(completeWordList[0].filter($68e612a17b33f886$var$questionRemoveFiltersController.verbs[verbOptions[i]]));\n    }\n    const adjectiveRegex = /^adjective.+/;\n    if (settings.adjective !== false) {\n        // Copy all of the adjectives over\n        currentWordList[1] = [\n            ...completeWordList[1]\n        ];\n        let adjectiveOptions = Object.keys(settings).filter((el)=>adjectiveRegex.test(el));\n        // Filter out the adjectives we don't want\n        for(let i = 0; i < adjectiveOptions.length; i++)if (settings[adjectiveOptions[i]] === false) currentWordList[1] = currentWordList[1].filter(questionRemoveFilters.adjectives[adjectiveOptions[i]]);\n    }\n    console.log(currentWordList);\n    return currentWordList;\n}\n// The input to these functions is a \"Word\" object defined in main.js.\n// If one of these filters is applied to an array of Words,\n// that type of Word will be removed from the array.\nconst $68e612a17b33f886$var$questionRemoveFiltersController = {\n    verbs: {\n        // PRESENT TENSE\n        verb_present_indicative_informal_impolite: function(word) {\n            let bool = word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).present && word.conjugation.formal === false && word.conjugation.polite === false;\n            return bool;\n        },\n        verb_present_indicative_formal_impolite: function(word) {\n            let bool = word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).present && word.conjugation.formal === true && word.conjugation.polite === false;\n            return bool;\n        },\n        verb_present_indicative_informal_polite: function(word) {\n            return word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).present && word.conjugation.formal === false && word.conjugation.polite === true;\n        },\n        verb_present_indicative_formal_polite: function(word) {\n            return word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).present && word.conjugation.formal === true && word.conjugation.polite === true;\n        },\n        // PAST TENSE\n        verb_past_indicative_informal_impolite: function(word) {\n            let bool = word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).past && word.conjugation.formal === false && word.conjugation.polite === false;\n            return bool;\n        },\n        verb_past_indicative_formal_impolite: function(word) {\n            let bool = word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).past && word.conjugation.formal === true && word.conjugation.polite === false;\n            return bool;\n        },\n        verb_past_indicative_informal_polite: function(word) {\n            return word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).past && word.conjugation.formal === false && word.conjugation.polite === true;\n        },\n        verb_past_indicative_formal_polite: function(word) {\n            return word.conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).past && word.conjugation.formal === true && word.conjugation.polite === true;\n        }\n    }\n};\nfunction $68e612a17b33f886$export$30675527ad91ffe6(maxScoreObjects, visibleConjugationSettings) {\n    let settingKeys = Object.keys(visibleConjugationSettings);\n    let flag;\n    for(let i = 0; i < maxScoreObjects.length; i++){\n        flag = true;\n        for (let s of settingKeys)if (maxScoreObjects[i].settings[s] != visibleConjugationSettings[s]) {\n            flag = false;\n            break;\n        }\n        if (flag == true) return i;\n    }\n    return -1;\n}\nconst $68e612a17b33f886$export$3feb6355be08b5e5 = function(show) {\n    document.getElementById(\"conjugation-inquery-text\").className = show ? \"\" : \"hide-emojis\";\n};\nconst $68e612a17b33f886$export$aee73cd064bb7d20 = function(show) {\n    document.querySelectorAll(\".streak\").forEach((s)=>{\n        if (show) s.classList.remove(\"display-none\");\n        else s.classList.add(\"display-none\");\n    });\n};\nconst $68e612a17b33f886$export$e91dd64c29cc7054 = function(showInDom, makeTransparent = false) {\n    const el = document.getElementById(\"verb-text\");\n    $68e612a17b33f886$var$setDisplayAndTransparency(el, showInDom, \"hide-furigana\", makeTransparent, \"transparent-furigana\");\n};\nconst $68e612a17b33f886$export$42fe1bab90555082 = function(showInDom, makeTransparent = false) {\n    const el = document.getElementById(\"translation\");\n    $68e612a17b33f886$var$setDisplayAndTransparency(el, showInDom, \"display-none\", makeTransparent, \"transparent\");\n};\n// removeClass should lead to display:none\n// transparentClass should lead to something like opacity: 0 to keep height when hidden\nfunction $68e612a17b33f886$var$setDisplayAndTransparency(element, showInDom, removeClass, makeTransparent, transparentClass) {\n    // Reset state\n    element.classList.remove(removeClass);\n    element.classList.remove(transparentClass);\n    if (!showInDom) {\n        element.classList.add(removeClass);\n        return;\n    }\n    if (makeTransparent) {\n        element.classList.add(transparentClass);\n        return;\n    }\n}\nfunction $68e612a17b33f886$export$b8407eada850d56b(settings) {\n    let checkboxInputs = document.querySelectorAll(`#options-form input[type=\"checkbox\"]`);\n    for (let input of Array.from(checkboxInputs))input.checked = settings[input.name];\n    // selectConditionalUiRadio(\n    // \tsettings.furiganaTiming,\n    // \t\"furigana-always-radio\",\n    // \t\"furigana-after-radio\"\n    // );\n    selectConditionalUiRadio(settings.translationTiming, \"translation-always-radio\", \"translation-after-radio\");\n    function selectConditionalUiRadio(radioValue, alwaysRadioId, onlyAfterAnsweringRadioId) {\n        switch(radioValue){\n            case $68e612a17b33f886$export$1a0f0b5f10fa2085.always:\n                document.getElementById(alwaysRadioId).checked = true;\n                break;\n            case $68e612a17b33f886$export$1a0f0b5f10fa2085.onlyAfterAnswering:\n                document.getElementById(onlyAfterAnsweringRadioId).checked = true;\n                break;\n        }\n    }\n}\nfunction $68e612a17b33f886$export$f1d3883d7bdbc350() {\n    $68e612a17b33f886$var$showHideVerbVariationOptions();\n    // showHideAdjectiveVariationOptions();\n    // showHideFuriganaSubOptions();\n    $68e612a17b33f886$var$showHideTranslationSubOptions();\n    let optionsGroups = document.getElementsByClassName(\"options-group\");\n    for (let group of Array.from(optionsGroups))$68e612a17b33f886$var$optionsGroupCheckError(group);\n    $68e612a17b33f886$var$verbAndAdjCheckError();\n}\nfunction $68e612a17b33f886$export$484e1e7497eb0732(settings) {\n    const checkboxInputs = document.querySelectorAll('#options-form input[type=\"checkbox\"]');\n    for (let input of Array.from(checkboxInputs))settings[input.name] = input.checked;\n    settings.furiganaTiming = getConditionalUiSetting(\"furiganaTiming\");\n    settings.translationTiming = getConditionalUiSetting(\"translationTiming\");\n    // Default to \"always\"\n    function getConditionalUiSetting(radioName) {\n        return document.querySelector(`input[name=\"${radioName}\"]:checked`)?.value ?? $68e612a17b33f886$export$1a0f0b5f10fa2085.always;\n    }\n    return settings;\n}\nfunction $68e612a17b33f886$export$f35d7c2709d46536() {\n    const visibleConjugationSettings = {};\n    const checkboxInputs = document.querySelectorAll('#options-form input[type=\"checkbox\"]');\n    for (let input of Array.from(checkboxInputs))if (input.offsetWidth > 0 && input.offsetHeight > 0 && !$68e612a17b33f886$var$nonConjugationSettings.has(input.name)) visibleConjugationSettings[input.name] = input.checked;\n    return visibleConjugationSettings;\n}\n\n\nconst $d3e8101abf179243$export$b5495a69ec24caf1 = {\n    \"verbs\": [\n        {\n            \"kanji\": \"<ruby>\\u884C<rt>\\u3044</rt></ruby>\\u304F\",\n            \"type\": \"irv\",\n            \"eng\": \"go\",\n            \"group\": \"iku\"\n        },\n        {\n            \"kanji\": \"\\u3059\\u308B\",\n            \"type\": \"irv\",\n            \"eng\": \"do, make\",\n            \"group\": \"suru\"\n        }\n    ],\n    \"adjectives\": [\n        {\n            \"kanji\": \"\\u3044\\u3044\",\n            \"type\": \"ira\",\n            \"eng\": \"good\"\n        },\n        {\n            \"kanji\": \"\\u304B\\u3063\\u3053\\u3044\\u3044\",\n            \"type\": \"ira\",\n            \"eng\": \"cool, handsome\"\n        }\n    ]\n};\nconst $d3e8101abf179243$export$7530f3eeac5df28 = {\n    \"verbs\": [\n        {\n            \"hangeul\": \"\\uAC00\\uB2E4\",\n            \"eng\": \"to go\"\n        },\n        {\n            \"hangeul\": \"\\uAC00\\uB974\\uCE58\\uB2E4\",\n            \"eng\": \"to teach\"\n        },\n        {\n            \"hangeul\": \"\\uAC00\\uC838\\uAC00\\uB2E4\",\n            \"eng\": \"to take\"\n        },\n        {\n            \"hangeul\": \"\\uAC00\\uC838\\uC624\\uB2E4\",\n            \"eng\": \"to bring\"\n        },\n        {\n            \"hangeul\": \"\\uAC00\\uC9C0\\uB2E4\",\n            \"eng\": \"to have\"\n        },\n        {\n            \"hangeul\": \"\\uAC08\\uC544\\uD0C0\\uB2E4\",\n            \"eng\": \"to transfer (eg. transfer to subway line 9)\"\n        },\n        {\n            \"hangeul\": \"\\uAC10\\uB2E4\",\n            \"eng\": \"to close (one's eyes)\"\n        },\n        {\n            \"hangeul\": \"\\uAC10\\uC0AC\\uD558\\uB2E4\",\n            \"eng\": \"to appreciate\"\n        },\n        {\n            \"hangeul\": \"\\uAC16\\uB2E4\",\n            \"eng\": \"to have\"\n        },\n        {\n            \"hangeul\": \"\\uAC71\\uC815\\uD558\\uB2E4\",\n            \"eng\": \"to worry\"\n        },\n        {\n            \"hangeul\": \"\\uAC74\\uB108\\uAC00\\uB2E4\",\n            \"eng\": \"to cross (over)\"\n        },\n        {\n            \"hangeul\": \"\\uAC74\\uB108\\uB2E4\",\n            \"eng\": \"to cross (over)\"\n        },\n        {\n            \"hangeul\": \"\\uAC77\\uB2E4\",\n            \"eng\": \"to walk\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uB2E4 (clothing, picture, etc)\",\n            \"eng\": \"to hang\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uB2E4 (communication)\",\n            \"eng\": \"to call\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uB9AC\\uB2E4 (clothing, picture, etc)\",\n            \"eng\": \"to hang\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uB9AC\\uB2E4 (illness)\",\n            \"eng\": \"to contract\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uB9AC\\uB2E4 (carry)\",\n            \"eng\": \"to take\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uC5B4\\uAC00\\uB2E4\",\n            \"eng\": \"to walk to\"\n        },\n        {\n            \"hangeul\": \"\\uAC78\\uC774\\uC624\\uB2E4\",\n            \"eng\": \"to walk from\"\n        },\n        {\n            \"hangeul\": \"\\uACB0\\uC815\\uD558\\uB2E4\",\n            \"eng\": \"to decide\"\n        },\n        {\n            \"hangeul\": \"\\uACB0\\uD63C\\uD558\\uB2E4\",\n            \"eng\": \"to marry\"\n        },\n        {\n            \"hangeul\": \"\\uACBD\\uD5D8\\uD558\\uB2E4\",\n            \"eng\": \"to experience\"\n        },\n        {\n            \"hangeul\": \"\\uACC4\\uC0B0\\uD558\\uB2E4\",\n            \"eng\": \"to calculate\"\n        },\n        {\n            \"hangeul\": \"\\uACC4\\uC2DC\\uB2E4\",\n            \"eng\": \"to be\"\n        },\n        {\n            \"hangeul\": \"\\uACE0\\uB974\\uB2E4\",\n            \"eng\": \"to choose\"\n        },\n        {\n            \"hangeul\": \"\\uACE0\\uCE58\\uB2E4\",\n            \"eng\": \"to repair\"\n        },\n        {\n            \"hangeul\": \"\\uACF5\\uBD80\\uD558\\uB2E4\",\n            \"eng\": \"to study\"\n        },\n        {\n            \"hangeul\": \"\\uAD00\\uAD11\\uD558\\uB2E4\",\n            \"eng\": \"to go sightseeing\"\n        },\n        {\n            \"hangeul\": \"\\uAD6C\\uACBD\\uD558\\uB2E4\",\n            \"eng\": \"to look around\"\n        },\n        {\n            \"hangeul\": \"\\uAD6C\\uD558\\uB2E4\",\n            \"eng\": \"to look for\"\n        },\n        {\n            \"hangeul\": \"\\uAD7D\\uB2E4\",\n            \"eng\": \"to grill\"\n        },\n        {\n            \"hangeul\": \"\\uADF8\\uB9AC\\uB2E4\",\n            \"eng\": \"to draw (a picture)\"\n        },\n        {\n            \"hangeul\": \"\\uADF8\\uCE58\\uB2E4\",\n            \"eng\": \"to stop\"\n        },\n        {\n            \"hangeul\": \"\\uAE30\\uB2E4\\uB9AC\\uB2E4\",\n            \"eng\": \"to wait\"\n        },\n        {\n            \"hangeul\": \"\\uAE30\\uB974\\uB2E4\",\n            \"eng\": \"to raise (a child)\"\n        },\n        {\n            \"hangeul\": \"\\uAE30\\uBED0\\uD558\\uB2E4\",\n            \"eng\": \"to be pleased\"\n        },\n        {\n            \"hangeul\": \"\\uAE30\\uC5B5\\uD558\\uB2E4\",\n            \"eng\": \"to remember\"\n        },\n        {\n            \"hangeul\": \"\\uAE34\\uC7A5\\uB418\\uB2E4\",\n            \"eng\": \"to be nervous\"\n        },\n        {\n            \"hangeul\": \"\\uAE38\\uB2E4\",\n            \"eng\": \"to long (adjective)\"\n        },\n        {\n            \"hangeul\": \"\\uAE4E\\uB2E4\",\n            \"eng\": \"to cut (hair)\"\n        },\n        {\n            \"hangeul\": \"\\uAE68\\uB2E4\",\n            \"eng\": \"to break\"\n        }\n    ],\n    \"adjectives\": []\n};\nconst $d3e8101abf179243$export$f943a98f64e52676 = {\n    \"verbs\": [\n        {\n            \"kanji\": \"<ruby>\\u884C<rt>\\u3044</rt></ruby>\\u304F\",\n            \"type\": \"irv\",\n            \"eng\": \"go\",\n            \"group\": \"iku\"\n        },\n        {\n            \"kanji\": \"\\u3059\\u308B\",\n            \"type\": \"irv\",\n            \"eng\": \"do, make\",\n            \"group\": \"suru\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6765<rt>\\u304F</rt></ruby>\\u308B\",\n            \"type\": \"irv\",\n            \"eng\": \"come\"\n        },\n        {\n            \"kanji\": \"\\u3042\\u308B\",\n            \"type\": \"irv\",\n            \"eng\": \"have, exists, is (inanimate)\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u554F<rt>\\u3068</rt></ruby>\\u3046\",\n            \"type\": \"irv\",\n            \"eng\": \"ask, accuse\"\n        },\n        {\n            \"kanji\": \"\\u3044\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"exists, is (living things)\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u59CB<rt>\\u306F\\u3058</rt></ruby>\\u3081\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"begin\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u501F<rt>\\u304B</rt></ruby>\\u308A\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"borrow, rent\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7D9A<rt>\\u3064\\u3065</rt></ruby>\\u3051\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"continue, proceed\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6C7A<rt>\\u304D</rt></ruby>\\u3081\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"decide, choose\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u98DF<rt>\\u305F</rt></ruby>\\u3079\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"eat\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5FD8<rt>\\u308F\\u3059</rt></ruby>\\u308C\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"forget\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u964D<rt>\\u304A</rt></ruby>\\u308A\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"get off, go down\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u75B2<rt>\\u3064\\u304B</rt></ruby>\\u308C\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"get tired\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8D77<rt>\\u304A</rt></ruby>\\u304D\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"get up, wake up\"\n        },\n        {\n            \"kanji\": \"\\u3042\\u3052\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"give\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u51FA<rt>\\u3067</rt></ruby>\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"leave, exit, appear\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u52A9<rt>\\u305F\\u3059</rt></ruby>\\u3051\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"help\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u898B<rt>\\u307F</rt></ruby>\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"see, look\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u958B<rt>\\u3042</rt></ruby>\\u3051\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"open\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u899A<rt>\\u304A\\u307C</rt></ruby>\\u3048\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"remember, learn\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5BDD<rt>\\u306D</rt></ruby>\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"sleep, go to bed\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9589<rt>\\u3057</rt></ruby>\\u3081\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"close\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7740<rt>\\u304D</rt></ruby>\\u308B\",\n            \"type\": \"ru\",\n            \"eng\": \"put on, wear (shirt, jacket, etc)\"\n        },\n        {\n            \"kanji\": \"\\u306A\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"become\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4E57<rt>\\u306E</rt></ruby>\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"board, ride\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5207<rt>\\u304D</rt></ruby>\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"cut\"\n        },\n        {\n            \"kanji\": \"\\u3084\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"do, give\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7D42<rt>\\u304A</rt></ruby>\\u308F\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"end\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4E0A<rt>\\u3042</rt></ruby>\\u304C\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"go up, rise\",\n            \"altOkurigana\": [\n                \"\\u4E0A\\u308B\"\n            ]\n        },\n        {\n            \"kanji\": \"<ruby>\\u77E5<rt>\\u3057</rt></ruby>\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"know\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4F5C<rt>\\u3064\\u304F</rt></ruby>\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"make, build\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5E30<rt>\\u304B\\u3048</rt></ruby>\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"return, go home\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u53D6<rt>\\u3068</rt></ruby>\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"take, steal\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8CB7<rt>\\u304B</rt></ruby>\\u3046\",\n            \"type\": \"u\",\n            \"eng\": \"buy\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7B11<rt>\\u308F\\u3089</rt></ruby>\\u3046\",\n            \"type\": \"u\",\n            \"eng\": \"laugh, smile\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4F1A<rt>\\u3042</rt></ruby>\\u3046\",\n            \"type\": \"u\",\n            \"eng\": \"meet\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8A00<rt>\\u3044</rt></ruby>\\u3046\",\n            \"type\": \"u\",\n            \"eng\": \"say, utter\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u601D<rt>\\u304A\\u3082</rt></ruby>\\u3046\",\n            \"type\": \"u\",\n            \"eng\": \"think, believe\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4F7F<rt>\\u3064\\u304B</rt></ruby>\\u3046\",\n            \"type\": \"u\",\n            \"eng\": \"use\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6301<rt>\\u3082</rt></ruby>\\u3064\",\n            \"type\": \"u\",\n            \"eng\": \"hold, have\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5F85<rt>\\u307E</rt></ruby>\\u3064\",\n            \"type\": \"u\",\n            \"eng\": \"wait\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7ACB<rt>\\u305F</rt></ruby>\\u3064\",\n            \"type\": \"u\",\n            \"eng\": \"stand up\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u805E<rt>\\u304D</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"hear, listen\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5F15<rt>\\u3072</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"pull, tug\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5C65<rt>\\u306F</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"put on, wear (pants, skirt, shoes, etc)\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6B69<rt>\\u3042\\u308B</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"walk\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u66F8<rt>\\u304B</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"write\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u50CD<rt>\\u306F\\u305F\\u3089</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"work\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6B7B<rt>\\u3057</rt></ruby>\\u306C\",\n            \"type\": \"u\",\n            \"eng\": \"die, pass away\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u98F2<rt>\\u306E</rt></ruby>\\u3080\",\n            \"type\": \"u\",\n            \"eng\": \"drink\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u697D<rt>\\u305F\\u306E</rt></ruby>\\u3057\\u3080\",\n            \"type\": \"u\",\n            \"eng\": \"enjoy, have fun\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9032<rt>\\u3059\\u3059</rt></ruby>\\u3080\",\n            \"type\": \"u\",\n            \"eng\": \"advance, go forward\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4F4F<rt>\\u3059</rt></ruby>\\u3080\",\n            \"type\": \"u\",\n            \"eng\": \"live, inhabit\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8AAD<rt>\\u3088</rt></ruby>\\u3080\",\n            \"type\": \"u\",\n            \"eng\": \"read\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u4F11<rt>\\u3084\\u3059</rt></ruby>\\u3080\",\n            \"type\": \"u\",\n            \"eng\": \"rest, be absent\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u904A<rt>\\u3042\\u305D</rt></ruby>\\u3076\",\n            \"type\": \"u\",\n            \"eng\": \"play, have a good time\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5B66<rt>\\u307E\\u306A</rt></ruby>\\u3076\",\n            \"type\": \"u\",\n            \"eng\": \"study, learn\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9078<rt>\\u3048\\u3089</rt></ruby>\\u3076\",\n            \"type\": \"u\",\n            \"eng\": \"choose, select\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8FD4<rt>\\u304B\\u3048</rt></ruby>\\u3059\",\n            \"type\": \"u\",\n            \"eng\": \"return (something), put back\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u62BC<rt>\\u304A</rt></ruby>\\u3059\",\n            \"type\": \"u\",\n            \"eng\": \"push, press\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6CBB<rt>\\u306A\\u304A</rt></ruby>\\u3059\",\n            \"type\": \"u\",\n            \"eng\": \"cure, repair\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8A71<rt>\\u306F\\u306A</rt></ruby>\\u3059\",\n            \"type\": \"u\",\n            \"eng\": \"talk, speak\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u63A2<rt>\\u3055\\u304C</rt></ruby>\\u3059\",\n            \"type\": \"u\",\n            \"eng\": \"search, look for\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8CB8<rt>\\u304B</rt></ruby>\\u3059\",\n            \"type\": \"u\",\n            \"eng\": \"lend, loan\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6CF3<rt>\\u304A\\u3088</rt></ruby>\\u3050\",\n            \"type\": \"u\",\n            \"eng\": \"swim\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8131<rt>\\u306C</rt></ruby>\\u3050\",\n            \"type\": \"u\",\n            \"eng\": \"take off clothes, undress\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6025<rt>\\u3044\\u305D</rt></ruby>\\u3050\",\n            \"type\": \"u\",\n            \"eng\": \"hurry\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7A3C<rt>\\u304B\\u305B</rt></ruby>\\u3050\",\n            \"type\": \"u\",\n            \"eng\": \"earn income, make money\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5BDB<rt>\\u304F\\u3064\\u308D</rt></ruby>\\u3050\",\n            \"type\": \"u\",\n            \"eng\": \"relax, feel at home\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7E4B<rt>\\u3064\\u306A</rt></ruby>\\u3050\",\n            \"type\": \"u\",\n            \"eng\": \"connect, link together\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5206<rt>\\u308F</rt></ruby>\\u304B\\u308B\",\n            \"type\": \"u\",\n            \"eng\": \"understand\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u52C9<rt>\\u3079\\u3093</rt></ruby><ruby>\\u5F37<rt>\\u304D\\u3087\\u3046</rt></ruby>\\u3059\\u308B\",\n            \"type\": \"irv\",\n            \"eng\": \"study\",\n            \"group\": \"suru\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u53D7<rt>\\u3046</rt></ruby>\\u3051<ruby>\\u6301<rt>\\u3082</rt></ruby>\\u3064\",\n            \"type\": \"u\",\n            \"eng\": \"take charge of\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6301<rt>\\u3082</rt></ruby>\\u3063\\u3066<ruby>\\u884C<rt>\\u3044</rt></ruby>\\u304F\",\n            \"type\": \"irv\",\n            \"eng\": \"take, carry away\",\n            \"group\": \"iku\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u98DF<rt>\\u305F</rt></ruby>\\u3079<ruby>\\u6B69<rt>\\u3042\\u308B</rt></ruby>\\u304F\",\n            \"type\": \"u\",\n            \"eng\": \"try food at various restaurants\"\n        }\n    ],\n    \"adjectives\": [\n        {\n            \"kanji\": \"\\u3044\\u3044\",\n            \"type\": \"ira\",\n            \"eng\": \"good\"\n        },\n        {\n            \"kanji\": \"\\u304B\\u3063\\u3053\\u3044\\u3044\",\n            \"type\": \"ira\",\n            \"eng\": \"cool, handsome\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8D64<rt>\\u3042\\u304B</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"red\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u65B0<rt>\\u3042\\u305F\\u3089</rt></ruby>\\u3057\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"new\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6691<rt>\\u3042\\u3064</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"hot (weather)\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5371<rt>\\u3042\\u3076</rt></ruby>\\u306A\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"dangerous\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7F8E<rt>\\u304A</rt></ruby><ruby>\\u5473<rt>\\u3044</rt></ruby>\\u3057\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"delicious\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5927<rt>\\u304A\\u304A</rt></ruby>\\u304D\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"big\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9045<rt>\\u304A\\u305D</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"late, slow\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9762<rt>\\u304A\\u3082</rt></ruby><ruby>\\u767D<rt>\\u3057\\u308D</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"interesting, funny\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u53EF<rt>\\u304B</rt></ruby><ruby>\\u611B<rt>\\u308F\\u3044</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"cute, pretty\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5BD2<rt>\\u3055\\u3080</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"cold (weather)\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9AD8<rt>\\u305F\\u304B</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"high, expensive\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u697D<rt>\\u305F\\u306E</rt></ruby>\\u3057\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"fun, pleasant\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5C0F<rt>\\u3061\\u3044</rt></ruby>\\u3055\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"small\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8A70<rt>\\u3064\\u307E</rt></ruby>\\u3089\\u306A\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"uninteresting, boring\",\n            \"altOkurigana\": [\n                \"\\u8A70\\u307E\\u3089\\u306A\\u3044\"\n            ]\n        },\n        {\n            \"kanji\": \"<ruby>\\u901F<rt>\\u306F\\u3084</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"fast, quick\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u53E4<rt>\\u3075\\u308B</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"old (thing)\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6B32<rt>\\u307B</rt></ruby>\\u3057\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"wanted, desired\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u96E3<rt>\\u3080\\u305A\\u304B</rt></ruby>\\u3057\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"difficult\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5B89<rt>\\u3084\\u3059</rt></ruby>\\u3044\",\n            \"type\": \"i\",\n            \"eng\": \"cheap\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u597D<rt>\\u3059</rt></ruby>\\u304D\",\n            \"type\": \"na\",\n            \"eng\": \"like\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6709<rt>\\u3086\\u3046</rt></ruby><ruby>\\u540D<rt>\\u3081\\u3044</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"famous\"\n        },\n        {\n            \"kanji\": \"\\u304D\\u308C\\u3044\",\n            \"type\": \"na\",\n            \"eng\": \"beautiful, tidy\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5ACC<rt>\\u304D\\u3089</rt></ruby>\\u3044\",\n            \"type\": \"na\",\n            \"eng\": \"dislike\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u9759<rt>\\u3057\\u305A</rt></ruby>\\u304B\",\n            \"type\": \"na\",\n            \"eng\": \"quiet\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5143<rt>\\u3052\\u3093</rt></ruby><ruby>\\u6C17<rt>\\u304D</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"healthy\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u8272<rt>\\u3044\\u308D</rt></ruby><ruby>\\u3005<rt>\\u3044\\u308D</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"various\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5FC3<rt>\\u3057\\u3093</rt></ruby><ruby>\\u914D<rt>\\u3071\\u3044</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"worry, care\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5ACC<rt>\\u3044\\u3084</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"unpleasant, detestable\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5341<rt>\\u3058\\u3085\\u3046</rt></ruby><ruby>\\u5206<rt>\\u3076\\u3093</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"sufficient\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7ACB<rt>\\u308A\\u3063</rt></ruby><ruby>\\u6D3E<rt>\\u3071</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"excellent, splendid\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u540C<rt>\\u304A\\u306A</rt></ruby>\\u3058\",\n            \"type\": \"na\",\n            \"eng\": \"same, alike\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5927<rt>\\u3060\\u3044</rt></ruby><ruby>\\u4E08<rt>\\u3058\\u3087\\u3046</rt></ruby><ruby>\\u592B<rt>\\u3076</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"okay, safe\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u771F<rt>\\u307E</rt></ruby>\\u3063<ruby>\\u76F4<rt>\\u3059</rt></ruby>\\u3050\",\n            \"type\": \"na\",\n            \"eng\": \"straight, direct\",\n            \"altOkurigana\": [\n                \"\\u771F\\u76F4\\u3050\",\n                \"\\u771F\\u3059\\u3050\",\n                \"\\u771F\\u3063\\u3059\\u3050\"\n            ]\n        },\n        {\n            \"kanji\": \"<ruby>\\u4E0B<rt>\\u3078</rt></ruby><ruby>\\u624B<rt>\\u305F</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"unskilled\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u7C21<rt>\\u304B\\u3093</rt></ruby><ruby>\\u5358<rt>\\u305F\\u3093</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"simple, easy\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u697D<rt>\\u3089\\u304F</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"comfortable, easy\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u6B8B<rt>\\u3056\\u3093</rt></ruby><ruby>\\u5FF5<rt>\\u306D\\u3093</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"unfortunate, disappointing\"\n        },\n        {\n            \"kanji\": \"<ruby>\\u5FC5<rt>\\u3072\\u3064</rt></ruby><ruby>\\u8981<rt>\\u3088\\u3046</rt></ruby>\",\n            \"type\": \"na\",\n            \"eng\": \"necessary\"\n        }\n    ]\n};\n\n\n\n\nvar $14c78789229899a8$exports = {};\n\n$parcel$export($14c78789229899a8$exports, \"conjugator_functions\", () => $14c78789229899a8$export$1b246651ba34c93e);\n// vim: set ts=4 sw=4 expandtab\n// (C) 2010 Dan Bravender - licensed under the AGPL 3.0\n// try {\n//     var hangeul       = require('./hangeul'),\n//         pronunciation = require('./pronunciation');\n// } catch(e) {}\n\nvar $8ro1P = parcelRequire(\"8ro1P\");\nvar $666feef8e7b6d3b0$exports = {};\n// vim: set ts=4 sw=4 expandtab\n// (C) 2010 Dan Bravender - licensed under the AGPL 3.0\n\ntry {\n    var $666feef8e7b6d3b0$var$hangeul = (parcelRequire(\"8ro1P\"));\n} catch (e) {}\nvar $666feef8e7b6d3b0$var$pronunciation = {};\n$666feef8e7b6d3b0$var$pronunciation.padchim_to_lead = {\n    \"\\u11A8\": \"\\u1100\",\n    \"\\u11A9\": \"\\u1101\",\n    \"\\u11AB\": \"\\u1102\",\n    \"\\u11AE\": \"\\u1103\",\n    \"\\u11AF\": \"\\u1105\",\n    \"\\u11B7\": \"\\u1106\",\n    \"\\u11B8\": \"\\u1107\",\n    \"\\u11BA\": \"\\u1109\",\n    \"\\u11BB\": \"\\u110A\",\n    \"\\u11BC\": \"\\u110B\",\n    \"\\u11BD\": \"\\u110C\",\n    \"\\u11BE\": \"\\u110E\",\n    \"\\u11BF\": \"\\u110F\",\n    \"\\u11C0\": \"\\u1110\",\n    \"\\u11C1\": \"\\u1111\",\n    \"\\u11C2\": \"\\u1112\"\n};\n$666feef8e7b6d3b0$var$pronunciation.move_padchim_to_replace_eung = function(x, y) {\n    if ($666feef8e7b6d3b0$var$hangeul.padchim(x[x.length - 1]) == \"\\u11BC\") return;\n    if ($666feef8e7b6d3b0$var$hangeul.padchim(x[x.length - 1]) in $666feef8e7b6d3b0$var$pronunciation.padchim_to_lead && $666feef8e7b6d3b0$var$hangeul.lead(y[0]) == \"\\u110B\") return [\n        x.substring(0, x.length - 1) + $666feef8e7b6d3b0$var$hangeul.join($666feef8e7b6d3b0$var$hangeul.lead(x[x.length - 1]), $666feef8e7b6d3b0$var$hangeul.vowel(x[x.length - 1])),\n        $666feef8e7b6d3b0$var$hangeul.join($666feef8e7b6d3b0$var$pronunciation.padchim_to_lead[$666feef8e7b6d3b0$var$hangeul.padchim(x[x.length - 1])], $666feef8e7b6d3b0$var$hangeul.vowel(y[0]), $666feef8e7b6d3b0$var$hangeul.padchim(y[0])) + y.substring(1)\n    ];\n};\n$666feef8e7b6d3b0$var$pronunciation.change_padchim_pronunciation = function(to, changers) {\n    return function(x, y) {\n        if ($666feef8e7b6d3b0$var$hangeul.padchim(x[x.length - 1]) in changers) return [\n            x.substring(0, x.length - 1) + $666feef8e7b6d3b0$var$hangeul.join($666feef8e7b6d3b0$var$hangeul.lead(x[x.length - 1]), $666feef8e7b6d3b0$var$hangeul.vowel(x[x.length - 1]), to),\n            y\n        ];\n    };\n};\n$666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule = function(x_padchim, y_lead, new_padchim, new_lead, y_vowel) {\n    return function(x, y) {\n        if (y_vowel && $666feef8e7b6d3b0$var$hangeul.vowel(y[0]) != y_vowel) return;\n        if (($666feef8e7b6d3b0$var$hangeul.padchim(x[x.length - 1]) == x_padchim || x_padchim == \"*\") && ($666feef8e7b6d3b0$var$hangeul.lead(y[0]) == y_lead || y_lead == \"*\")) return [\n            x.substring(0, x.length - 1) + $666feef8e7b6d3b0$var$hangeul.join($666feef8e7b6d3b0$var$hangeul.lead(x[x.length - 1]), $666feef8e7b6d3b0$var$hangeul.vowel(x[x.length - 1]), new_padchim == \"*\" ? $666feef8e7b6d3b0$var$hangeul.padchim(x[-1]) : new_padchim),\n            $666feef8e7b6d3b0$var$hangeul.join(new_lead == \"*\" ? $666feef8e7b6d3b0$var$hangeul.lead(y[0]) : new_lead, $666feef8e7b6d3b0$var$hangeul.vowel(y[0]), $666feef8e7b6d3b0$var$hangeul.padchim(y[0])) + y.substring(1)\n        ];\n    };\n};\n$666feef8e7b6d3b0$var$pronunciation.skip_non_hangeul = function(x, y) {\n    if (!$666feef8e7b6d3b0$var$hangeul.is_hangeul(x[x.length - 1])) return [\n        x,\n        y,\n        true\n    ];\n};\n$666feef8e7b6d3b0$var$pronunciation.merge_rules = [\n    /* WARNING: Please be careful when adding/modifying rules since padchim \n            hangeul.and lead characters are different Unicode characters. Please see:\n            http://www.kfunigraz.ac.at/~katzer/korean_hangul_unicode.html\n\n   Rules from http://en.wikibooks.org/wiki/Korean/Advanced_Pronunciation_Rules\n*/ $666feef8e7b6d3b0$var$pronunciation.skip_non_hangeul,\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u110B\", null, \"\\u110B\", null),\n    // ㄱㄴ becomes ㅇㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11A8\", \"\\u1102\", \"\\u11BC\", \"\\u1102\", null),\n    // ㄱㅁ becomes ㅇㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11A8\", \"\\u1106\", \"\\u11BC\", \"\\u1106\", null),\n    // ㅋㄴ becomes ㅇㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BF\", \"\\u1102\", \"\\u11BC\", \"\\u1102\", null),\n    // ㅋㅁ becomes ㅇㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BF\", \"\\u1106\", \"\\u11BC\", \"\\u1106\", null),\n    // ㄷㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AE\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    // ㄷㅁ becomes ㄴㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AE\", \"\\u1106\", \"\\u11AB\", \"\\u1106\", null),\n    // ㅅㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BA\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    // ㅆㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BB\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    // ㅅㅁ becomes ㄴㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BA\", \"\\u1106\", \"\\u11AB\", \"\\u1106\", null),\n    // ㄱ ㅆ becomes ㄱ ㅆ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11A8\", \"\\u1109\", \"\\u11A8\", \"\\u110A\", null),\n    // ㅈㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BD\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    // ㅈㅁ becomes ㄴㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BD\", \"\\u1106\", \"\\u11AB\", \"\\u1106\", null),\n    // ㅊㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BE\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    // ㅊㅁ becomes ㄴㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BE\", \"\\u1106\", \"\\u11AB\", \"\\u1106\", null),\n    // ㅌㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C0\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    // ㅌㅁ becomes ㄴㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C0\", \"\\u1106\", \"\\u11AB\", \"\\u1106\", null),\n    //  ㅎㄴ becomes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u1102\", \"\\u11AB\", \"\\u1102\", null),\n    //  ㅎㅁ becomes ㄴㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u1106\", \"\\u11AB\", \"\\u1106\", null),\n    //  ㅂㄴ becomes ㅁㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B8\", \"\\u1102\", \"\\u11B7\", \"\\u1102\", null),\n    // ㅂㅁ becomes ㅁㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B8\", \"\\u1106\", \"\\u11B7\", \"\\u1106\", null),\n    // ㅍㄴ becomes ㅁㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C1\", \"\\u1102\", \"\\u11B7\", \"\\u1102\", null),\n    // ㅍㅁ becomes ㅁㅁ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C1\", \"\\u1106\", \"\\u11B7\", \"\\u1106\", null),\n    //  ㄱㅎ becomes ㅋ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11A8\", \"\\u1112\", null, \"\\u110F\", null),\n    //  ㅎㄱ becomes ㅋ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u1100\", null, \"\\u110F\", null),\n    // ㅎㄷ becomes ㅌ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u1103\", null, \"\\u1110\", null),\n    // ㄷㅎ becomes ㅌ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AE\", \"\\u1112\", null, \"\\u1110\", null),\n    // ㅂㅎ becomes ㅍ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B8\", \"\\u1112\", null, \"\\u1111\", null),\n    // ㅎㅂ becomes ㅍ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u1107\", null, \"\\u1111\", null),\n    // ㅈㅎ becomes ㅊ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BD\", \"\\u1112\", null, \"\\u110E\", null),\n    // ㅎㅈ becomes ㅊ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u110C\", null, \"\\u110E\", null),\n    // ㅎㅅ becomes ㅆ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C2\", \"\\u1109\", null, \"\\u110A\", null),\n    //ㄷ이 becomes 지\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AE\", \"\\u110B\", null, \"\\u110C\", \"\\u3163\"),\n    //ㅌ이 becomes 치\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11C0\", \"\\u110B\", null, \"\\u110E\", \"\\u3163\"),\n    //ㄱㄹ becomes ㅇㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11A8\", \"\\u1105\", \"\\u11BC\", \"\\u1102\", null),\n    //ㄴㄹ becomes ㄹㄹ // TODO: (not sure how to fix pronunciation) also sometimes ㄴㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AB\", \"\\u1105\", \"\\u11AF\", \"\\u1105\", null),\n    // ㅁㄹ becomes ㅁㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B7\", \"\\u1105\", \"\\u11B7\", \"\\u1102\", null),\n    // ㅇㄹ becomes ㅇㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BC\", \"\\u1105\", \"\\u11BC\", \"\\u1102\", null),\n    // ㅂㄹ becomes ㅁㄴ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B8\", \"\\u1105\", \"\\u11B7\", \"\\u1102\", null),\n    // ㅅ ㅎ becomes ㅌ\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BA\", \"\\u1112\", null, \"\\u1110\", null),\n    // 받침 followed by ㅇ: replace ㅇ with 받침 (use second 받침 if there are two). Otherwise, 받침 followed by consonant:\n    $666feef8e7b6d3b0$var$pronunciation.move_padchim_to_replace_eung,\n    //    * ㄱ, ㅋ: like ㄱ\n    //    * ㄷ, ㅅ, ㅈ, ㅊ, ㅌ, ㅎ: like ㄷ\n    //    * ㅂ, ㅍ: like ㅂ\n    // Double padchim rules\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B1\", \"\\u110B\", \"\\u11AF\", \"\\u1106\", null),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B9\", \"\\u110B\", \"\\u11B8\", \"\\u1109\", null),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B1\", \"*\", \"\\u11B7\", \"*\", null),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B6\", \"\\u110B\", null, \"\\u1105\", null),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B6\", \"*\", \"\\u11AF\", \"*\", null),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AC\", \"\\u110B\", \"\\u11AB\", \"\\u110C\", null),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AC\", \"*\", \"\\u11AB\", \"*\", null),\n    // 학교 -> 학꾜\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11A8\", \"\\u1100\", \"\\u11A8\", \"\\u1101\", null),\n    // 밥솥-> 밥쏟\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11B8\", \"\\u1109\", \"\\u11B8\", \"\\u110A\", null),\n    // 있습니다 -> 이씀니다\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11BB\", \"\\u1109\", null, \"\\u110A\", null),\n    $666feef8e7b6d3b0$var$pronunciation.change_padchim_pronunciation(\"\\u11AE\", {\n        \"\\u11BA\": true,\n        \"\\u11BB\": true,\n        \"\\u11BD\": true,\n        \"\\u11BE\": true,\n        \"\\u11C0\": true,\n        \"\\u11C2\": true\n    }),\n    $666feef8e7b6d3b0$var$pronunciation.change_padchim_pronunciation(\"\\u11B8\", {\n        \"\\u11C1\": true\n    }),\n    $666feef8e7b6d3b0$var$pronunciation.consonant_combination_rule(\"\\u11AE\", \"\\u1103\", null, \"\\u1104\"),\n    function(x, y) {\n        return [\n            x,\n            y\n        ];\n    }\n];\n$666feef8e7b6d3b0$var$pronunciation.apply_rules = function(x, y) {\n    result = null;\n    $666feef8e7b6d3b0$var$pronunciation.merge_rules.forEach(function(rule) {\n        merge = rule(x, y);\n        if (merge && merge.length == 3) {\n            x = merge[0];\n            y = merge[1];\n            stop = merge[2];\n            if (stop) result = x + y;\n        } else if (merge) {\n            x = merge[0];\n            y = merge[1];\n        }\n    });\n    if (result) return result;\n    return x + y;\n};\n$666feef8e7b6d3b0$var$pronunciation.get_pronunciation = function(word) {\n    return (word + String.fromCharCode(0)).split(\"\").reduce($666feef8e7b6d3b0$var$pronunciation.apply_rules).substring(0, word.length);\n};\n// Export functions to node\ntry {\n    for(f in $666feef8e7b6d3b0$var$pronunciation)$666feef8e7b6d3b0$exports[f] = $666feef8e7b6d3b0$var$pronunciation[f];\n} catch (e) {}\n\n\nvar $14c78789229899a8$var$conjugator = {};\n$14c78789229899a8$var$conjugator.no_padchim_rule = function(characters) {\n    /* no_padchim_rule is a helper function for defining merges where a\n        character will take the padchim of a merged character if the first\n        character doesn't already have a padchim, .e.g. 습 -> 가 + 습니다 -> 갑니다.\n    */ return function(x, y) {\n        if (!(0, $8ro1P.hangeul).padchim(x.charAt(x.length - 1)) && y[0] in characters) return [\n            \"borrow padchim\",\n            x.substring(0, x.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(x[x.length - 1]), (0, $8ro1P.hangeul).vowel(x[x.length - 1]), (0, $8ro1P.hangeul).padchim(y[0])) + y.substring(1)\n        ];\n    };\n};\n$14c78789229899a8$var$conjugator.vowel_contraction = function(vowel1, vowel2, new_vowel, trace) {\n    /* vowel contraction is a helper function for defining common contractions\n       between a character without a padchim and a character that starts with\n        'ᄋ', e.g. ㅐ + ㅕ -> ㅐ when applied to 해 + 였 yields 했.\n    */ return function(x, y) {\n        if ((0, $8ro1P.hangeul).match(x.charAt(x.length - 1), \"*\", vowel1, null) && (0, $8ro1P.hangeul).match(y.charAt(0), \"\\u110B\", vowel2, \"*\")) return [\n            \"vowel contraction [\" + vowel1 + \" \" + vowel2 + \" -> \" + new_vowel + \"]\",\n            x.substring(0, x.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(x.charAt(x.length - 1)), new_vowel, (0, $8ro1P.hangeul).padchim(y[0])) + y.substring(1)\n        ];\n    };\n};\n$14c78789229899a8$var$conjugator.drop_l = function(x, y) {\n    if ((0, $8ro1P.hangeul).padchim(x[x.length - 1]) == \"\\u11AF\") {\n        $14c78789229899a8$var$conjugator.reasons.push(\"drop \\u3139\");\n        return x.substring(0, x.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(x[x.length - 1]), (0, $8ro1P.hangeul).vowel(x[x.length - 1])) + y;\n    }\n};\n$14c78789229899a8$var$conjugator.drop_l_and_borrow_padchim = function(x, y) {\n    if ((0, $8ro1P.hangeul).padchim(x.charAt(x.length - 1)) == \"\\u11AF\") {\n        $14c78789229899a8$var$conjugator.reasons.push(\"drop \" + (0, $8ro1P.hangeul).padchim(x.charAt(x.length - 1)) + \" borrow padchim\");\n        return x.substring(0, x.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(x[x.length - 1]), (0, $8ro1P.hangeul).vowel(x[x.length - 1]), (0, $8ro1P.hangeul).padchim(y[0])) + y.substring(1);\n    }\n};\n$14c78789229899a8$var$conjugator.dont_insert_eh = function(x, y) {\n    if ((0, $8ro1P.hangeul).padchim(x.charAt(x.length - 1)) == \"\\u11AF\" && y[0] == \"\\uBA74\") return [\n        \"join\",\n        x + y\n    ];\n};\n$14c78789229899a8$var$conjugator.insert_eh = function(characters) {\n    return function(x, y) {\n        if ((0, $8ro1P.hangeul).padchim(x.charAt(x.length - 1)) && y[0] in characters) return [\n            \"padchim + consonant -> insert \\uC73C\",\n            x + \"\\uC73C\" + y\n        ];\n    };\n};\n$14c78789229899a8$var$conjugator.lm_merge = function(x, y) {\n    if ((0, $8ro1P.hangeul).padchim(x.charAt(x.length - 1)) == \"\\u11AF\" && y[0] == \"\\uC74C\") return [\n        \"\\u3139 + \\u3141 -> \\u11B1\",\n        x.substring(0, x.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(x[x.length - 1]), (0, $8ro1P.hangeul).vowel(x[x.length - 1]), \"\\u11B1\")\n    ];\n};\n/* merge rules is a list of rules that are applied in order when merging a verb \n   stem with a tense ending\n*/ $14c78789229899a8$var$conjugator.merge_rules = [\n    $14c78789229899a8$var$conjugator.no_padchim_rule({\n        \"\\uC744\": true,\n        \"\\uC2B5\": true,\n        \"\\uC74D\": true,\n        \"\\uB294\": true,\n        \"\\uC74C\": true\n    }),\n    $14c78789229899a8$var$conjugator.lm_merge,\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3150\", \"\\u3153\", \"\\u3150\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3161\", \"\\u3153\", \"\\u3153\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u315C\", \"\\u3153\", \"\\u315D\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3157\", \"\\u314F\", \"\\u3158\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u315A\", \"\\u3153\", \"\\u3159\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3159\", \"\\u3153\", \"\\u3159\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3158\", \"\\u3153\", \"\\u3158\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u315D\", \"\\u3153\", \"\\u315D\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u314F\", \"\\u314F\", \"\\u314F\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3161\", \"\\u314F\", \"\\u314F\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3163\", \"\\u3153\", \"\\u3155\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3153\", \"\\u3153\", \"\\u3153\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3153\", \"\\u3163\", \"\\u3150\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u314F\", \"\\u3163\", \"\\u3150\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3151\", \"\\u3163\", \"\\u3152\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3152\", \"\\u3153\", \"\\u3152\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3154\", \"\\u3153\", \"\\u3154\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3155\", \"\\u3153\", \"\\u3155\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u314F\", \"\\u3155\", \"\\u3150\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u3156\", \"\\u3153\", \"\\u3156\"),\n    $14c78789229899a8$var$conjugator.vowel_contraction(\"\\u315E\", \"\\u3153\", \"\\u315E\"),\n    $14c78789229899a8$var$conjugator.dont_insert_eh,\n    $14c78789229899a8$var$conjugator.insert_eh({\n        \"\\uBA74\": true,\n        \"\\uC138\": true,\n        \"\\uC2ED\": true\n    }),\n    // default rule\n    function(x, y) {\n        return [\n            \"join\",\n            x + y\n        ];\n    }\n];\n$14c78789229899a8$var$conjugator.reasons = [];\n$14c78789229899a8$var$conjugator.merge = function(x, y) {\n    /* concatenates every element in a list using the rules to\n       merge the strings\n    */ var response = null;\n    $14c78789229899a8$var$conjugator.merge_rules.forEach(function(rule) {\n        if (!response) {\n            let output = rule(x, y);\n            if (output) {\n                $14c78789229899a8$var$conjugator.reasons.push((output[0] ? output[0] : \"\") + \" (\" + x + \" + \" + y + \" -> \" + output[1] + \")\");\n                response = output[1];\n            }\n        }\n    });\n    return response;\n};\n$14c78789229899a8$var$conjugator.both_regular_and_irregular = {\n    \"\\uC77C\": true,\n    \"\\uACF1\": true,\n    \"\\uD30C\\uBB3B\": true,\n    \"\\uB204\\uB974\": true,\n    \"\\uBB3B\": true,\n    \"\\uC774\\uB974\": true,\n    \"\\uB418\\uBB3B\": true,\n    \"\\uC370\": true,\n    \"\\uBD93\": true,\n    \"\\uB4E4\\uAE4C\\uBD88\": true,\n    \"\\uAD7D\": true,\n    \"\\uAC77\": true,\n    \"\\uB4A4\\uAE4C\\uBD88\": true,\n    \"\\uAE4C\\uBD88\": true\n};\n$14c78789229899a8$var$conjugator.not_p_irregular = {\n    \"\\uD138\\uC369\\uC774\\uC7A1\": true,\n    \"\\uB118\\uACA8\\uC7A1\": true,\n    \"\\uC6B0\\uC811\": true,\n    \"\\uC785\": true,\n    \"\\uB9DE\\uC811\": true,\n    \"\\uBB38\\uC7A1\": true,\n    \"\\uB2E4\\uC7A1\": true,\n    \"\\uAE4C\\uB4A4\\uC9D1\": true,\n    \"\\uBC30\\uC881\": true,\n    \"\\uBAA9\\uC7A1\": true,\n    \"\\uB044\\uC9D1\": true,\n    \"\\uC7A1\": true,\n    \"\\uC634\\uCF1C\\uC7A1\": true,\n    \"\\uAC80\\uC7A1\": true,\n    \"\\uB418\\uC21C\\uB77C\\uC7A1\": true,\n    \"\\uB0B4\\uC539\": true,\n    \"\\uBAA8\\uC9D1\": true,\n    \"\\uB530\\uC7A1\": true,\n    \"\\uC5C7\\uC7A1\": true,\n    \"\\uAE4C\\uC9D1\": true,\n    \"\\uACB9\\uC9D1\": true,\n    \"\\uC904\\uD1B5\\uBF51\": true,\n    \"\\uBC84\\uB974\\uC9D1\": true,\n    \"\\uC9C0\\uB974\\uC7A1\": true,\n    \"\\uCD94\\uCF1C\\uC7A1\": true,\n    \"\\uC5C5\": true,\n    \"\\uB418\\uC220\\uB798\\uC7A1\": true,\n    \"\\uB418\\uC811\": true,\n    \"\\uC881\\uB514\\uC881\": true,\n    \"\\uB354\\uC704\\uC7A1\": true,\n    \"\\uB9D0\\uC539\": true,\n    \"\\uB0B4\\uBF51\": true,\n    \"\\uC9D1\": true,\n    \"\\uAC78\\uBA38\\uC7A1\": true,\n    \"\\uD718\\uC5B4\\uC7A1\": true,\n    \"\\uAFF0\\uC785\": true,\n    \"\\uD669\\uC7A1\": true,\n    \"\\uC5D0\\uAD7D\": true,\n    \"\\uB0B4\\uAD7D\": true,\n    \"\\uB530\\uB77C\\uC7A1\": true,\n    \"\\uB9DE\\uB4A4\\uC9D1\": true,\n    \"\\uB458\\uB7EC\\uC5C5\": true,\n    \"\\uB298\\uC7A1\": true,\n    \"\\uB044\\uC7A1\": true,\n    \"\\uC6B0\\uADF8\\uB824\\uC7A1\": true,\n    \"\\uC5B4\\uC90D\": true,\n    \"\\uC5B8\\uAC78\\uC785\": true,\n    \"\\uB4E4\\uC774\\uACF1\": true,\n    \"\\uAEF4\\uC7A1\": true,\n    \"\\uACF1 \\uC811\": true,\n    \"\\uD6D4\\uCF1C\\uC7A1\": true,\n    \"\\uB2A6\\uCD94\\uC7A1\": true,\n    \"\\uAC08\\uC544\\uC785\": true,\n    \"\\uCE5C\\uC881\": true,\n    \"\\uD76C\\uC9DC\\uBF51\": true,\n    \"\\uB9C8\\uC74C\\uC7A1\": true,\n    \"\\uAC1C\\uBBF8\\uC7A1\": true,\n    \"\\uC634\\uC539\": true,\n    \"\\uCE58\\uC7A1\": true,\n    \"\\uADF8\\uB7EC\\uC7A1\": true,\n    \"\\uC6C0\\uCF1C\\uC7A1\": true,\n    \"\\uC539\": true,\n    \"\\uBE44\\uC9D1\": true,\n    \"\\uAF3D\": true,\n    \"\\uC0B4\\uC7A1\": true,\n    \"\\uC8C4\\uC785\": true,\n    \"\\uC878\\uC7A1\": true,\n    \"\\uAC00\\uB824\\uC7A1\": true,\n    \"\\uBF51\": true,\n    \"\\uAC77\\uC5B4\\uC7A1\": true,\n    \"\\uD5D0\\uC7A1\": true,\n    \"\\uB3CC\\uB77C\\uC785\": true,\n    \"\\uB367\\uC7A1\": true,\n    \"\\uC595\\uC7A1\": true,\n    \"\\uB0AB\\uC7A1\": true,\n    \"\\uBD80\\uC5EC\\uC7A1\": true,\n    \"\\uB9DE\\uBD99\\uC7A1\": true,\n    \"\\uAC78\\uC785\": true,\n    \"\\uC8FC\\uB984\\uC7A1\": true,\n    \"\\uAC77\\uC5B4\\uC785\": true,\n    \"\\uBE4C\\uBBF8\\uC7A1\": true,\n    \"\\uAC1C\\uC7A1\": true,\n    \"\\uAC89\\uC7A1\": true,\n    \"\\uC548\\uCAD1\\uC7A1\": true,\n    \"\\uC881\": true,\n    \"\\uD798\\uC785\": true,\n    \"\\uAC77\\uC7A1\": true,\n    \"\\uBC14\\uB974\\uC9D1\": true,\n    \"\\uAC10\\uC539\": true,\n    \"\\uC9D3\\uC539\": true,\n    \"\\uC190\\uC7A1\": true,\n    \"\\uD3EC\\uC9D1\": true,\n    \"\\uBD99\\uC7A1\": true,\n    \"\\uB0AE\\uC7A1\": true,\n    \"\\uCC45\\uC7A1\": true,\n    \"\\uACF1\\uC7A1\": true,\n    \"\\uD749\\uC7A1\": true,\n    \"\\uB4A4\\uC9D1\": true,\n    \"\\uB561\\uC7A1\": true,\n    \"\\uC5B4\\uB9BC\\uC7A1\": true,\n    \"\\uB367\\uAEF4\\uC785\": true,\n    \"\\uC218\\uC90D\": true,\n    \"\\uB4A4\\uC7A1\": true,\n    \"\\uAF2C\\uC9D1\": true,\n    \"\\uC608\\uAD7D\": true,\n    \"\\uB36E\\uCCD0\\uC7A1\": true,\n    \"\\uD5DB\\uC7A1\": true,\n    \"\\uB418\\uC539\": true,\n    \"\\uB0AE\\uCD94\\uC7A1\": true,\n    \"\\uB0A0\\uD30C\\uB78C\\uC7A1\": true,\n    \"\\uD2C0\\uC5B4\\uC7A1\": true,\n    \"\\uD5E4\\uC9D1\": true,\n    \"\\uB0A8\\uC758\\uB2EC\\uC7A1\": true,\n    \"\\uBC14\\uB85C\\uC7A1\": true,\n    \"\\uD760\\uC7A1\": true,\n    \"\\uD30C\\uC7A1\": true,\n    \"\\uC5BC\\uCD94\\uC7A1\": true,\n    \"\\uC190\\uAF3D\": true,\n    \"\\uC811\": true,\n    \"\\uCC28\\uB824\\uC785\": true,\n    \"\\uACE8\\uB77C\\uC7A1\": true,\n    \"\\uAC70\\uBA38\\uC7A1\": true,\n    \"\\uD6C4\\uB824\\uC7A1\": true,\n    \"\\uBA38\\uC90D\": true,\n    \"\\uB109\\uC7A5\\uBF51\": true,\n    \"\\uC0AC\\uB85C\\uC7A1\": true,\n    \"\\uB367\\uC785\": true,\n    \"\\uAEF4\\uC785\": true,\n    \"\\uC5BC\\uC785\": true,\n    \"\\uC6B0\\uC9D1\": true,\n    \"\\uC124\\uC7A1\": true,\n    \"\\uB2A6\\uC7A1\": true,\n    \"\\uBE44\\uC881\": true,\n    \"\\uACE0\\uB974\\uC7A1\": true,\n    \"\\uB54C\\uB824\\uC7A1\": true,\n    \"\\uB5BC\\uC9D1\": true,\n    \"\\uB418\\uC7A1\": true,\n    \"\\uD648\\uCF1C\\uC7A1\": true,\n    \"\\uB0B4\\uACF1\": true,\n    \"\\uACF1\\uC539\": true,\n    \"\\uBE7C\\uC785\": true,\n    \"\\uB4E4\\uC774\\uAD7D\": true,\n    \"\\uC0C8\\uC7A1\": true,\n    \"\\uC774\\uB974\\uC9D1\": true,\n    \"\\uB5A8\\uCCD0\\uC785\": true\n};\n$14c78789229899a8$var$conjugator.not_s_irregular = {\n    \"\\uB0B4\\uC19F\": true,\n    \"\\uBE57\": true,\n    \"\\uB4DC\\uC19F\": true,\n    \"\\uBE44\\uC6C3\": true,\n    \"\\uBE8F\": true,\n    \"\\uC0D8\\uC19F\": true,\n    \"\\uBC97\": true,\n    \"\\uB4E4\\uC774\\uC6C3\": true,\n    \"\\uC19F\": true,\n    \"\\uB418\\uBE8F\": true,\n    \"\\uBE7C\\uC557\": true,\n    \"\\uBC27\": true,\n    \"\\uC560\\uAE0B\": true,\n    \"\\uC9DC\\uB4DC\\uB77C\\uC6C3\": true,\n    \"\\uC5B4\\uADF8\\uC19F\": true,\n    \"\\uB4E4\\uC19F\": true,\n    \"\\uC53B\": true,\n    \"\\uBE68\\uAC00\\uBC97\": true,\n    \"\\uAE43\": true,\n    \"\\uBC8C\\uAC70\\uBC97\": true,\n    \"\\uC5C7\": true,\n    \"\\uB418\\uBE7C\\uC557\": true,\n    \"\\uC6C3\": true,\n    \"\\uC557\": true,\n    \"\\uD5D0\\uBC97\": true,\n    \"\\uC6A9\\uC19F\": true,\n    \"\\uB367\\uC19F\": true,\n    \"\\uBC1C\\uAC00\\uBC97\": true,\n    \"\\uBED8\\uAC70\\uBC97\": true,\n    \"\\uB0A0\\uC19F\": true,\n    \"\\uCE58\\uC19F\": true\n};\n$14c78789229899a8$var$conjugator.not_d_irregular = {\n    \"\\uB9DE\\uBC1B\": true,\n    \"\\uB0B4\\uB51B\": true,\n    \"\\uB0B4\\uB9AC\\uBC1B\": true,\n    \"\\uBC8B\": true,\n    \"\\uB4A4\\uB2EB\": true,\n    \"\\uC8FC\\uACE0\\uBC1B\": true,\n    \"\\uACF5\\uC5BB\": true,\n    \"\\uBB34\\uB72F\": true,\n    \"\\uBB3C\\uC5B4\\uB72F\": true,\n    \"\\uC5EC\\uB2EB\": true,\n    \"\\uADF8\\uB7EC\\uBB3B\": true,\n    \"\\uC787\\uB2EB\": true,\n    \"\\uB367\\uBB3B\": true,\n    \"\\uB418\\uBC1B\": true,\n    \"\\uBED7\": true,\n    \"\\uC62C\\uB9AC\\uB2EB\": true,\n    \"\\uD5D0\\uB72F\": true,\n    \"\\uB4E4\\uC774\\uB2EB\": true,\n    \"\\uD65C\\uAC77\": true,\n    \"\\uAC89\\uBB3B\": true,\n    \"\\uB2EB\": true,\n    \"\\uCC3D\\uBC1B\": true,\n    \"\\uAC74\\uB124\\uBC1B\": true,\n    \"\\uBB3C\\uC190\\uBC1B\": true,\n    \"\\uB4E4\\uC774\\uBC1B\": true,\n    \"\\uAC15\\uC694\\uBC1B\": true,\n    \"\\uB0B4\\uB9AC\\uBC8B\": true,\n    \"\\uBC1B\": true,\n    \"\\uC774\\uC5B4\\uBC1B\": true,\n    \"\\uBD80\\uB974\\uAC77\": true,\n    \"\\uC751\\uBC1B\": true,\n    \"\\uAC80\\uB72F\": true,\n    \"\\uC778\\uC815\\uBC1B\": true,\n    \"\\uB0B4\\uB824\\uB51B\": true,\n    \"\\uB0B4\\uC3DF\": true,\n    \"\\uB0B4\\uB9AC\\uBED7\": true,\n    \"\\uB108\\uB984\\uBC1B\": true,\n    \"\\uC138\\uBC1B\": true,\n    \"\\uB0B4 \\uB3CB\": true,\n    \"\\uB3CC\\uB824\\uBC1B\": true,\n    \"\\uC950\\uC5B4\\uB72F\": true,\n    \"\\uAEF4\\uBB3B\": true,\n    \"\\uBCF8\\uBC1B\": true,\n    \"\\uB4A4\\uBC1B\": true,\n    \"\\uAC15\\uC885\\uBC1B\": true,\n    \"\\uB0B4\\uB9AC\\uB2EB\": true,\n    \"\\uB5A0\\uBC1B\": true,\n    \"\\uD14C\\uBC1B\": true,\n    \"\\uB0B4\\uBC1B\": true,\n    \"\\uD760\\uB72F\": true,\n    \"\\uB450\\uB0A8\\uBC1B\": true,\n    \"\\uCE58\\uBC1B\": true,\n    \"\\uBD80\\uB974\\uB3CB\": true,\n    \"\\uB300\\uBC1B\": true,\n    \"\\uC124\\uAD73\": true,\n    \"\\uCC98\\uB2EB\": true,\n    \"\\uC5BB\": true,\n    \"\\uB4E4\\uC774\\uB3CB\": true,\n    \"\\uB3CB\": true,\n    \"\\uC8C4\\uBC1B\": true,\n    \"\\uC3DF\": true,\n    \"\\uC528\\uBC1B\": true,\n    \"\\uB531\\uC7A5\\uBC1B\": true,\n    \"\\uCE58\\uAC77\": true,\n    \"\\uBBFF\": true,\n    \"\\uCE58\\uBC8B\": true,\n    \"\\uBC84\\uB9BC\\uBC1B\": true,\n    \"\\uBD81\\uB3CB\": true,\n    \"\\uB51B\": true,\n    \"\\uCE58\\uACE0\\uBC1B\": true,\n    \"\\uC6B1\\uAC77\": true,\n    \"\\uBB3C\\uB824\\uBC1B\": true,\n    \"\\uB72F\": true,\n    \"\\uC934\\uB72F\": true,\n    \"\\uB118\\uACA8\\uBC1B\": true,\n    \"\\uC548\\uBC1B\": true,\n    \"\\uB0B4\\uBED7\": true,\n    \"\\uB0B4\\uB9AC\\uC3DF\": true,\n    \"\\uBC8B\\uB51B\": true,\n    \"\\uB4A4\\uBB3B\": true,\n    \"\\uBED7\\uB51B\": true,\n    \"\\uCE58\\uBED7\": true,\n    \"\\uCE58\\uB2EB\": true,\n    \"\\uC904\\uBC11\\uAC77\": true,\n    \"\\uAD73\": true,\n    \"\\uB0B4\\uB2EB\": true,\n    \"\\uB0B4\\uB9BC\\uBC1B\": true\n};\n$14c78789229899a8$var$conjugator.not_h_irregular = {\n    \"\\uB4E4\\uC774\\uC88B\": true,\n    \"\\uD130\\uB193\": true,\n    \"\\uC811\\uC5B4\\uB193\": true,\n    \"\\uC88B\": true,\n    \"\\uD480\\uC5B4\\uB193\": true,\n    \"\\uB0B4\\uC313\": true,\n    \"\\uAF34\\uC88B\": true,\n    \"\\uCE58\\uC313\": true,\n    \"\\uBB3C\\uC5B4\\uB123\": true,\n    \"\\uC787\\uB2FF\": true,\n    \"\\uB05D\\uB2FF\": true,\n    \"\\uADF8\\uB7EC\\uB123\": true,\n    \"\\uBF55\\uB193\": true,\n    \"\\uB0B3\": true,\n    \"\\uB0B4\\uB9AC\\uCC27\": true,\n    \"\\uD798\\uB2FF\": true,\n    \"\\uB0B4\\uB824\\uB193\": true,\n    \"\\uC138\\uB193\": true,\n    \"\\uB458\\uB7EC\\uB193\": true,\n    \"\\uB4E4\\uB193\": true,\n    \"\\uB9DE\\uCC27\": true,\n    \"\\uC7A1\\uC544\\uB123\": true,\n    \"\\uB3CC\\uB77C\\uC313\": true,\n    \"\\uB367\\uC313\": true,\n    \"\\uAC08\\uB77C\\uB54B\": true,\n    \"\\uC8FC\\uB193\": true,\n    \"\\uAC08\\uB77C\\uB193\": true,\n    \"\\uB4E4\\uC774\\uB2FF\": true,\n    \"\\uC9D1\\uC5B4\\uB123\": true,\n    \"\\uB2FF\": true,\n    \"\\uC758\\uC88B\": true,\n    \"\\uB9C9\\uB193\": true,\n    \"\\uB0B4\\uB193\": true,\n    \"\\uB4E4\\uC5EC\\uB193\": true,\n    \"\\uC0AC\\uB193\": true,\n    \"\\uC370\\uB808\\uB193\": true,\n    \"\\uC9D3\\uCC27\": true,\n    \"\\uBC8B\\uB193\": true,\n    \"\\uCC27\": true,\n    \"\\uCE68\\uB193\": true,\n    \"\\uB4E4\\uC774\\uCC27\": true,\n    \"\\uB458\\uB7EC\\uC313\": true,\n    \"\\uD138\\uC5B4\\uB193\": true,\n    \"\\uB2F4\\uC313\": true,\n    \"\\uB3CC\\uB77C\\uB193\": true,\n    \"\\uB418\\uC7A1\\uC544\\uB123\": true,\n    \"\\uB04C\\uC5B4\\uB123\": true,\n    \"\\uB367\\uB193\": true,\n    \"\\uB9DE\\uB2FF\": true,\n    \"\\uCC98\\uB123\": true,\n    \"\\uBE7B\": true,\n    \"\\uBEE5\\uB193\": true,\n    \"\\uB0B4\\uB9AC\\uC313\": true,\n    \"\\uACF1\\uB193\": true,\n    \"\\uC124\\uB808\\uBC1C\\uB193\": true,\n    \"\\uC6B0\\uACA8\\uB123\": true,\n    \"\\uB193\": true,\n    \"\\uC218\\uB193\": true,\n    \"\\uC368\\uB123\": true,\n    \"\\uB110\\uC5B4\\uB193\": true,\n    \"\\uB36E\\uC313\": true,\n    \"\\uC5F0\\uB2FF\": true,\n    \"\\uD5DB\\uB193\": true,\n    \"\\uB3CC\\uB824\\uB193\": true,\n    \"\\uB418\\uC313\": true,\n    \"\\uC6B1\\uC5EC\\uB123\": true,\n    \"\\uC557\\uC544\\uB123\": true,\n    \"\\uC62C\\uB824\\uB193\": true,\n    \"\\uD5DB\\uBC29\\uB193\": true,\n    \"\\uB0A0\\uC544\\uB193\": true,\n    \"\\uB4A4\\uB193\": true,\n    \"\\uC5C5\\uC218\\uB193\": true,\n    \"\\uAC00\\uB85C\\uB193\": true,\n    \"\\uB9DE\\uB193\": true,\n    \"\\uD3B4\\uB193\": true,\n    \"\\uB0B4\\uCF1C\\uB193\": true,\n    \"\\uC313\": true,\n    \"\\uB059\\uC9DC\\uB193\": true,\n    \"\\uB4E4\\uC774\\uC313\": true,\n    \"\\uACB9\\uC313\": true,\n    \"\\uAE30\\uCD94\\uB193\": true,\n    \"\\uB123\": true,\n    \"\\uBD88\\uC5B4\\uB123\": true,\n    \"\\uB298\\uC5B4\\uB193\": true,\n    \"\\uAE01\\uC5B4\\uB193\": true,\n    \"\\uC5B4\\uAE0B\\uB193\": true,\n    \"\\uC55E\\uB123\": true,\n    \"\\uB20C\\uB7EC\\uB193\": true,\n    \"\\uB54B\": true,\n    \"\\uB4E4\\uC5EC\\uC313\": true,\n    \"\\uBE57\\uB193\": true,\n    \"\\uC0AC\\uC774\\uC88B\": true,\n    \"\\uB418\\uB193\": true,\n    \"\\uD5DB\\uBD88\\uB193\": true,\n    \"\\uBAB0\\uC544\\uB123\": true,\n    \"\\uBA39\\uB193\": true,\n    \"\\uBC00\\uCCD0\\uB193\": true,\n    \"\\uC0B4\\uB2FF\": true,\n    \"\\uD53C\\uC0C8\\uB193\": true,\n    \"\\uBE7C\\uB193\": true,\n    \"\\uD558\\uCC28\\uB193\": true,\n    \"\\uD2C0\\uC5B4\\uB123\": true\n};\n$14c78789229899a8$var$conjugator.not_l_euh_irregular = {\n    \"\\uC6B0\\uB7EC\\uB974\": true,\n    \"\\uB530\\uB974\": true,\n    \"\\uBD99\\uB530\\uB974\": true,\n    \"\\uB2A6\\uCE58\\uB974\": true,\n    \"\\uB2E4\\uB2E4\\uB974\": true,\n    \"\\uC787\\uB530\\uB974\": true,\n    \"\\uCE58\\uB974\": true\n};\n$14c78789229899a8$var$conjugator.not_l_irregular = {};\n$14c78789229899a8$var$conjugator.after_last_space = function(infinitive) {\n    return infinitive.split(\" \").reverse()[0];\n};\n$14c78789229899a8$var$conjugator.is_s_irregular = function(infinitive, regular) {\n    if (regular) return false;\n    return (0, $8ro1P.hangeul).match(infinitive.charAt(infinitive.length - 1), \"*\", \"*\", \"\\u11BA\") && !($14c78789229899a8$var$conjugator.after_last_space(infinitive) in $14c78789229899a8$var$conjugator.not_s_irregular);\n};\n$14c78789229899a8$var$conjugator.is_l_irregular = function(infinitive, regular) {\n    if (regular) return false;\n    return (0, $8ro1P.hangeul).match(infinitive.charAt(infinitive.length - 1), \"*\", \"*\", \"\\u11AF\") && !($14c78789229899a8$var$conjugator.after_last_space(infinitive) in $14c78789229899a8$var$conjugator.not_l_irregular);\n};\n$14c78789229899a8$var$conjugator.is_l_euh_irregular = function(infinitive, regular) {\n    if (regular) return false;\n    return (0, $8ro1P.hangeul).match(infinitive.charAt(infinitive.length - 1), \"\\u1105\", \"\\u3161\", null) && !($14c78789229899a8$var$conjugator.after_last_space(infinitive) in $14c78789229899a8$var$conjugator.not_l_euh_irregular);\n};\n$14c78789229899a8$var$conjugator.is_h_irregular = function(infinitive, regular) {\n    if (regular) return false;\n    return ((0, $8ro1P.hangeul).padchim(infinitive.charAt(infinitive.length - 1)) == \"\\u11C2\" || infinitive.charAt(infinitive.length - 1) == \"\\uB7EC\") && !($14c78789229899a8$var$conjugator.after_last_space(infinitive) in $14c78789229899a8$var$conjugator.not_h_irregular);\n};\n$14c78789229899a8$var$conjugator.is_p_irregular = function(infinitive, regular) {\n    if (regular) return false;\n    return (0, $8ro1P.hangeul).match(infinitive.charAt(infinitive.length - 1), \"*\", \"*\", \"\\u11B8\") && !($14c78789229899a8$var$conjugator.after_last_space(infinitive) in $14c78789229899a8$var$conjugator.not_p_irregular);\n};\n$14c78789229899a8$var$conjugator.is_d_irregular = function(infinitive, regular) {\n    if (regular) return false;\n    return (0, $8ro1P.hangeul).match(infinitive.charAt(infinitive.length - 1), \"*\", \"*\", \"\\u11AE\") && !($14c78789229899a8$var$conjugator.after_last_space(infinitive) in $14c78789229899a8$var$conjugator.not_d_irregular);\n};\n$14c78789229899a8$var$conjugator.verb_types = {\n    \"\\u3145 \\uBD88\\uADDC\\uCE59 \\uB3D9\\uC0AC (irregular verb)\": $14c78789229899a8$var$conjugator.is_s_irregular,\n    \"\\u3139 \\uBD88\\uADDC\\uCE59 \\uB3D9\\uC0AC (irregular verb)\": $14c78789229899a8$var$conjugator.is_l_irregular,\n    \"\\uB974 \\uBD88\\uADDC\\uCE59 \\uB3D9\\uC0AC (irregular verb)\": $14c78789229899a8$var$conjugator.is_l_euh_irregular,\n    \"\\u314E \\uBD88\\uADDC\\uCE59 \\uB3D9\\uC0AC (irregular verb)\": $14c78789229899a8$var$conjugator.is_h_irregular,\n    \"\\u3142 \\uBD88\\uADDC\\uCE59 \\uB3D9\\uC0AC (irregular verb)\": $14c78789229899a8$var$conjugator.is_p_irregular,\n    \"\\u3137 \\uBD88\\uADDC\\uCE59 \\uB3D9\\uC0AC (irregular verb)\": $14c78789229899a8$var$conjugator.is_d_irregular\n};\n$14c78789229899a8$var$conjugator.verb_type = function(infinitive, regular) {\n    if (regular) return \"regular verb\";\n    for(irregular_name in $14c78789229899a8$var$conjugator.verb_types){\n        func = $14c78789229899a8$var$conjugator.verb_types[irregular_name];\n        if (func($14c78789229899a8$var$conjugator.base(infinitive))) return irregular_name;\n    }\n    return \"regular verb\";\n};\n$14c78789229899a8$var$conjugator.base = function(infinitive, regular) {\n    if (infinitive.charAt(infinitive.length - 1) == \"\\uB2E4\") return infinitive.substring(0, infinitive.length - 1);\n    else return infinitive;\n};\n$14c78789229899a8$var$conjugator.base2 = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    if (infinitive == \"\\uC544\\uB2C8\") {\n        infinitive = new (0, $8ro1P.hangeul).Geulja(\"\\uC544\\uB2C8\");\n        infinitive.hidden_padchim = true;\n        return infinitive;\n    }\n    if (infinitive == \"\\uBD59\") return \"\\uBD48\";\n    if (infinitive == \"\\uD478\") return \"\\uD37C\";\n    let new_infinitive = infinitive;\n    if ($14c78789229899a8$var$conjugator.is_h_irregular(infinitive, regular)) {\n        new_infinitive = $14c78789229899a8$var$conjugator.merge(infinitive.substring(0, infinitive.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive.charAt(infinitive.length - 1)), (0, $8ro1P.hangeul).vowel(infinitive.charAt(infinitive.length - 1))), \"\\uC774\");\n        $14c78789229899a8$var$conjugator.reasons.push(\"\\u314E irregular (\" + infinitive + \" -> \" + new_infinitive + \")\");\n    } else if ($14c78789229899a8$var$conjugator.is_p_irregular(infinitive, regular)) {\n        // only some verbs get ㅗ (highly irregular)\n        let new_vowel;\n        if (infinitive in {\n            \"\\uBB3B\\uC7A1\": true\n        } || infinitive.charAt(infinitive.length - 1) in {\n            \"\\uB3D5\": true,\n            \"\\uACF1\": true\n        }) new_vowel = \"\\u3157\";\n        else new_vowel = \"\\u315C\";\n        new_infinitive = $14c78789229899a8$var$conjugator.merge(infinitive.substring(0, infinitive.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive.charAt(infinitive.length - 1)), (0, $8ro1P.hangeul).vowel(infinitive.charAt(infinitive.length - 1))), (0, $8ro1P.hangeul).join(\"\\u110B\", new_vowel));\n        $14c78789229899a8$var$conjugator.reasons.push(\"\\u3142 irregular (\" + infinitive + \" -> \" + new_infinitive + \")\");\n    } else if ($14c78789229899a8$var$conjugator.is_d_irregular(infinitive, regular)) {\n        new_infinitive = new (0, $8ro1P.hangeul).Geulja(infinitive.substring(0, infinitive.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive.charAt(infinitive.length - 1)), (0, $8ro1P.hangeul).vowel(infinitive.charAt(infinitive.length - 1)), \"\\u11AF\"));\n        new_infinitive.original_padchim = \"\\u11AE\";\n        $14c78789229899a8$var$conjugator.reasons.push(\"\\u3137 irregular (\" + infinitive + \" -> \" + new_infinitive + \")\");\n    } else if ($14c78789229899a8$var$conjugator.is_s_irregular(infinitive, regular)) {\n        new_infinitive = new (0, $8ro1P.hangeul).Geulja(infinitive.substring(0, infinitive.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive.charAt(infinitive.length - 1)), (0, $8ro1P.hangeul).vowel(infinitive.charAt(infinitive.length - 1))));\n        new_infinitive.hidden_padchim = true;\n        $14c78789229899a8$var$conjugator.reasons.push(\"\\u3145 irregular (\" + infinitive + \" -> \" + new_infinitive + \" [hidden padchim])\");\n    }\n    return new_infinitive;\n};\n$14c78789229899a8$var$conjugator.base3 = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    if (infinitive == \"\\uC544\\uB2C8\") return \"\\uC544\\uB2C8\";\n    if (infinitive == \"\\uD478\") return \"\\uD478\";\n    if (infinitive == \"\\uBD59\") return \"\\uBD48\";\n    if ($14c78789229899a8$var$conjugator.is_h_irregular(infinitive, regular)) return infinitive.substring(0, infinitive.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive.charAt(infinitive.length - 1)), (0, $8ro1P.hangeul).vowel(infinitive.charAt(infinitive.length - 1)));\n    else if ($14c78789229899a8$var$conjugator.is_p_irregular(infinitive, regular)) return infinitive.substring(0, infinitive.length - 1) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive.charAt(infinitive.length - 1)), (0, $8ro1P.hangeul).vowel(infinitive.charAt(infinitive.length - 1))) + \"\\uC6B0\";\n    else return $14c78789229899a8$var$conjugator.base2(infinitive, regular);\n};\n$14c78789229899a8$var$conjugator.declarative_present_informal_low = function(infinitive, regular, further_use) {\n    infinitive = $14c78789229899a8$var$conjugator.base2(infinitive, regular);\n    if (!further_use && (infinitive == \"\\uC774\" && !infinitive.hidden_padchim || infinitive == \"\\uC544\\uB2C8\") || regular && infinitive.charAt(infinitive.length - 1) == \"\\uC774\") {\n        $14c78789229899a8$var$conjugator.reasons.push(\"\\uC57C irregular\");\n        return infinitive + \"\\uC57C\";\n    }\n    // 르 irregular\n    if (regular && infinitive == \"\\uC774\\uB974\") return \"\\uC77C\\uB7EC\";\n    if ($14c78789229899a8$var$conjugator.is_l_euh_irregular(infinitive, regular)) {\n        let new_base = infinitive.substring(0, infinitive.length - 2) + (0, $8ro1P.hangeul).join((0, $8ro1P.hangeul).lead(infinitive[infinitive.length - 2]), (0, $8ro1P.hangeul).vowel(infinitive[infinitive.length - 2]), \"\\u11AF\");\n        if (infinitive.substring(infinitive.length - 2, infinitive.length) in {\n            \"\\uD478\\uB974\": true,\n            \"\\uC774\\uB974\": true\n        }) {\n            new_base = new_base + (0, $8ro1P.hangeul).join(\"\\u1105\", (0, $8ro1P.hangeul).vowel((0, $8ro1P.hangeul).find_vowel_to_append(new_base)));\n            $14c78789229899a8$var$conjugator.reasons.push(\"irregular stem + \" + infinitive + \" -> \" + new_base);\n            return infinitive + \"\\uB7EC\";\n        } else if ((0, $8ro1P.hangeul).find_vowel_to_append(infinitive.substring(0, infinitive.length - 1)) == \"\\uC544\") {\n            new_base += \"\\uB77C\";\n            $14c78789229899a8$var$conjugator.reasons.push(\"\\uB974 irregular stem change [\" + infinitive + \" -> \" + new_base + \"]\");\n            return new_base;\n        } else {\n            new_base += \"\\uB7EC\";\n            $14c78789229899a8$var$conjugator.reasons.push(\"\\uB974 irregular stem change [\" + infinitive + \" -> \" + new_base + \"]\");\n            return new_base;\n        }\n    } else if (infinitive.charAt(infinitive.length - 1) == \"\\uD558\") return $14c78789229899a8$var$conjugator.merge(infinitive, \"\\uC5EC\");\n    else if ($14c78789229899a8$var$conjugator.is_h_irregular(infinitive, regular)) return $14c78789229899a8$var$conjugator.merge(infinitive, \"\\uC774\");\n    return $14c78789229899a8$var$conjugator.merge(infinitive, (0, $8ro1P.hangeul).find_vowel_to_append(infinitive));\n};\n$14c78789229899a8$var$conjugator.declarative_present_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_present_informal_high = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base2(infinitive, regular);\n    if (infinitive == \"\\uC774\" && !infinitive.hidden_padchim || infinitive.charAt(infinitive.length - 1) == \"\\uC774\" && regular || infinitive == \"\\uC544\\uB2C8\") {\n        $14c78789229899a8$var$conjugator.reasons.push(\"\\uC5D0\\uC694 irregular\");\n        return infinitive + \"\\uC5D0\\uC694\";\n    }\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.declarative_present_informal_low(infinitive, regular, true), \"\\uC694\");\n};\n$14c78789229899a8$var$conjugator.declarative_present_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_present_formal_low = function(infinitive, regular) {\n    if ($14c78789229899a8$var$conjugator.is_l_irregular($14c78789229899a8$var$conjugator.base(infinitive), regular)) return $14c78789229899a8$var$conjugator.drop_l_and_borrow_padchim($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uB294\\uB2E4\");\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uB294\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_present_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_present_formal_high = function(infinitive, regular) {\n    if ($14c78789229899a8$var$conjugator.is_l_irregular($14c78789229899a8$var$conjugator.base(infinitive), regular)) return $14c78789229899a8$var$conjugator.drop_l_and_borrow_padchim($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uC2B5\\uB2C8\\uB2E4\");\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uC2B5\\uB2C8\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_present_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.past_base = function(infinitive, regular) {\n    let ps = $14c78789229899a8$var$conjugator.declarative_present_informal_low(infinitive, regular, true);\n    if ((0, $8ro1P.hangeul).find_vowel_to_append(ps) == \"\\uC544\") return $14c78789229899a8$var$conjugator.merge(ps, \"\\uC558\");\n    else return $14c78789229899a8$var$conjugator.merge(ps, \"\\uC5C8\");\n};\n$14c78789229899a8$var$conjugator.past_base.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_past_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.past_base(infinitive, regular), \"\\uC5B4\");\n};\n$14c78789229899a8$var$conjugator.declarative_past_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_past_informal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.declarative_past_informal_low(infinitive, regular), \"\\uC694\");\n};\n$14c78789229899a8$var$conjugator.declarative_past_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_past_formal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.past_base(infinitive, regular), \"\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_past_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_past_formal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.past_base(infinitive, regular), \"\\uC2B5\\uB2C8\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_past_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.future_base = function(infinitive, regular) {\n    if ($14c78789229899a8$var$conjugator.is_l_irregular($14c78789229899a8$var$conjugator.base(infinitive, regular))) return $14c78789229899a8$var$conjugator.drop_l_and_borrow_padchim($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC744\");\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC744\");\n};\n$14c78789229899a8$var$conjugator.future_base.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.future_base(infinitive, regular), \" \\uAC70\\uC57C\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_informal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.future_base(infinitive, regular), \" \\uAC70\\uC608\\uC694\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_formal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.future_base(infinitive, regular), \" \\uAC70\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_formal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.future_base(infinitive, regular), \" \\uAC81\\uB2C8\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_conditional_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uACA0\\uC5B4\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_conditional_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_conditional_informal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uACA0\\uC5B4\\uC694\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_conditional_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_conditional_formal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uACA0\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_conditional_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.declarative_future_conditional_formal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uACA0\\uC2B5\\uB2C8\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.declarative_future_conditional_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_present_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.declarative_present_informal_low(infinitive, regular), \"?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_present_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_present_informal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.declarative_present_informal_high(infinitive, regular), \"?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_present_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_present_formal_low = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    if ($14c78789229899a8$var$conjugator.is_l_irregular(infinitive, regular)) return $14c78789229899a8$var$conjugator.drop_l(infinitive, \"\\uB2C8?\");\n    return $14c78789229899a8$var$conjugator.merge(infinitive, \"\\uB2C8?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_present_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_present_formal_high = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    if ($14c78789229899a8$var$conjugator.is_l_irregular(infinitive, regular)) return $14c78789229899a8$var$conjugator.drop_l_and_borrow_padchim(infinitive, \"\\uC2B5\\uB2C8\\uAE4C?\");\n    return $14c78789229899a8$var$conjugator.merge(infinitive, \"\\uC2B5\\uB2C8\\uAE4C?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_present_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_past_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.declarative_past_informal_low(infinitive, regular) + \"?\";\n};\n$14c78789229899a8$var$conjugator.inquisitive_past_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_past_informal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.declarative_past_informal_high(infinitive, regular), \"?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_past_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_past_formal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.past_base(infinitive, regular), \"\\uB2C8?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_past_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.inquisitive_past_formal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.past_base(infinitive, regular), \"\\uC2B5\\uB2C8\\uAE4C?\");\n};\n$14c78789229899a8$var$conjugator.inquisitive_past_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.imperative_present_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.declarative_present_informal_low(infinitive, regular);\n};\n$14c78789229899a8$var$conjugator.imperative_present_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.imperative_present_informal_high = function(infinitive, regular) {\n    if ($14c78789229899a8$var$conjugator.is_l_irregular($14c78789229899a8$var$conjugator.base(infinitive, regular))) return $14c78789229899a8$var$conjugator.drop_l($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC138\\uC694\");\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC138\\uC694\");\n};\n$14c78789229899a8$var$conjugator.imperative_present_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.imperative_present_formal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.imperative_present_informal_low(infinitive, regular), \"\\uB77C\");\n};\n$14c78789229899a8$var$conjugator.imperative_present_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.imperative_present_formal_high = function(infinitive, regular) {\n    if ($14c78789229899a8$var$conjugator.is_l_irregular($14c78789229899a8$var$conjugator.base(infinitive, regular))) return $14c78789229899a8$var$conjugator.drop_l($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC2ED\\uC2DC\\uC624\");\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC2ED\\uC2DC\\uC624\");\n};\n$14c78789229899a8$var$conjugator.imperative_present_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.propositive_present_informal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.declarative_present_informal_low(infinitive, regular);\n};\n$14c78789229899a8$var$conjugator.propositive_present_informal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.propositive_present_informal_high = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.declarative_present_informal_high(infinitive, regular);\n};\n$14c78789229899a8$var$conjugator.propositive_present_informal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.propositive_present_formal_low = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uC790\");\n};\n$14c78789229899a8$var$conjugator.propositive_present_formal_low.conjugation = true;\n$14c78789229899a8$var$conjugator.propositive_present_formal_high = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive);\n    if ($14c78789229899a8$var$conjugator.is_l_irregular(infinitive, regular)) return $14c78789229899a8$var$conjugator.drop_l_and_borrow_padchim($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC74D\\uC2DC\\uB2E4\");\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC74D\\uC2DC\\uB2E4\");\n};\n$14c78789229899a8$var$conjugator.propositive_present_formal_high.conjugation = true;\n$14c78789229899a8$var$conjugator.connective_if = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uBA74\");\n};\n$14c78789229899a8$var$conjugator.connective_if.conjugation = true;\n$14c78789229899a8$var$conjugator.connective_and = function(infinitive, regular) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base(infinitive, regular), \"\\uACE0\");\n};\n$14c78789229899a8$var$conjugator.connective_and.conjugation = true;\n$14c78789229899a8$var$conjugator.nominal_ing = function(infinitive, regular) {\n    return $14c78789229899a8$var$conjugator.merge($14c78789229899a8$var$conjugator.base3(infinitive, regular), \"\\uC74C\");\n};\n$14c78789229899a8$var$conjugator.nominal_ing.conjugation = true;\n$14c78789229899a8$var$conjugator.conjugations = [];\nfor(let f1 in $14c78789229899a8$var$conjugator)if (f1 && $14c78789229899a8$var$conjugator[f1].conjugation) $14c78789229899a8$var$conjugator.conjugations.push(f1);\n$14c78789229899a8$var$conjugator.display_conjugations = function(infinitive, regular, callback) {\n    var both_regular_and_irregular = false;\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    out = \"\";\n    if (infinitive in $14c78789229899a8$var$conjugator.both_regular_and_irregular) {\n        both_regular_and_irregular = true;\n        out += '<dd class=\"warning\">warning</dd>';\n        out += \"<dt>This verb has both regular and irregular forms.</dt>\";\n    }\n    out += '<div class=\"conjugation\"><dd>verb type</dd>';\n    out += \"<dt>\" + $14c78789229899a8$var$conjugator.verb_type(infinitive, regular);\n    if (both_regular_and_irregular) out += ' <button id=\"form-change\">view ' + (regular ? \"irregular\" : \"regular\") + \" form</button>\";\n    out += \"</dt></div>\";\n    for(conjugation in $14c78789229899a8$var$conjugator){\n        $14c78789229899a8$var$conjugator.reasons = [];\n        if ($14c78789229899a8$var$conjugator[conjugation].conjugation) {\n            out += '<div class=\"conjugation\"><dd>' + conjugation.replace(/_/g, \" \") + \"</dd>\";\n            var conjugated = $14c78789229899a8$var$conjugator[conjugation](infinitive, regular);\n            var pron = (0, (/*@__PURE__*/$parcel$interopDefault($666feef8e7b6d3b0$exports))).get_pronunciation(conjugated);\n            var romanized = romanization.romanize(pron);\n            out += \"<dt>\" + conjugated + ' <button class=\"show-reasons\">\\u21B4</button></dt>';\n            out += '<ul class=\"reasons\">';\n            out += \"<li>pronunciation [\" + (pron != conjugated ? pron + \" / \" : \"\") + romanized + \"]</li>\";\n            for(reason in $14c78789229899a8$var$conjugator.reasons)out += \"<li>\" + $14c78789229899a8$var$conjugator.reasons[reason] + \"</li>\";\n            out += \"</ul></div>\";\n        }\n    }\n    callback(out);\n};\n$14c78789229899a8$var$conjugator.each_conjugation = function(infinitive, regular, callback) {\n    infinitive = $14c78789229899a8$var$conjugator.base(infinitive, regular);\n    for(conjugation in $14c78789229899a8$var$conjugator){\n        $14c78789229899a8$var$conjugator.reasons = [];\n        if ($14c78789229899a8$var$conjugator[conjugation].conjugation) {\n            var r = {};\n            r.infinitive = infinitive;\n            r.conjugation_name = conjugation.replace(/_/g, \" \");\n            r.conjugated = $14c78789229899a8$var$conjugator[conjugation](infinitive, regular);\n            r.pronunciation = (0, (/*@__PURE__*/$parcel$interopDefault($666feef8e7b6d3b0$exports))).get_pronunciation(r.conjugated);\n            r.romanized = romanization.romanize(r.pronunciation);\n            r.reasons = [];\n            for(reason in $14c78789229899a8$var$conjugator.reasons)r.reasons.push($14c78789229899a8$var$conjugator.reasons[reason]);\n            callback(r);\n        }\n    }\n};\nvar $14c78789229899a8$export$1b246651ba34c93e = {\n    \"declarative\": {\n        \"present\": {\n            \"informal\": {\n                \"plain\": $14c78789229899a8$var$conjugator.declarative_present_informal_low,\n                \"polite\": $14c78789229899a8$var$conjugator.declarative_present_informal_high\n            },\n            \"formal\": {\n                \"plain\": $14c78789229899a8$var$conjugator.declarative_present_formal_low,\n                \"polite\": $14c78789229899a8$var$conjugator.declarative_present_formal_high\n            }\n        },\n        \"past\": {\n            \"informal\": {\n                \"plain\": $14c78789229899a8$var$conjugator.declarative_past_informal_low,\n                \"polite\": $14c78789229899a8$var$conjugator.declarative_past_informal_high\n            },\n            \"formal\": {\n                \"plain\": $14c78789229899a8$var$conjugator.declarative_past_formal_low,\n                \"polite\": $14c78789229899a8$var$conjugator.declarative_past_formal_high\n            }\n        }\n    }\n};\n// Export functions to node\ntry {\n    for(f in $14c78789229899a8$var$conjugator)$14c78789229899a8$exports[f] = $14c78789229899a8$var$conjugator[f];\n} catch (e) {}\n\n\n\"use strict\";\nconst $2b6e161c9edcf319$var$isTouch = \"ontouchstart\" in window || navigator.msMaxTouchPoints > 0;\ndocument.getElementById(\"press-any-key-text\").textContent = $2b6e161c9edcf319$var$isTouch ? \"Tap to continue\" : \"Press Enter/Return to continue\";\n// Stored in state.activeScreen\nconst $2b6e161c9edcf319$var$SCREENS = Object.freeze({\n    question: 0,\n    // Incorrect and correct answers are considered the same \"results\" screen\n    results: 1,\n    settings: 2\n});\nfunction $2b6e161c9edcf319$var$wordTypeToDisplayText(type) {\n    if (type == \"u\") return \"\\u3046-verb\";\n    else if (type == \"ru\") return \"\\u308B-verb\";\n    else if (type == \"irv\" || type == \"ira\") return \"Irregular\";\n    else if (type == \"i\") return \"\\u3044-adjective\";\n    else if (type == \"na\") return \"\\u306A-adjective\";\n}\nfunction $2b6e161c9edcf319$var$conjugationInqueryFormatting(conjugation) {\n    let newString = \"\";\n    function createInqueryText(text, emoji) {\n        return `<div class=\"conjugation-inquery\"><div class=\"inquery-emoji\">${emoji}</div><div class=\"inquery-text\">${text}</div></div> `;\n    }\n    if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).past) newString += createInqueryText((0, $18fe9b1b6336f500$export$45aabe1f61557e96).past, \"\\u231A\");\n    else if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).te || conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).adverb) newString += conjugation.type;\n    else if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).volitional) newString += createInqueryText((0, $18fe9b1b6336f500$export$45aabe1f61557e96).volitional, \"\\uD83C\\uDF7B\");\n    else if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).passive) newString += createInqueryText((0, $18fe9b1b6336f500$export$45aabe1f61557e96).passive, \"\\uD83E\\uDDD8\");\n    else if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).causative) newString += createInqueryText((0, $18fe9b1b6336f500$export$45aabe1f61557e96).causative, \"\\uD83D\\uDC69\\u200D\\uD83C\\uDFEB\");\n    else if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).potential) newString += createInqueryText((0, $18fe9b1b6336f500$export$45aabe1f61557e96).potential, \"\\u200D\\uD83C\\uDFCB\");\n    else if (conjugation.type === (0, $18fe9b1b6336f500$export$45aabe1f61557e96).imperative) newString += createInqueryText((0, $18fe9b1b6336f500$export$45aabe1f61557e96).imperative, \"\\uD83D\\uDCE2\");\n    // This used to also add \"Affirmative\" text when affirmative was true, but it was a little redundant.\n    // Now it only adds \"Negative\" text when affirmative is false.\n    // if (conjugation.affirmative === false) {\n    // \tnewString += createInqueryText(\"Negative\", \"🚫\");\n    // } else {\n    // \tnewString += createInqueryText(\"Affirmative\", \"✅\");\n    // }\n    if (conjugation.formal === true) newString += createInqueryText(\"Formal\", \"\\uD83D\\uDC54\");\n    else if (conjugation.formal === false) newString += createInqueryText(\"Informal\", \"\\uD83D\\uDC6A\");\n    if (conjugation.polite === true) newString += createInqueryText(\"Polite\", \"\\uD83D\\uDC54\");\n    else if (conjugation.polite === false) newString += createInqueryText(\"Impolite\", \"\\uD83D\\uDC6A\");\n    if (conjugation.polite === false && conjugation.formal == false) newString += createInqueryText(\"(Casual)\", \"\");\n    return newString;\n}\nfunction $2b6e161c9edcf319$var$changeVerbBoxFontColor(color) {\n    let ps = document.getElementById(\"verb-box\").getElementsByTagName(\"p\");\n    for (let p of Array.from(ps))p.style.color = color;\n}\nfunction $2b6e161c9edcf319$var$loadNewWord(wordList) {\n    let word = $2b6e161c9edcf319$var$pickRandomWord(wordList);\n    $2b6e161c9edcf319$var$updateCurrentWord(word);\n    $2b6e161c9edcf319$var$changeVerbBoxFontColor(\"rgb(244, 226, 197)\");\n    return word;\n}\nfunction $2b6e161c9edcf319$var$updateCurrentWord(word) {\n    // Caution: verb-box is controlled using a combination of the background-none class and setting style.background directly.\n    // The background-none class is useful for other CSS selectors to grab onto,\n    // while the style.background is useful for setting variable bg colors.\n    (0, $820877bea407f5fe$export$877ee1ca1de102fd)(document.getElementById(\"verb-box\"), true);\n    // The <rt> element had different padding on different browsers.\n    // Rather than attacking it with CSS, just replace it with a span we have control over.\n    const verbHtml = word.wordJSON.hangeul.replaceAll(\"<rt>\", '<span class=\"rt\">').replaceAll(\"</rt>\", \"</span>\");\n    document.getElementById(\"verb-text\").innerHTML = verbHtml;\n    document.getElementById(\"translation\").textContent = word.wordJSON.eng;\n    // Set verb-type to a non-breaking space to preserve vertical height\n    document.getElementById(\"verb-type\").textContent = \"\\xa0\";\n    document.getElementById(\"conjugation-inquery-text\").innerHTML = $2b6e161c9edcf319$var$conjugationInqueryFormatting(word.conjugation);\n}\nfunction $2b6e161c9edcf319$var$extractKoreanCharacters(text) {\n    // Use a regex to match only Korean Hangul characters (Unicode range \\uAC00-\\uD7A3)\n    return text.replace(/[^\\uAC00-\\uD7A3]/g, \"\");\n}\nfunction $2b6e161c9edcf319$var$getNegation(word) {\n    return word.slice(0, -1) + \"\\uC9C0 \\uC54A\\uB2E4\";\n}\nfunction $2b6e161c9edcf319$var$getKoreanConjugation(word, mood, tense, formality, politeness) {\n    let conjugator_function = (0, $14c78789229899a8$exports.conjugator_functions)[mood][tense][formality][politeness];\n    const conjugation = conjugator_function(word);\n    let type;\n    if (tense == \"present\") type = (0, $18fe9b1b6336f500$export$45aabe1f61557e96).present;\n    else type = (0, $18fe9b1b6336f500$export$45aabe1f61557e96).past;\n    return new $2b6e161c9edcf319$var$Conjugation([\n        conjugation\n    ], type, true, formality == \"formal\", politeness == \"polite\");\n}\nfunction $2b6e161c9edcf319$var$getAllKoreanConjugations(wordJSON) {\n    const allConjugations = [];\n    const word = $2b6e161c9edcf319$var$extractKoreanCharacters(wordJSON.hangeul);\n    const moods = [\n        \"declarative\"\n    ];\n    const tenses = [\n        \"present\",\n        \"past\"\n    ];\n    const formalities = [\n        \"informal\",\n        \"formal\"\n    ];\n    const politeness = [\n        \"plain\",\n        \"polite\"\n    ];\n    for (const mood of moods)for (const tense of tenses){\n        for (const formal of formalities)for (const polite of politeness)allConjugations.push($2b6e161c9edcf319$var$getKoreanConjugation(word, mood, tense, formal, polite));\n    }\n    return allConjugations.flat();\n}\nclass $2b6e161c9edcf319$var$Conjugation {\n    // conjugationType is CONJUGATION_TYPES enum\n    constructor(validAnswers, conjugationType, affirmative, formal, polite){\n        this.validAnswers = validAnswers;\n        this.type = conjugationType;\n        this.affirmative = affirmative;\n        this.formal = formal;\n        this.polite = polite;\n    }\n}\nclass $2b6e161c9edcf319$var$Word {\n    // conjugation is Conjugation class object\n    constructor(wordJSON, conjugation){\n        this.wordJSON = wordJSON;\n        this.conjugation = conjugation;\n        // Probability is updated directly by external functions\n        this.probability = 0;\n        // wasRecentlyIncorrect is used when calculating probability\n        this.wasRecentlyIncorrect = false;\n    }\n}\nclass $2b6e161c9edcf319$var$WordRecentlySeen {\n    constructor(word, wasCorrect){\n        this.word = word;\n        this.wasCorrect = wasCorrect;\n    }\n}\nfunction $2b6e161c9edcf319$var$findMinProb(currentWords) {\n    let min = 2;\n    for(let i = 0; i < currentWords.length; i++)for(let j = 0; j < currentWords[i].length; j++)min = currentWords[i][j].probability < min && currentWords[i][j].probability != 0 ? currentWords[i][j].probability : min;\n    return min;\n}\nfunction $2b6e161c9edcf319$var$findMaxProb(currentWords) {\n    let max = 0;\n    for(let i = 0; i < currentWords.length; i++)for(let j = 0; j < currentWords[i].length; j++)max = currentWords[i][j].probability > max ? currentWords[i][j].probability : max;\n    return max;\n}\nfunction $2b6e161c9edcf319$var$normalizeProbabilities(currentWords) {\n    let totalProbability = 0;\n    // get total of probabilities\n    for(let i = 0; i < currentWords.length; i++)for(let j = 0; j < currentWords[i].length; j++)totalProbability += currentWords[i][j].probability;\n    // normalize\n    for(let i = 0; i < currentWords.length; i++)for(let j = 0; j < currentWords[i].length; j++)currentWords[i][j].probability /= totalProbability;\n}\nfunction $2b6e161c9edcf319$var$setAllProbabilitiesToValue(currentWords, value) {\n    for(let i = 0; i < currentWords.length; i++)for(let j = 0; j < currentWords[i].length; j++)currentWords[i][j].probability = value;\n}\n// Sets all of the probabilities to the same normalized value\nfunction $2b6e161c9edcf319$var$equalizeProbabilities(currentWords) {\n    $2b6e161c9edcf319$var$setAllProbabilitiesToValue(currentWords, 1);\n    // Now that all of the probabilities are equal,\n    // normalize them so together they all add up to 1.\n    $2b6e161c9edcf319$var$normalizeProbabilities(currentWords);\n}\nfunction $2b6e161c9edcf319$var$updateProbabilites(currentWords, wordsRecentlySeenQueue, currentWord, currentWordWasCorrect) {\n    const roundsToWait = 2;\n    // If the number of current verb + adjective conjugations is less than roundsToWait + 1,\n    // the pool of conjugations is too small for our wordsRecentlySeenQueue to work.\n    if (currentWords[0].length + currentWords[1].length < roundsToWait + 1) {\n        // Set all probabilities except the current word to be equal to avoid getting the same question twice\n        $2b6e161c9edcf319$var$setAllProbabilitiesToValue(currentWords, 1);\n        currentWord.probability = 0;\n        $2b6e161c9edcf319$var$normalizeProbabilities(currentWords);\n        return;\n    }\n    // Lower probability of running into words in the same group\n    if (currentWord.wordJSON.group) {\n        const currentConjugation = currentWord.conjugation;\n        const group = currentWord.wordJSON.group;\n        currentWords[getPartOfSpeech(currentWord.wordJSON) === (0, $18fe9b1b6336f500$export$aa00f474800863da).verb ? 0 : 1].filter((word)=>{\n            const conjugation = word.conjugation;\n            // Only alter probabilities of the exact same conjugation for other words in the group\n            return word.wordJSON.group === group && word !== currentWord && conjugation.type === currentConjugation.type && conjugation.affirmative === currentConjugation.affirmative && conjugation.polite === currentConjugation.polite;\n        }).forEach((word)=>{\n            // Have to be careful with lowering this too much, because it can affect findMinProb for other conjugations.\n            // Also, lowering it by a lot will make all of these words appear in a cluster after all the other words have been seen.\n            // Note that this is happening whether currentWordWasCorrect is true or false,\n            // so if someone got currentWord wrong many times it would tank the probabilities in this forEach over time.\n            word.probability /= 3;\n        });\n    }\n    // We wait \"roundsToWait\" rounds to set the probability of questions.\n    // This allows us to have a few rounds immediately after a question where it's guaranteed to not appear again,\n    // followed by the ability to set a high probability for the question to show up immediately after that waiting period (if the answer was incorrect).\n    if (wordsRecentlySeenQueue.length >= roundsToWait) {\n        let dequeuedWord = wordsRecentlySeenQueue.shift();\n        // Using findMinProb isn't a good solution because if you get one correct it's going to shrink the min prob a lot and affect future questions you get right or wrong.\n        // In the future there should probably be a static probability given to corrects, incorrects, and unseens, where that probability slowly grows the longer the word hasn't been seen.\n        let currentMinProb = $2b6e161c9edcf319$var$findMinProb(currentWords);\n        const correctProbModifier = 0.5;\n        const incorrectProbModifier = 0.85;\n        let newProbability;\n        if (dequeuedWord.wasCorrect && !dequeuedWord.word.wasRecentlyIncorrect) newProbability = currentMinProb * correctProbModifier;\n        else if (dequeuedWord.wasCorrect && dequeuedWord.word.wasRecentlyIncorrect) {\n            newProbability = currentMinProb * incorrectProbModifier;\n            dequeuedWord.word.wasRecentlyIncorrect = false;\n        } else if (!dequeuedWord.wasCorrect) // Set to an arbitrary high number to (nearly) guarantee this question is asked next.\n        newProbability = 10;\n        dequeuedWord.word.probability = newProbability;\n    }\n    // Keep track of misses so when the user finally gets it right,\n    // we can still give it a higher probability of appearing again than\n    // questions they got right on the first try.\n    if (!currentWordWasCorrect) currentWord.wasRecentlyIncorrect = true;\n    wordsRecentlySeenQueue.push(new $2b6e161c9edcf319$var$WordRecentlySeen(currentWord, currentWordWasCorrect));\n    // Make sure the user will not see the current question until at least \"roundsToWait\" number of rounds\n    currentWord.probability = 0;\n    $2b6e161c9edcf319$var$normalizeProbabilities(currentWords);\n}\n// returns 2D array [verbarray, adjarray]\nfunction $2b6e161c9edcf319$var$createWordList(JSONWords) {\n    let wordList = (0, $820877bea407f5fe$export$4720c7d384d77b7d)(JSONWords.length);\n    for(let i = 0; i < JSONWords.length; i++)for(let j = 0; j < JSONWords[i].length; j++){\n        let conjugations = $2b6e161c9edcf319$var$getAllKoreanConjugations(JSONWords[i][j]);\n        for(let k = 0; k < conjugations.length; k++)wordList[i].push(new $2b6e161c9edcf319$var$Word(JSONWords[i][j], conjugations[k]));\n    }\n    return wordList;\n}\nfunction $2b6e161c9edcf319$var$pickRandomWord(wordList) {\n    let random = Math.random();\n    try {\n        for(let i = 0; i < wordList.length; i++)for(let j = 0; j < wordList[i].length; j++){\n            if (random < wordList[i][j].probability) return wordList[i][j];\n            console.log(random);\n            random -= wordList[i][j].probability;\n        }\n        throw \"no random word chosen\";\n    } catch (err) {\n        console.error(err);\n        return wordList[0][0];\n    }\n}\nfunction $2b6e161c9edcf319$var$addToScore(amount = 1, maxScoreObjects, maxScoreIndex) {\n    if (amount == 0) return;\n    let max = document.getElementById(\"max-streak-text\");\n    let current = document.getElementById(\"current-streak-text\");\n    if (parseInt(max.textContent) <= parseInt(current.textContent)) {\n        let newAmount = parseInt(max.textContent) + amount;\n        max.textContent = newAmount;\n        if (!document.getElementById(\"max-streak\").classList.contains(\"display-none\")) max.classList.add(\"grow-animation\");\n        maxScoreObjects[maxScoreIndex].score = newAmount;\n        localStorage.setItem(\"maxScoreObjects\", JSON.stringify(maxScoreObjects));\n    }\n    current.textContent = parseInt(current.textContent) + amount;\n    if (!document.getElementById(\"current-streak\").classList.contains(\"display-none\")) current.classList.add(\"grow-animation\");\n}\nfunction $2b6e161c9edcf319$var$typeToWordBoxColor(type) {\n    switch(type){\n        case \"u\":\n            return \"rgb(255, 125, 0)\";\n        case \"ru\":\n            return \"rgb(5, 80, 245)\";\n        case \"irv\":\n            return \"gray\";\n        case \"ira\":\n            return \"gray\";\n        case \"i\":\n            return \"rgb(0, 180, 240)\";\n        case \"na\":\n            return \"rgb(143, 73, 40)\";\n    }\n}\nfunction $2b6e161c9edcf319$var$updateStatusBoxes(word, entryText) {\n    let statusBox = document.getElementById(\"status-box\");\n    (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(statusBox, false);\n    if (word.conjugation.validAnswers.some((e)=>e == entryText)) {\n        statusBox.style.background = \"green\";\n        const subConjugationForm = $2b6e161c9edcf319$var$getSubConjugationForm(word, entryText);\n        document.getElementById(\"status-text\").innerHTML = `Correct${subConjugationForm != null ? '<span class=\"sub-conjugation-indicator\">(' + subConjugationForm + \")</span>\" : \"\"}<br>${entryText} \\u{25CB}`;\n    } else {\n        document.getElementById(\"verb-box\").style.background = $2b6e161c9edcf319$var$typeToWordBoxColor(word.wordJSON.type);\n        (0, $820877bea407f5fe$export$877ee1ca1de102fd)(document.getElementById(\"verb-box\"), false);\n        $2b6e161c9edcf319$var$changeVerbBoxFontColor(\"white\");\n        document.getElementById(\"verb-type\").textContent = $2b6e161c9edcf319$var$wordTypeToDisplayText(word.wordJSON.type);\n        statusBox.style.background = \"rgb(218, 5, 5)\";\n        // Assuming validAnswers[0] is the hiragana answer\n        document.getElementById(\"status-text\").innerHTML = (entryText == \"\" ? \"_\" : entryText) + \" \\xd7<br>\" + word.conjugation.validAnswers[0] + \" \\u25CB\";\n    }\n}\n// If this valid answer is in a non-standard form worth pointing out to the user,\n// return a string containing that form's name.\n// This applies to conjugation types that allow multiple correct answers for the same question,\n// where the user may enter a correct answer without realizing why it was correct.\nfunction $2b6e161c9edcf319$var$getSubConjugationForm(word, validAnswer) {\n    // const kanjiWord = toKanjiPlusHiragana(word.wordJSON.kanji);\n    // const hiraganaWord = toHiragana(word.wordJSON.kanji);\n    // // Check for potential \"れる\" short form\n    // if (\n    // \tword.conjugation.type === CONJUGATION_TYPES.potential &&\n    // \t(word.wordJSON.type === \"ru\" || kanjiWord === \"来る\")\n    // ) {\n    // \tconst shortFormStems = [];\n    // \tshortFormStems.push(dropFinalLetter(kanjiWord) + \"れ\");\n    // \tif (word.wordJSON.type === \"ru\") {\n    // \t\tshortFormStems.push(dropFinalLetter(hiraganaWord) + \"れ\");\n    // \t} else if (kanjiWord === \"来る\") {\n    // \t\tshortFormStems.push(\"これ\");\n    // \t}\n    // \tif (shortFormStems.some((stem) => validAnswer.startsWith(stem))) {\n    // \t\treturn \"ら-omitted short form\";\n    // \t}\n    // }\n    return null;\n}\nclass $2b6e161c9edcf319$export$bebac4be63daee5b {\n    constructor(score, settings){\n        this.score = score;\n        this.settings = settings;\n    }\n}\n// Array index 0 = verbs, 1 = adjectives\n// Stored in an array instead of object to make parsing faster. Upon reflection this was not worth it.\nfunction $2b6e161c9edcf319$var$initApp() {\n    let wordData = (0, $d3e8101abf179243$export$7530f3eeac5df28);\n    new $2b6e161c9edcf319$var$ConjugationApp([\n        wordData.verbs,\n        wordData.adjectives\n    ]);\n}\nclass $2b6e161c9edcf319$var$ConjugationApp {\n    constructor(words){\n        const mainInput = document.getElementById(\"main-text-input\");\n        (0, $741555d9057b000f$export$2385a24977818dd0)(mainInput);\n        this.initState(words);\n        mainInput.addEventListener(\"keydown\", (e)=>this.inputKeyPress(e));\n        document.getElementById(\"options-button\").addEventListener(\"click\", (e)=>this.settingsButtonClicked(e));\n        document.getElementById(\"options-form\").addEventListener(\"submit\", (e)=>this.backButtonClicked(e));\n        document.getElementById(\"current-streak-text\").addEventListener(\"animationend\", (e)=>{\n            document.getElementById(\"current-streak-text\").classList.remove(e.animationName);\n        });\n        document.getElementById(\"max-streak-text\").addEventListener(\"animationend\", (e)=>{\n            document.getElementById(\"max-streak-text\").classList.remove(e.animationName);\n        });\n        document.getElementById(\"status-box\").addEventListener(\"animationend\", (e)=>{\n            document.getElementById(\"status-box\").classList.remove(e.animationName);\n        });\n        document.getElementById(\"input-tooltip\").addEventListener(\"animationend\", (e)=>{\n            document.getElementById(\"input-tooltip\").classList.remove(e.animationName);\n        });\n        document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n        document.addEventListener(\"touchend\", this.onTouchEnd.bind(this));\n        (0, $68e612a17b33f886$export$41be671a9fdd6b82)();\n    }\n    loadMainView() {\n        this.state.activeScreen = $2b6e161c9edcf319$var$SCREENS.question;\n        document.getElementById(\"main-view\").classList.add(\"question-screen\");\n        document.getElementById(\"main-view\").classList.remove(\"results-screen\");\n        document.getElementById(\"input-tooltip\").classList.remove(\"tooltip-fade-animation\");\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"press-any-key-text\"), true);\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"status-box\"), true);\n        if (this.state.currentStreak0OnReset) {\n            document.getElementById(\"current-streak-text\").textContent = \"0\";\n            this.state.currentStreak0OnReset = false;\n        }\n        if (this.state.loadWordOnReset) {\n            this.state.currentWord = $2b6e161c9edcf319$var$loadNewWord(this.state.currentWordList);\n            this.state.loadWordOnReset = false;\n        }\n        // Furigana and translation may need to be hidden during the question screen\n        (0, $68e612a17b33f886$export$e91dd64c29cc7054)(this.state.settings.furigana, this.state.settings.furiganaTiming === (0, $68e612a17b33f886$export$1a0f0b5f10fa2085).onlyAfterAnswering);\n        (0, $68e612a17b33f886$export$42fe1bab90555082)(this.state.settings.translation, this.state.settings.translationTiming === (0, $68e612a17b33f886$export$1a0f0b5f10fa2085).onlyAfterAnswering);\n        const mainInput = document.getElementById(\"main-text-input\");\n        mainInput.disabled = false;\n        mainInput.value = \"\";\n        if (!$2b6e161c9edcf319$var$isTouch) mainInput.focus();\n    }\n    // Handle generic keydown events that aren't targeting a specific element\n    onKeyDown(e) {\n        let keyCode = e.keyCode ? e.keyCode : e.which;\n        if (this.state.activeScreen === $2b6e161c9edcf319$var$SCREENS.results && keyCode == \"13\" && document.activeElement.id !== \"options-button\") this.loadMainView();\n    }\n    // Handle generic touchend events that aren't targeting a specific element\n    onTouchEnd(e) {\n        if (this.state.activeScreen === $2b6e161c9edcf319$var$SCREENS.results && e.target != document.getElementById(\"options-button\")) this.loadMainView();\n    }\n    inputKeyPress(e) {\n        let keyCode = e.keyCode ? e.keyCode : e.which;\n        if (keyCode == \"13\") {\n            e.stopPropagation();\n            const mainInput = document.getElementById(\"main-text-input\");\n            let inputValue = mainInput.value;\n            // const finalChar = inputValue[inputValue.length - 1];\n            // switch (finalChar) {\n            // \t// Set hanging n to ん\n            // \tcase \"n\":\n            // \t\tinputValue = inputValue.replace(/n$/, \"ん\");\n            // \t\tbreak;\n            // \t// Remove hanging 。\n            // \tcase \"。\":\n            // \t\tinputValue = inputValue.replace(/。$/, \"\");\n            // }\n            // if (!isJapanese(inputValue)) {\n            // \tdocument\n            // \t\t.getElementById(\"input-tooltip\")\n            // \t\t.classList.add(\"tooltip-fade-animation\");\n            // \treturn;\n            // } else {\n            // \tdocument\n            // \t\t.getElementById(\"input-tooltip\")\n            // \t\t.classList.remove(\"tooltip-fade-animation\");\n            // }\n            this.state.activeScreen = $2b6e161c9edcf319$var$SCREENS.results;\n            document.getElementById(\"main-view\").classList.remove(\"question-screen\");\n            document.getElementById(\"main-view\").classList.add(\"results-screen\");\n            mainInput.blur();\n            $2b6e161c9edcf319$var$updateStatusBoxes(this.state.currentWord, inputValue);\n            // If the furigana or translation were made transparent during the question, make them visible now\n            (0, $68e612a17b33f886$export$e91dd64c29cc7054)(this.state.settings.furigana, false);\n            (0, $68e612a17b33f886$export$42fe1bab90555082)(this.state.settings.translation, false);\n            // update probabilities before next word is chosen so don't choose same word\n            const inputWasCorrect = this.state.currentWord.conjugation.validAnswers.some((e)=>e == inputValue);\n            $2b6e161c9edcf319$var$updateProbabilites(this.state.currentWordList, this.state.wordsRecentlySeenQueue, this.state.currentWord, inputWasCorrect);\n            if (inputWasCorrect) {\n                $2b6e161c9edcf319$var$addToScore(1, this.state.maxScoreObjects, this.state.maxScoreIndex);\n                this.state.currentStreak0OnReset = false;\n            } else this.state.currentStreak0OnReset = true;\n            this.state.loadWordOnReset = true;\n            mainInput.disabled = true;\n            (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"press-any-key-text\"), false);\n            mainInput.value = \"\";\n        }\n    }\n    settingsButtonClicked(e) {\n        this.state.activeScreen = $2b6e161c9edcf319$var$SCREENS.settings;\n        (0, $68e612a17b33f886$export$b8407eada850d56b)(this.state.settings);\n        (0, $68e612a17b33f886$export$f1d3883d7bdbc350)();\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"main-view\"), true);\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"options-view\"), false);\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"donation-section\"), false);\n    }\n    backButtonClicked(e) {\n        e.preventDefault();\n        (0, $68e612a17b33f886$export$484e1e7497eb0732)(this.state.settings);\n        localStorage.setItem(\"settings\", JSON.stringify(this.state.settings));\n        const visibleConjugationSettings = (0, $68e612a17b33f886$export$f35d7c2709d46536)();\n        let newMaxScoreIndex = (0, $68e612a17b33f886$export$30675527ad91ffe6)(this.state.maxScoreObjects, visibleConjugationSettings);\n        if (newMaxScoreIndex === -1) {\n            this.state.maxScoreObjects.push(new $2b6e161c9edcf319$export$bebac4be63daee5b(0, visibleConjugationSettings));\n            localStorage.setItem(\"maxScoreObjects\", JSON.stringify(this.state.maxScoreObjects));\n            newMaxScoreIndex = this.state.maxScoreObjects.length - 1;\n        }\n        if (newMaxScoreIndex !== this.state.maxScoreIndex) {\n            localStorage.setItem(\"maxScoreIndex\", newMaxScoreIndex);\n            this.state.maxScoreIndex = newMaxScoreIndex;\n            this.state.currentStreak0OnReset = true;\n            this.state.loadWordOnReset = true;\n            this.applySettingsUpdateWordList();\n        // Note that the wordsRecentlySeenQueue is not cleared.\n        // This is intentional, so if the new word list happens to include the words you recently missed,\n        // they still have the chance of appearing again in a couple of rounds to retry.\n        // If currentWordList doesn't contain those words in the queue, they won't be chosen anyways so the queue probability logic silenty fails.\n        } else // If none of the conjugation settings were changed, don't reload the word list or reset the probabilities\n        (0, $68e612a17b33f886$export$7b52e59d7da90ebe)(this.state.settings);\n        document.getElementById(\"max-streak-text\").textContent = this.state.maxScoreObjects[this.state.maxScoreIndex].score;\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"main-view\"), false);\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"options-view\"), true);\n        (0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"donation-section\"), true);\n        this.loadMainView();\n    }\n    initState(words) {\n        this.state = {};\n        this.state.completeWordList = $2b6e161c9edcf319$var$createWordList(words);\n        if (!localStorage.getItem(\"maxScoreObjects\") || !localStorage.getItem(\"maxScoreIndex\") || !localStorage.getItem(\"settings\")) {\n            this.state.maxScoreIndex = 0;\n            localStorage.setItem(\"maxScoreIndex\", this.state.maxScoreIndex);\n            this.state.settings = (0, $68e612a17b33f886$export$f598fee9a8761f8f)();\n            localStorage.setItem(\"settings\", JSON.stringify(this.state.settings));\n            this.state.maxScoreObjects = [\n                new $2b6e161c9edcf319$export$bebac4be63daee5b(0, (0, $68e612a17b33f886$export$d04e1a4f8a41f042)(this.state.settings))\n            ];\n            localStorage.setItem(\"maxScoreObjects\", JSON.stringify(this.state.maxScoreObjects));\n        } else {\n            this.state.maxScoreIndex = parseInt(localStorage.getItem(\"maxScoreIndex\"));\n            this.state.settings = Object.assign((0, $68e612a17b33f886$export$100e28ec40f7f33c)(), JSON.parse(localStorage.getItem(\"settings\")));\n            this.state.maxScoreObjects = JSON.parse(localStorage.getItem(\"maxScoreObjects\"));\n        }\n        this.applySettingsUpdateWordList();\n        this.state.currentWord = $2b6e161c9edcf319$var$loadNewWord(this.state.currentWordList);\n        this.state.wordsRecentlySeenQueue = [];\n        this.state.currentStreak0OnReset = false;\n        this.state.loadWordOnReset = false;\n        document.getElementById(\"max-streak-text\").textContent = this.state.maxScoreObjects[this.state.maxScoreIndex].score;\n        this.loadMainView();\n    }\n    applySettingsUpdateWordList() {\n        const filteredWords = (0, $68e612a17b33f886$export$9ad811eb0029a5fe)(this.state.settings, this.state.completeWordList);\n        $2b6e161c9edcf319$var$equalizeProbabilities(filteredWords);\n        this.state.currentWordList = filteredWords;\n    }\n}\n$2b6e161c9edcf319$var$initApp();\n// Keeping the top container hidden at the beginning prevents 1 frame of malformed UI being shown\n(0, $820877bea407f5fe$export$ef83af2c8dc2c683)(document.getElementById(\"toppest-container\"), false);\nif (!$2b6e161c9edcf319$var$isTouch) document.getElementById(\"main-text-input\").focus();\n\n\n//# sourceMappingURL=index.549ccfa0.js.map\n","// vim: set ts=4 sw=4 expandtab\n// (C) 2010 Dan Bravender - licensed under the AGPL 3.0\n\n/*  Geulja is used to track modifications that have been made to\n    characters. Currently, it keeps track of characters' original\n    padchims (for ㄷ -> ㄹ irregulars) and if the character has\n    no padchim but should be treated as if it does (for ㅅ\n    irregulars). When substrings are extracted the Geulja class\n    keeps these markers for the last character only.\n*/\n\nexport function Geulja(__value__) {\n    this.__value__ = __value__ || \"\";\n    this._length = this.__value__.length; // Use a different property name for length\n    this.hidden_padchim = false;\n    this.original_padchim = null;\n\n    this.charAt = function () {\n        let result = String.prototype.charAt.apply(this, arguments);\n        if (arguments[0] == this._length - 1) { // Use _length here\n            result = new Geulja(result);\n            result.original_padchim = this.original_padchim;\n            result.hidden_padchim = this.hidden_padchim;\n        }\n        return result;\n    };\n}\n\n// with(Geulja.prototype = new String) {\n//     toString = valueOf = function() {\n//         return this.__value__\n//     };\n// }\n\nGeulja.prototype = new String();\n\n// Assign the methods directly to Geulja.prototype\nGeulja.prototype.toString = Geulja.prototype.valueOf = function () {\n    return this.__value__;\n};\n\n\nexport var hangeul = {};\n\nhangeul.Geulja = Geulja;\nhangeul.is_hangeul = function (character) {\n    if (character.charCodeAt(0) >= '가'.charCodeAt(0) &&\n        character.charCodeAt(0) <= '힣'.charCodeAt(0)) {\n        return true;\n    }\n    return false;\n};\n// Equations lifted directly from:\n// http://www.kfunigraz.ac.at/~katzer/korean_hangul_unicode.html\nhangeul.lead = function (character) {\n    return String.fromCharCode((Math.floor(character.charCodeAt(0) - 44032) / 588) + 4352);\n};\nhangeul.vowel = function (character) {\n    let padchim_character = hangeul.padchim(character);\n    let padchim_offset;\n    if (!padchim_character || padchim_character == true) {\n        padchim_offset = -1;\n    } else {\n        padchim_offset = padchim_character.charCodeAt(0) - 'ᆨ'.charCodeAt(0);\n    }\n    return String.fromCharCode(Math.floor(((character.charCodeAt(0) - 44032 - padchim_offset) % 588) / 28) + 'ㅏ'.charCodeAt(0));\n};\nhangeul.padchim = function (character) {\n    if (character.hidden_padchim) {\n        return true;\n    }\n    if (character.original_padchim) {\n        return character.original_padchim;\n    }\n    let p = String.fromCharCode(((character.charCodeAt(0) - 44032) % 28) + 'ᆨ'.charCodeAt(0) - 1)\n    if (p.charCodeAt(0) == 4519) {\n        return null;\n    } else {\n        return p;\n    }\n};\nhangeul.join = function (lead, vowel, padchim) {\n    let lead_offset = lead.charCodeAt(0) - 'ᄀ'.charCodeAt(0);\n    let vowel_offset = vowel.charCodeAt(0) - 'ㅏ'.charCodeAt(0);\n    let padchim_offset;\n    if (padchim) {\n        padchim_offset = padchim.charCodeAt(0) - 'ᆨ'.charCodeAt(0);\n    } else {\n        padchim_offset = -1;\n    }\n    return String.fromCharCode(padchim_offset + (vowel_offset) * 28 + (lead_offset) * 588 + 44032 + 1);\n};\nhangeul.find_vowel_to_append = function (string) {\n    self = hangeul;\n    let append = null;\n    string.split('').reverse().forEach(function (character) {\n        if (character in { '뜨': true, '쓰': true, '트': true }) {\n            if (!append) append = '어';\n        }\n        if (self.vowel(character) == 'ㅡ' && !self.padchim(character)) {\n            //continue\n        } else if (self.vowel(character) in { 'ㅗ': true, 'ㅏ': true, 'ㅑ': true }) {\n            if (!append) append = '아';\n        } else {\n            if (!append) append = '어';\n        }\n    });\n    if (!append) append = '어';\n    return append;\n};\nhangeul.match = function (character, l, v, p) {\n    return (l == '*' || this.lead(character) == l) &&\n        (v == '*' || this.vowel(character) == v) &&\n        (p == '*' || this.padchim(character) == p)\n};\n\n\n\n\n// export var hangeul = (() => {\n//     this.Geulja = Geulja;\n//     this.is_hangeul = function (character) {\n//         if (character.charCodeAt(0) >= '가'.charCodeAt(0) &&\n//             character.charCodeAt(0) <= '힣'.charCodeAt(0)) {\n//             return true;\n//         }\n//         return false;\n//     };\n//     // Equations lifted directly from:\n//     // http://www.kfunigraz.ac.at/~katzer/korean_hangul_unicode.html\n//     this.lead = function (character) {\n//         return String.fromCharCode((Math.floor(character.charCodeAt(0) - 44032) / 588) + 4352);\n//     };\n//     this.vowel = function (character) {\n//         padchim_character = this.padchim(character);\n//         if (!padchim_character || padchim_character == true) {\n//             padchim_offset = -1;\n//         } else {\n//             padchim_offset = padchim_character.charCodeAt(0) - 'ᆨ'.charCodeAt(0);\n//         }\n//         return String.fromCharCode(Math.floor(((character.charCodeAt(0) - 44032 - padchim_offset) % 588) / 28) + 'ㅏ'.charCodeAt(0));\n//     };\n//     this.padchim = function (character) {\n//         if (character.hidden_padchim) {\n//             return true;\n//         }\n//         if (character.original_padchim) {\n//             return character.original_padchim;\n//         }\n//         p = String.fromCharCode(((character.charCodeAt(0) - 44032) % 28) + 'ᆨ'.charCodeAt(0) - 1)\n//         if (p.charCodeAt(0) == 4519) {\n//             return null;\n//         } else {\n//             return p;\n//         }\n//     };\n//     this.join = function (lead, vowel, padchim) {\n//         lead_offset = lead.charCodeAt(0) - 'ᄀ'.charCodeAt(0);\n//         vowel_offset = vowel.charCodeAt(0) - 'ㅏ'.charCodeAt(0);\n//         if (padchim) {\n//             padchim_offset = padchim.charCodeAt(0) - 'ᆨ'.charCodeAt(0);\n//         } else {\n//             padchim_offset = -1;\n//         }\n//         return String.fromCharCode(padchim_offset + (vowel_offset) * 28 + (lead_offset) * 588 + 44032 + 1);\n//     };\n//     this.find_vowel_to_append = function (string) {\n//         self = this;\n//         append = null;\n//         string.split('').reverse().forEach(function (character) {\n//             if (character in { '뜨': true, '쓰': true, '트': true }) {\n//                 if (!append) append = '어';\n//             }\n//             if (self.vowel(character) == 'ㅡ' && !self.padchim(character)) {\n//                 //continue\n//             } else if (self.vowel(character) in { 'ㅗ': true, 'ㅏ': true, 'ㅑ': true }) {\n//                 if (!append) append = '아';\n//             } else {\n//                 if (!append) append = '어';\n//             }\n//         });\n//         if (!append) append = '어';\n//         return append;\n//     };\n//     this.match = function (character, l, v, p) {\n//         return (l == '*' || this.lead(character) == l) &&\n//             (v == '*' || this.vowel(character) == v) &&\n//             (p == '*' || this.padchim(character) == p)\n//     };\n//     return this;\n// })();\n\n// Export functions to node\ntry {\n    for (f in hangeul) {\n        exports[f] = hangeul[f];\n    }\n} catch (e) {\n}\n","// since the weights are mostly only used to make things repeat after x amount of rounds, they are overkill\n// would be less work to just wait x rounds and immeditely show what you missed, without updating any weights.\n\"use strict\";\nimport { bind, isJapanese } from \"wanakana\";\nimport {\n\tCONDITIONAL_UI_TIMINGS,\n\tgetDefaultSettings,\n\tgetVisibleConjugationSettings,\n\tremoveNonConjugationSettings,\n\tshowFurigana,\n\tshowTranslation,\n\tfindMaxScoreIndex,\n\tapplyAllSettingsFilterWords,\n\tapplyNonConjugationSettings,\n\n\toptionsMenuInit,\n\tselectCheckboxesInUi,\n\tshowHideOptionsAndCheckErrors,\n\tinsertSettingsFromUi,\n\tgetDefaultAdditiveSettings,\n} from \"./settingManagement.js\";\nimport { japaneseWordData, koreanWordData, fullWordData } from \"./worddata.js\";\nimport { CONJUGATION_TYPES, PARTS_OF_SPEECH } from \"./wordEnums.js\";\nimport {\n\ttoggleDisplayNone,\n\tcreateArrayOfArrays,\n\ttoggleBackgroundNone,\n} from \"./utils.js\";\n\nimport { conjugator_functions } from \"./conjugation/conjugator.js\";\n\nconst isTouch = \"ontouchstart\" in window || navigator.msMaxTouchPoints > 0;\ndocument.getElementById(\"press-any-key-text\").textContent = isTouch\n\t? \"Tap to continue\"\n\t: \"Press Enter/Return to continue\";\n\n// Stored in state.activeScreen\nconst SCREENS = Object.freeze({\n\tquestion: 0,\n\t// Incorrect and correct answers are considered the same \"results\" screen\n\tresults: 1,\n\tsettings: 2,\n});\n\nfunction wordTypeToDisplayText(type) {\n\tif (type == \"u\") {\n\t\treturn \"う-verb\";\n\t} else if (type == \"ru\") {\n\t\treturn \"る-verb\";\n\t} else if (type == \"irv\" || type == \"ira\") {\n\t\treturn \"Irregular\";\n\t} else if (type == \"i\") {\n\t\treturn \"い-adjective\";\n\t} else if (type == \"na\") {\n\t\treturn \"な-adjective\";\n\t}\n}\n\nfunction conjugationInqueryFormatting(conjugation) {\n\tlet newString = \"\";\n\n\tfunction createInqueryText(text, emoji) {\n\t\treturn `<div class=\"conjugation-inquery\"><div class=\"inquery-emoji\">${emoji}</div><div class=\"inquery-text\">${text}</div></div> `;\n\t}\n\n\tif (conjugation.type === CONJUGATION_TYPES.past) {\n\t\tnewString += createInqueryText(CONJUGATION_TYPES.past, \"⌚\");\n\t} else if (\n\t\tconjugation.type === CONJUGATION_TYPES.te ||\n\t\tconjugation.type === CONJUGATION_TYPES.adverb\n\t) {\n\t\tnewString += conjugation.type;\n\t} else if (conjugation.type === CONJUGATION_TYPES.volitional) {\n\t\tnewString += createInqueryText(CONJUGATION_TYPES.volitional, \"🍻\");\n\t} else if (conjugation.type === CONJUGATION_TYPES.passive) {\n\t\tnewString += createInqueryText(CONJUGATION_TYPES.passive, \"🧘\");\n\t} else if (conjugation.type === CONJUGATION_TYPES.causative) {\n\t\tnewString += createInqueryText(CONJUGATION_TYPES.causative, \"👩‍🏫\");\n\t} else if (conjugation.type === CONJUGATION_TYPES.potential) {\n\t\tnewString += createInqueryText(CONJUGATION_TYPES.potential, \"‍🏋\");\n\t} else if (conjugation.type === CONJUGATION_TYPES.imperative) {\n\t\tnewString += createInqueryText(CONJUGATION_TYPES.imperative, \"📢\");\n\t}\n\n\t// This used to also add \"Affirmative\" text when affirmative was true, but it was a little redundant.\n\t// Now it only adds \"Negative\" text when affirmative is false.\n\t// if (conjugation.affirmative === false) {\n\t// \tnewString += createInqueryText(\"Negative\", \"🚫\");\n\t// } else {\n\t// \tnewString += createInqueryText(\"Affirmative\", \"✅\");\n\t// }\n\n\tif (conjugation.formal === true) {\n\t\tnewString += createInqueryText(\"Formal\", \"👔\");\n\t} else if (conjugation.formal === false) {\n\t\tnewString += createInqueryText(\"Informal\", \"👪\");\n\t}\n\n\tif (conjugation.polite === true) {\n\t\tnewString += createInqueryText(\"Polite\", \"👔\");\n\t} else if (conjugation.polite === false) {\n\t\tnewString += createInqueryText(\"Impolite\", \"👪\");\n\t}\n\n\tif (conjugation.polite === false && conjugation.formal == false) {\n\t\tnewString += createInqueryText(\"(Casual)\", \"\")\n\t}\n\n\treturn newString;\n}\n\nfunction changeVerbBoxFontColor(color) {\n\tlet ps = document.getElementById(\"verb-box\").getElementsByTagName(\"p\");\n\tfor (let p of Array.from(ps)) {\n\t\tp.style.color = color;\n\t}\n}\n\nfunction loadNewWord(wordList) {\n\tlet word = pickRandomWord(wordList);\n\tupdateCurrentWord(word);\n\tchangeVerbBoxFontColor(\"rgb(244, 226, 197)\");\n\treturn word;\n}\n\nfunction updateCurrentWord(word) {\n\t// Caution: verb-box is controlled using a combination of the background-none class and setting style.background directly.\n\t// The background-none class is useful for other CSS selectors to grab onto,\n\t// while the style.background is useful for setting variable bg colors.\n\ttoggleBackgroundNone(document.getElementById(\"verb-box\"), true);\n\t// The <rt> element had different padding on different browsers.\n\t// Rather than attacking it with CSS, just replace it with a span we have control over.\n\tconst verbHtml = word.wordJSON.hangeul\n\t\t.replaceAll(\"<rt>\", '<span class=\"rt\">')\n\t\t.replaceAll(\"</rt>\", \"</span>\");\n\tdocument.getElementById(\"verb-text\").innerHTML = verbHtml;\n\tdocument.getElementById(\"translation\").textContent = word.wordJSON.eng;\n\t// Set verb-type to a non-breaking space to preserve vertical height\n\tdocument.getElementById(\"verb-type\").textContent = \"\\u00A0\";\n\tdocument.getElementById(\"conjugation-inquery-text\").innerHTML =\n\t\tconjugationInqueryFormatting(word.conjugation);\n}\n\n\nfunction extractKoreanCharacters(text) {\n    // Use a regex to match only Korean Hangul characters (Unicode range \\uAC00-\\uD7A3)\n    return text.replace(/[^\\uAC00-\\uD7A3]/g, '');\n}\n\nfunction getNegation(word) {\n\treturn word.slice(0, -1) + \"지 않다\"\n}\n\nfunction getKoreanConjugation(word, mood, tense, formality, politeness) {\n\tlet conjugator_function = conjugator_functions[mood][tense][formality][politeness];\n\tconst conjugation = conjugator_function(word);\n\t\n\tlet type;\n\tif (tense == \"present\") {\n\t\ttype = CONJUGATION_TYPES.present;\n\t} else {\n\t\ttype = CONJUGATION_TYPES.past;\n\t}\n\n\treturn new Conjugation(\n\t\t[conjugation],\n\t\ttype,\n\t\ttrue,\n\t\t(formality == \"formal\"),\n\t\t(politeness == \"polite\")\n\t);\n}\n\nfunction getAllKoreanConjugations(wordJSON) {\n\tconst allConjugations = [];\n\tconst word = extractKoreanCharacters(wordJSON.hangeul)\n\n\tconst moods = [\"declarative\"];\n\tconst tenses = [\"present\", \"past\"]\n\tconst formalities = [\"informal\", \"formal\"]\n\tconst politeness = [\"plain\", \"polite\"]\n\n\tfor (const mood of moods) {\n\t\tfor (const tense of tenses) {\n\t\t\tfor (const formal of formalities) {\n\t\t\t\tfor (const polite of politeness) {\n\t\t\t\t\tallConjugations.push(\n\t\t\t\t\t\tgetKoreanConjugation(\n\t\t\t\t\t\t\tword,\n\t\t\t\t\t\t\tmood,\n\t\t\t\t\t\t\ttense,\n\t\t\t\t\t\t\tformal,\n\t\t\t\t\t\t\tpolite\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn allConjugations.flat();\n}\n\nclass Conjugation {\n\t// conjugationType is CONJUGATION_TYPES enum\n\tconstructor(validAnswers, conjugationType, affirmative, formal, polite) {\n\t\tthis.validAnswers = validAnswers;\n\t\tthis.type = conjugationType;\n\t\tthis.affirmative = affirmative;\n\t\tthis.formal = formal;\n\t\tthis.polite = polite\n\t}\n}\n\nclass Word {\n\t// conjugation is Conjugation class object\n\tconstructor(wordJSON, conjugation) {\n\t\tthis.wordJSON = wordJSON;\n\t\tthis.conjugation = conjugation;\n\n\t\t// Probability is updated directly by external functions\n\t\tthis.probability = 0;\n\t\t// wasRecentlyIncorrect is used when calculating probability\n\t\tthis.wasRecentlyIncorrect = false;\n\t}\n}\n\nclass WordRecentlySeen {\n\tconstructor(word, wasCorrect) {\n\t\tthis.word = word;\n\t\tthis.wasCorrect = wasCorrect;\n\t}\n}\n\nfunction findMinProb(currentWords) {\n\tlet min = 2;\n\tfor (let i = 0; i < currentWords.length; i++) {\n\t\tfor (let j = 0; j < currentWords[i].length; j++) {\n\t\t\tmin =\n\t\t\t\tcurrentWords[i][j].probability < min &&\n\t\t\t\tcurrentWords[i][j].probability != 0\n\t\t\t\t\t? currentWords[i][j].probability\n\t\t\t\t\t: min;\n\t\t}\n\t}\n\treturn min;\n}\n\nfunction findMaxProb(currentWords) {\n\tlet max = 0;\n\tfor (let i = 0; i < currentWords.length; i++) {\n\t\tfor (let j = 0; j < currentWords[i].length; j++) {\n\t\t\tmax =\n\t\t\t\tcurrentWords[i][j].probability > max\n\t\t\t\t\t? currentWords[i][j].probability\n\t\t\t\t\t: max;\n\t\t}\n\t}\n\treturn max;\n}\n\nfunction normalizeProbabilities(currentWords) {\n\tlet totalProbability = 0;\n\t// get total of probabilities\n\tfor (let i = 0; i < currentWords.length; i++) {\n\t\tfor (let j = 0; j < currentWords[i].length; j++) {\n\t\t\ttotalProbability += currentWords[i][j].probability;\n\t\t}\n\t}\n\n\t// normalize\n\tfor (let i = 0; i < currentWords.length; i++) {\n\t\tfor (let j = 0; j < currentWords[i].length; j++) {\n\t\t\tcurrentWords[i][j].probability /= totalProbability;\n\t\t}\n\t}\n}\n\nfunction setAllProbabilitiesToValue(currentWords, value) {\n\tfor (let i = 0; i < currentWords.length; i++) {\n\t\tfor (let j = 0; j < currentWords[i].length; j++) {\n\t\t\tcurrentWords[i][j].probability = value;\n\t\t}\n\t}\n}\n\n// Sets all of the probabilities to the same normalized value\nfunction equalizeProbabilities(currentWords) {\n\tsetAllProbabilitiesToValue(currentWords, 1);\n\n\t// Now that all of the probabilities are equal,\n\t// normalize them so together they all add up to 1.\n\tnormalizeProbabilities(currentWords);\n}\n\nfunction updateProbabilites(\n\tcurrentWords,\n\twordsRecentlySeenQueue,\n\tcurrentWord,\n\tcurrentWordWasCorrect\n) {\n\tconst roundsToWait = 2;\n\n\t// If the number of current verb + adjective conjugations is less than roundsToWait + 1,\n\t// the pool of conjugations is too small for our wordsRecentlySeenQueue to work.\n\tif (currentWords[0].length + currentWords[1].length < roundsToWait + 1) {\n\t\t// Set all probabilities except the current word to be equal to avoid getting the same question twice\n\t\tsetAllProbabilitiesToValue(currentWords, 1);\n\t\tcurrentWord.probability = 0;\n\t\tnormalizeProbabilities(currentWords);\n\t\treturn;\n\t}\n\n\t// Lower probability of running into words in the same group\n\tif (currentWord.wordJSON.group) {\n\t\tconst currentConjugation = currentWord.conjugation;\n\t\tconst group = currentWord.wordJSON.group;\n\n\t\tcurrentWords[\n\t\t\tgetPartOfSpeech(currentWord.wordJSON) === PARTS_OF_SPEECH.verb ? 0 : 1\n\t\t]\n\t\t\t.filter((word) => {\n\t\t\t\tconst conjugation = word.conjugation;\n\t\t\t\t// Only alter probabilities of the exact same conjugation for other words in the group\n\t\t\t\treturn (\n\t\t\t\t\tword.wordJSON.group === group &&\n\t\t\t\t\tword !== currentWord &&\n\t\t\t\t\tconjugation.type === currentConjugation.type &&\n\t\t\t\t\tconjugation.affirmative === currentConjugation.affirmative &&\n\t\t\t\t\tconjugation.polite === currentConjugation.polite\n\t\t\t\t);\n\t\t\t})\n\t\t\t.forEach((word) => {\n\t\t\t\t// Have to be careful with lowering this too much, because it can affect findMinProb for other conjugations.\n\t\t\t\t// Also, lowering it by a lot will make all of these words appear in a cluster after all the other words have been seen.\n\t\t\t\t// Note that this is happening whether currentWordWasCorrect is true or false,\n\t\t\t\t// so if someone got currentWord wrong many times it would tank the probabilities in this forEach over time.\n\t\t\t\tword.probability /= 3;\n\t\t\t});\n\t}\n\n\t// We wait \"roundsToWait\" rounds to set the probability of questions.\n\t// This allows us to have a few rounds immediately after a question where it's guaranteed to not appear again,\n\t// followed by the ability to set a high probability for the question to show up immediately after that waiting period (if the answer was incorrect).\n\tif (wordsRecentlySeenQueue.length >= roundsToWait) {\n\t\tlet dequeuedWord = wordsRecentlySeenQueue.shift();\n\t\t// Using findMinProb isn't a good solution because if you get one correct it's going to shrink the min prob a lot and affect future questions you get right or wrong.\n\t\t// In the future there should probably be a static probability given to corrects, incorrects, and unseens, where that probability slowly grows the longer the word hasn't been seen.\n\t\tlet currentMinProb = findMinProb(currentWords);\n\t\tconst correctProbModifier = 0.5;\n\t\tconst incorrectProbModifier = 0.85;\n\n\t\tlet newProbability;\n\n\t\tif (dequeuedWord.wasCorrect && !dequeuedWord.word.wasRecentlyIncorrect) {\n\t\t\tnewProbability = currentMinProb * correctProbModifier;\n\t\t} else if (\n\t\t\tdequeuedWord.wasCorrect &&\n\t\t\tdequeuedWord.word.wasRecentlyIncorrect\n\t\t) {\n\t\t\tnewProbability = currentMinProb * incorrectProbModifier;\n\t\t\tdequeuedWord.word.wasRecentlyIncorrect = false;\n\t\t} else if (!dequeuedWord.wasCorrect) {\n\t\t\t// Set to an arbitrary high number to (nearly) guarantee this question is asked next.\n\t\t\tnewProbability = 10;\n\t\t}\n\n\t\tdequeuedWord.word.probability = newProbability;\n\t}\n\n\t// Keep track of misses so when the user finally gets it right,\n\t// we can still give it a higher probability of appearing again than\n\t// questions they got right on the first try.\n\tif (!currentWordWasCorrect) {\n\t\tcurrentWord.wasRecentlyIncorrect = true;\n\t}\n\n\twordsRecentlySeenQueue.push(\n\t\tnew WordRecentlySeen(currentWord, currentWordWasCorrect)\n\t);\n\t// Make sure the user will not see the current question until at least \"roundsToWait\" number of rounds\n\tcurrentWord.probability = 0;\n\n\tnormalizeProbabilities(currentWords);\n}\n\n// returns 2D array [verbarray, adjarray]\nfunction createWordList(JSONWords) {\n\tlet wordList = createArrayOfArrays(JSONWords.length);\n\n\tfor (let i = 0; i < JSONWords.length; i++) {\n\t\tfor (let j = 0; j < JSONWords[i].length; j++) {\n\t\t\tlet conjugations = getAllKoreanConjugations(JSONWords[i][j]);\n\t\t\tfor (let k = 0; k < conjugations.length; k++) {\n\t\t\t\twordList[i].push(new Word(JSONWords[i][j], conjugations[k]));\n\t\t\t}\n\t\t}\n\t}\n\treturn wordList;\n}\n\nfunction pickRandomWord(wordList) {\n\tlet random = Math.random();\n\n\ttry {\n\t\tfor (let i = 0; i < wordList.length; i++) {\n\t\t\tfor (let j = 0; j < wordList[i].length; j++) {\n\t\t\t\tif (random < wordList[i][j].probability) {\n\t\t\t\t\treturn wordList[i][j];\n\t\t\t\t}\n\t\t\t\tconsole.log(random)\n\t\t\t\trandom -= wordList[i][j].probability;\n\t\t\t}\n\t\t}\n\t\tthrow \"no random word chosen\";\n\t} catch (err) {\n\t\tconsole.error(err);\n\t\treturn wordList[0][0];\n\t}\n}\n\nfunction addToScore(amount = 1, maxScoreObjects, maxScoreIndex) {\n\tif (amount == 0) {\n\t\treturn;\n\t}\n\tlet max = document.getElementById(\"max-streak-text\");\n\tlet current = document.getElementById(\"current-streak-text\");\n\n\tif (parseInt(max.textContent) <= parseInt(current.textContent)) {\n\t\tlet newAmount = parseInt(max.textContent) + amount;\n\t\tmax.textContent = newAmount;\n\t\tif (\n\t\t\t!document\n\t\t\t\t.getElementById(\"max-streak\")\n\t\t\t\t.classList.contains(\"display-none\")\n\t\t) {\n\t\t\tmax.classList.add(\"grow-animation\");\n\t\t}\n\n\t\tmaxScoreObjects[maxScoreIndex].score = newAmount;\n\t\tlocalStorage.setItem(\"maxScoreObjects\", JSON.stringify(maxScoreObjects));\n\t}\n\n\tcurrent.textContent = parseInt(current.textContent) + amount;\n\tif (\n\t\t!document\n\t\t\t.getElementById(\"current-streak\")\n\t\t\t.classList.contains(\"display-none\")\n\t) {\n\t\tcurrent.classList.add(\"grow-animation\");\n\t}\n}\n\nfunction typeToWordBoxColor(type) {\n\tswitch (type) {\n\t\tcase \"u\":\n\t\t\treturn \"rgb(255, 125, 0)\";\n\t\tcase \"ru\":\n\t\t\treturn \"rgb(5, 80, 245)\";\n\t\tcase \"irv\":\n\t\t\treturn \"gray\";\n\t\tcase \"ira\":\n\t\t\treturn \"gray\";\n\t\tcase \"i\":\n\t\t\treturn \"rgb(0, 180, 240)\";\n\t\tcase \"na\":\n\t\t\treturn \"rgb(143, 73, 40)\";\n\t}\n}\n\nfunction updateStatusBoxes(word, entryText) {\n\tlet statusBox = document.getElementById(\"status-box\");\n\ttoggleDisplayNone(statusBox, false);\n\n\tif (word.conjugation.validAnswers.some((e) => e == entryText)) {\n\t\tstatusBox.style.background = \"green\";\n\t\tconst subConjugationForm = getSubConjugationForm(word, entryText);\n\t\tdocument.getElementById(\"status-text\").innerHTML = `Correct${\n\t\t\tsubConjugationForm != null\n\t\t\t\t? '<span class=\"sub-conjugation-indicator\">(' +\n\t\t\t\t  subConjugationForm +\n\t\t\t\t  \")</span>\"\n\t\t\t\t: \"\"\n\t\t}<br>${entryText} ○`;\n\t} else {\n\t\tdocument.getElementById(\"verb-box\").style.background = typeToWordBoxColor(\n\t\t\tword.wordJSON.type\n\t\t);\n\t\ttoggleBackgroundNone(document.getElementById(\"verb-box\"), false);\n\t\tchangeVerbBoxFontColor(\"white\");\n\t\tdocument.getElementById(\"verb-type\").textContent = wordTypeToDisplayText(\n\t\t\tword.wordJSON.type\n\t\t);\n\n\t\tstatusBox.style.background = \"rgb(218, 5, 5)\";\n\t\t// Assuming validAnswers[0] is the hiragana answer\n\t\tdocument.getElementById(\"status-text\").innerHTML =\n\t\t\t(entryText == \"\" ? \"_\" : entryText) +\n\t\t\t\" ×<br>\" +\n\t\t\tword.conjugation.validAnswers[0] +\n\t\t\t\" ○\";\n\t}\n}\n\n// If this valid answer is in a non-standard form worth pointing out to the user,\n// return a string containing that form's name.\n// This applies to conjugation types that allow multiple correct answers for the same question,\n// where the user may enter a correct answer without realizing why it was correct.\nfunction getSubConjugationForm(word, validAnswer) {\n\t// const kanjiWord = toKanjiPlusHiragana(word.wordJSON.kanji);\n\t// const hiraganaWord = toHiragana(word.wordJSON.kanji);\n\n\t// // Check for potential \"れる\" short form\n\t// if (\n\t// \tword.conjugation.type === CONJUGATION_TYPES.potential &&\n\t// \t(word.wordJSON.type === \"ru\" || kanjiWord === \"来る\")\n\t// ) {\n\t// \tconst shortFormStems = [];\n\n\t// \tshortFormStems.push(dropFinalLetter(kanjiWord) + \"れ\");\n\t// \tif (word.wordJSON.type === \"ru\") {\n\t// \t\tshortFormStems.push(dropFinalLetter(hiraganaWord) + \"れ\");\n\t// \t} else if (kanjiWord === \"来る\") {\n\t// \t\tshortFormStems.push(\"これ\");\n\t// \t}\n\n\t// \tif (shortFormStems.some((stem) => validAnswer.startsWith(stem))) {\n\t// \t\treturn \"ら-omitted short form\";\n\t// \t}\n\t// }\n\n\treturn null;\n}\n\n// stored in array in local storage\nexport class MaxScoreObject {\n\tconstructor(score, settings) {\n\t\tthis.score = score;\n\t\tthis.settings = settings;\n\t}\n}\n\n// Array index 0 = verbs, 1 = adjectives\n// Stored in an array instead of object to make parsing faster. Upon reflection this was not worth it.\nfunction initApp() {\n\tlet wordData = koreanWordData;\n\tnew ConjugationApp([wordData.verbs, wordData.adjectives]);\n}\n\nclass ConjugationApp {\n\tconstructor(words) {\n\t\tconst mainInput = document.getElementById(\"main-text-input\");\n\t\tbind(mainInput);\n\n\t\tthis.initState(words);\n\n\t\tmainInput.addEventListener(\"keydown\", (e) => this.inputKeyPress(e));\n\t\tdocument\n\t\t\t.getElementById(\"options-button\")\n\t\t\t.addEventListener(\"click\", (e) => this.settingsButtonClicked(e));\n\t\tdocument\n\t\t\t.getElementById(\"options-form\")\n\t\t\t.addEventListener(\"submit\", (e) => this.backButtonClicked(e));\n\n\t\tdocument\n\t\t\t.getElementById(\"current-streak-text\")\n\t\t\t.addEventListener(\"animationend\", (e) => {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"current-streak-text\")\n\t\t\t\t\t.classList.remove(e.animationName);\n\t\t\t});\n\t\tdocument\n\t\t\t.getElementById(\"max-streak-text\")\n\t\t\t.addEventListener(\"animationend\", (e) => {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"max-streak-text\")\n\t\t\t\t\t.classList.remove(e.animationName);\n\t\t\t});\n\n\t\tdocument\n\t\t\t.getElementById(\"status-box\")\n\t\t\t.addEventListener(\"animationend\", (e) => {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"status-box\")\n\t\t\t\t\t.classList.remove(e.animationName);\n\t\t\t});\n\n\t\tdocument\n\t\t\t.getElementById(\"input-tooltip\")\n\t\t\t.addEventListener(\"animationend\", (e) => {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"input-tooltip\")\n\t\t\t\t\t.classList.remove(e.animationName);\n\t\t\t});\n\n\t\tdocument.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n\t\tdocument.addEventListener(\"touchend\", this.onTouchEnd.bind(this));\n\n\t\toptionsMenuInit();\n\t}\n\n\tloadMainView() {\n\t\tthis.state.activeScreen = SCREENS.question;\n\t\tdocument.getElementById(\"main-view\").classList.add(\"question-screen\");\n\t\tdocument.getElementById(\"main-view\").classList.remove(\"results-screen\");\n\n\t\tdocument\n\t\t\t.getElementById(\"input-tooltip\")\n\t\t\t.classList.remove(\"tooltip-fade-animation\");\n\n\t\ttoggleDisplayNone(document.getElementById(\"press-any-key-text\"), true);\n\t\ttoggleDisplayNone(document.getElementById(\"status-box\"), true);\n\n\t\tif (this.state.currentStreak0OnReset) {\n\t\t\tdocument.getElementById(\"current-streak-text\").textContent = \"0\";\n\t\t\tthis.state.currentStreak0OnReset = false;\n\t\t}\n\n\t\tif (this.state.loadWordOnReset) {\n\t\t\tthis.state.currentWord = loadNewWord(this.state.currentWordList);\n\t\t\tthis.state.loadWordOnReset = false;\n\t\t}\n\n\t\t// Furigana and translation may need to be hidden during the question screen\n\t\tshowFurigana(\n\t\t\tthis.state.settings.furigana,\n\t\t\tthis.state.settings.furiganaTiming ===\n\t\t\t\tCONDITIONAL_UI_TIMINGS.onlyAfterAnswering\n\t\t);\n\t\tshowTranslation(\n\t\t\tthis.state.settings.translation,\n\t\t\tthis.state.settings.translationTiming ===\n\t\t\t\tCONDITIONAL_UI_TIMINGS.onlyAfterAnswering\n\t\t);\n\n\t\tconst mainInput = document.getElementById(\"main-text-input\");\n\t\tmainInput.disabled = false;\n\t\tmainInput.value = \"\";\n\t\tif (!isTouch) {\n\t\t\tmainInput.focus();\n\t\t}\n\t}\n\n\t// Handle generic keydown events that aren't targeting a specific element\n\tonKeyDown(e) {\n\t\tlet keyCode = e.keyCode ? e.keyCode : e.which;\n\t\tif (\n\t\t\tthis.state.activeScreen === SCREENS.results &&\n\t\t\tkeyCode == \"13\" &&\n\t\t\tdocument.activeElement.id !== \"options-button\"\n\t\t) {\n\t\t\tthis.loadMainView();\n\t\t}\n\t}\n\n\t// Handle generic touchend events that aren't targeting a specific element\n\tonTouchEnd(e) {\n\t\tif (\n\t\t\tthis.state.activeScreen === SCREENS.results &&\n\t\t\te.target != document.getElementById(\"options-button\")\n\t\t) {\n\t\t\tthis.loadMainView();\n\t\t}\n\t}\n\n\tinputKeyPress(e) {\n\t\tlet keyCode = e.keyCode ? e.keyCode : e.which;\n\t\tif (keyCode == \"13\") {\n\t\t\te.stopPropagation();\n\n\t\t\tconst mainInput = document.getElementById(\"main-text-input\");\n\t\t\tlet inputValue = mainInput.value;\n\n\t\t\t// const finalChar = inputValue[inputValue.length - 1];\n\t\t\t// switch (finalChar) {\n\t\t\t// \t// Set hanging n to ん\n\t\t\t// \tcase \"n\":\n\t\t\t// \t\tinputValue = inputValue.replace(/n$/, \"ん\");\n\t\t\t// \t\tbreak;\n\t\t\t// \t// Remove hanging 。\n\t\t\t// \tcase \"。\":\n\t\t\t// \t\tinputValue = inputValue.replace(/。$/, \"\");\n\t\t\t// }\n\n\t\t\t// if (!isJapanese(inputValue)) {\n\t\t\t// \tdocument\n\t\t\t// \t\t.getElementById(\"input-tooltip\")\n\t\t\t// \t\t.classList.add(\"tooltip-fade-animation\");\n\t\t\t// \treturn;\n\t\t\t// } else {\n\t\t\t// \tdocument\n\t\t\t// \t\t.getElementById(\"input-tooltip\")\n\t\t\t// \t\t.classList.remove(\"tooltip-fade-animation\");\n\t\t\t// }\n\n\t\t\tthis.state.activeScreen = SCREENS.results;\n\t\t\tdocument\n\t\t\t\t.getElementById(\"main-view\")\n\t\t\t\t.classList.remove(\"question-screen\");\n\t\t\tdocument.getElementById(\"main-view\").classList.add(\"results-screen\");\n\n\t\t\tmainInput.blur();\n\t\t\tupdateStatusBoxes(this.state.currentWord, inputValue);\n\t\t\t// If the furigana or translation were made transparent during the question, make them visible now\n\t\t\tshowFurigana(this.state.settings.furigana, false);\n\t\t\tshowTranslation(this.state.settings.translation, false);\n\n\t\t\t// update probabilities before next word is chosen so don't choose same word\n\t\t\tconst inputWasCorrect =\n\t\t\t\tthis.state.currentWord.conjugation.validAnswers.some(\n\t\t\t\t\t(e) => e == inputValue\n\t\t\t\t);\n\n\t\t\tupdateProbabilites(\n\t\t\t\tthis.state.currentWordList,\n\t\t\t\tthis.state.wordsRecentlySeenQueue,\n\t\t\t\tthis.state.currentWord,\n\t\t\t\tinputWasCorrect\n\t\t\t);\n\n\t\t\tif (inputWasCorrect) {\n\t\t\t\taddToScore(1, this.state.maxScoreObjects, this.state.maxScoreIndex);\n\t\t\t\tthis.state.currentStreak0OnReset = false;\n\t\t\t} else {\n\t\t\t\tthis.state.currentStreak0OnReset = true;\n\t\t\t}\n\t\t\tthis.state.loadWordOnReset = true;\n\n\t\t\tmainInput.disabled = true;\n\t\t\ttoggleDisplayNone(\n\t\t\t\tdocument.getElementById(\"press-any-key-text\"),\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t\tmainInput.value = \"\";\n\t\t}\n\t}\n\n\tsettingsButtonClicked(e) {\n\t\tthis.state.activeScreen = SCREENS.settings;\n\n\t\tselectCheckboxesInUi(this.state.settings);\n\t\tshowHideOptionsAndCheckErrors();\n\n\t\ttoggleDisplayNone(document.getElementById(\"main-view\"), true);\n\t\ttoggleDisplayNone(document.getElementById(\"options-view\"), false);\n\t\ttoggleDisplayNone(document.getElementById(\"donation-section\"), false);\n\t}\n\n\tbackButtonClicked(e) {\n\t\te.preventDefault();\n\n\t\tinsertSettingsFromUi(this.state.settings);\n\t\tlocalStorage.setItem(\"settings\", JSON.stringify(this.state.settings));\n\n\t\tconst visibleConjugationSettings = getVisibleConjugationSettings();\n\t\tlet newMaxScoreIndex = findMaxScoreIndex(\n\t\t\tthis.state.maxScoreObjects,\n\t\t\tvisibleConjugationSettings\n\t\t);\n\n\t\tif (newMaxScoreIndex === -1) {\n\t\t\tthis.state.maxScoreObjects.push(\n\t\t\t\tnew MaxScoreObject(0, visibleConjugationSettings)\n\t\t\t);\n\t\t\tlocalStorage.setItem(\n\t\t\t\t\"maxScoreObjects\",\n\t\t\t\tJSON.stringify(this.state.maxScoreObjects)\n\t\t\t);\n\t\t\tnewMaxScoreIndex = this.state.maxScoreObjects.length - 1;\n\t\t}\n\n\t\tif (newMaxScoreIndex !== this.state.maxScoreIndex) {\n\t\t\tlocalStorage.setItem(\"maxScoreIndex\", newMaxScoreIndex);\n\t\t\tthis.state.maxScoreIndex = newMaxScoreIndex;\n\t\t\tthis.state.currentStreak0OnReset = true;\n\t\t\tthis.state.loadWordOnReset = true;\n\n\t\t\tthis.applySettingsUpdateWordList();\n\n\t\t\t// Note that the wordsRecentlySeenQueue is not cleared.\n\t\t\t// This is intentional, so if the new word list happens to include the words you recently missed,\n\t\t\t// they still have the chance of appearing again in a couple of rounds to retry.\n\t\t\t// If currentWordList doesn't contain those words in the queue, they won't be chosen anyways so the queue probability logic silenty fails.\n\t\t} else {\n\t\t\t// If none of the conjugation settings were changed, don't reload the word list or reset the probabilities\n\t\t\tapplyNonConjugationSettings(this.state.settings);\n\t\t}\n\n\t\tdocument.getElementById(\"max-streak-text\").textContent =\n\t\t\tthis.state.maxScoreObjects[this.state.maxScoreIndex].score;\n\n\t\ttoggleDisplayNone(document.getElementById(\"main-view\"), false);\n\t\ttoggleDisplayNone(document.getElementById(\"options-view\"), true);\n\t\ttoggleDisplayNone(document.getElementById(\"donation-section\"), true);\n\n\t\tthis.loadMainView();\n\t}\n\n\tinitState(words) {\n\t\tthis.state = {};\n\t\tthis.state.completeWordList = createWordList(words);\n\n\t\tif (\n\t\t\t!localStorage.getItem(\"maxScoreObjects\") ||\n\t\t\t!localStorage.getItem(\"maxScoreIndex\") ||\n\t\t\t!localStorage.getItem(\"settings\")\n\t\t) {\n\t\t\tthis.state.maxScoreIndex = 0;\n\t\t\tlocalStorage.setItem(\"maxScoreIndex\", this.state.maxScoreIndex);\n\n\t\t\tthis.state.settings = getDefaultSettings();\n\t\t\t\n\t\t\tlocalStorage.setItem(\"settings\", JSON.stringify(this.state.settings));\n\n\t\t\tthis.state.maxScoreObjects = [\n\t\t\t\tnew MaxScoreObject(\n\t\t\t\t\t0,\n\t\t\t\t\tremoveNonConjugationSettings(this.state.settings)\n\t\t\t\t),\n\t\t\t];\n\t\t\tlocalStorage.setItem(\n\t\t\t\t\"maxScoreObjects\",\n\t\t\t\tJSON.stringify(this.state.maxScoreObjects)\n\t\t\t);\n\t\t} else {\n\t\t\tthis.state.maxScoreIndex = parseInt(\n\t\t\t\tlocalStorage.getItem(\"maxScoreIndex\")\n\t\t\t);\n\t\t\tthis.state.settings = Object.assign(\n\t\t\t\tgetDefaultAdditiveSettings(),\n\t\t\t\tJSON.parse(localStorage.getItem(\"settings\"))\n\t\t\t);\n\t\t\tthis.state.maxScoreObjects = JSON.parse(\n\t\t\t\tlocalStorage.getItem(\"maxScoreObjects\")\n\t\t\t);\n\t\t}\n\n\t\tthis.applySettingsUpdateWordList();\n\n\t\tthis.state.currentWord = loadNewWord(this.state.currentWordList);\n\t\tthis.state.wordsRecentlySeenQueue = [];\n\t\t\n\t\tthis.state.currentStreak0OnReset = false;\n\t\tthis.state.loadWordOnReset = false;\n\n\t\tdocument.getElementById(\"max-streak-text\").textContent =\n\t\t\tthis.state.maxScoreObjects[this.state.maxScoreIndex].score;\n\n\t\tthis.loadMainView();\n\t}\n\n\tapplySettingsUpdateWordList() {\n\t\tconst filteredWords = applyAllSettingsFilterWords(\n\t\t\tthis.state.settings,\n\t\t\tthis.state.completeWordList\n\t\t);\n\t\tequalizeProbabilities(filteredWords);\n\t\tthis.state.currentWordList = filteredWords;\n\t}\n}\n\ninitApp();\n\n// Keeping the top container hidden at the beginning prevents 1 frame of malformed UI being shown\ntoggleDisplayNone(document.getElementById(\"toppest-container\"), false);\nif (!isTouch) {\n\tdocument.getElementById(\"main-text-input\").focus();\n}\n","/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nconst VERSION = '5.0.2';\n\nconst TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nconst ROMANIZATIONS = {\n  HEPBURN: 'hepburn',\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nconst DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  IMEMode: false,\n  convertLongVowelMark: true,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\nconst LATIN_UPPERCASE_START = 0x41;\nconst LATIN_UPPERCASE_END = 0x5a;\nconst LOWERCASE_ZENKAKU_START = 0xff41;\nconst LOWERCASE_ZENKAKU_END = 0xff5a;\nconst UPPERCASE_ZENKAKU_START = 0xff21;\nconst UPPERCASE_ZENKAKU_END = 0xff3a;\nconst HIRAGANA_START = 0x3041;\nconst HIRAGANA_END = 0x3096;\nconst KATAKANA_START = 0x30a1;\nconst KATAKANA_END = 0x30fc;\nconst KANJI_START = 0x4e00;\nconst KANJI_END = 0x9faf;\nconst PROLONGED_SOUND_MARK = 0x30fc;\nconst KANA_SLASH_DOT = 0x30fb;\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nconst KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nconst JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nconst JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nconst ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nconst EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isJa = isCharJapanese(char);\n      return !augmented ? isJa : isJa || allowed.test(char);\n    });\n}\n\nvar safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nvar has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nfunction dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts = {}) => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nfunction applyMapping(string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining, currentCursor) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining, lastCursor, currentCursor) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(string, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nfunction transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nfunction getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nfunction createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nfunction mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS$1 = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y$1 = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y$1\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap$1() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y$1).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS$1).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nfunction getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap$1();\n  }\n  return romajiToKanaMap;\n}\n\nconst USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nfunction IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\n// memoize and deeply compare args so we only recreate when necessary\nconst createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nfunction toKana(input = '', options = {}, map) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nfunction splitIntoConvertedKana(input = '', options = {}, map) {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nlet LISTENERS = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */\nfunction makeOnInput(options) {\n  let prevInput;\n\n  // Enforce IMEMode if not already specified\n  const mergedConfig = Object.assign({}, mergeWithDefaultOptions(options), {\n    IMEMode: options.IMEMode || true,\n  });\n\n  const preConfiguredMap = createRomajiToKanaMap(\n    mergedConfig.IMEMode,\n    mergedConfig.useObsoleteKana,\n    mergedConfig.customKanaMapping\n  );\n\n  const triggers = [\n    ...Object.keys(preConfiguredMap),\n    ...Object.keys(preConfiguredMap).map((char) => char.toUpperCase()),\n  ];\n\n  return function onInput({ target }) {\n    if (\n      target.value !== prevInput\n      && target.dataset.ignoreComposition !== 'true'\n    ) {\n      convertInput(target, mergedConfig, preConfiguredMap, triggers);\n    }\n  };\n}\n\nfunction convertInput(target, options, map, triggers, prevInput) {\n  const [head, textToConvert, tail] = splitInput(\n    target.value,\n    target.selectionEnd,\n    triggers\n  );\n  const convertedText = toKana(textToConvert, options, map);\n  const changed = textToConvert !== convertedText;\n\n  if (changed) {\n    const newCursor = head.length + convertedText.length;\n    const newValue = head + convertedText + tail;\n    // eslint-disable-next-line no-param-reassign\n    target.value = newValue;\n\n    if (tail.length) {\n      // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n      setTimeout(() => target.setSelectionRange(newCursor, newCursor), 1);\n    } else {\n      target.setSelectionRange(newCursor, newCursor);\n    }\n  }\n}\n\nfunction onComposition({ type, target, data }) {\n  // navigator.platform is not 100% reliable for singling out all OS,\n  // but for determining desktop \"Mac OS\" it is effective enough.\n  const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n  // We don't want to ignore on Android:\n  // https://github.com/WaniKani/WanaKana/issues/82\n  // But MacOS IME auto-closes if we don't ignore:\n  // https://github.com/WaniKani/WanaKana/issues/71\n  // Other platform Japanese IMEs pass through happily\n  if (isMacOS) {\n    if (type === 'compositionupdate' && isJapanese(data)) {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'true';\n    }\n\n    if (type === 'compositionend') {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'false';\n    }\n  }\n}\n\nfunction trackListeners(id, inputHandler, compositionHandler) {\n  LISTENERS = LISTENERS.concat({\n    id,\n    inputHandler,\n    compositionHandler,\n  });\n}\n\nfunction untrackListeners({ id: targetId }) {\n  LISTENERS = LISTENERS.filter(({ id }) => id !== targetId);\n}\n\nfunction findListeners(el) {\n  return (\n    el && LISTENERS.find(({ id }) => id === el.getAttribute('data-wanakana-id'))\n  );\n}\n\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nfunction splitInput(text = '', cursor = 0, triggers = []) {\n  let head;\n  let toConvert;\n  let tail;\n\n  if (cursor === 0 && triggers.includes(text[0])) {\n    [head, toConvert, tail] = workFromStart(text, triggers);\n  } else if (cursor > 0) {\n    [head, toConvert, tail] = workBackwards(text, cursor);\n  } else {\n    [head, toConvert] = takeWhileAndSlice(\n      text,\n      (char) => !triggers.includes(char)\n    );\n    [toConvert, tail] = takeWhileAndSlice(\n      toConvert,\n      (char) => !isJapanese(char)\n    );\n  }\n\n  return [head, toConvert, tail];\n}\n\nfunction workFromStart(text, catalystChars) {\n  return [\n    '',\n    ...takeWhileAndSlice(\n      text,\n      (char) => catalystChars.includes(char) || !isJapanese(char, /[0-9]/)\n    ),\n  ];\n}\n\nfunction workBackwards(text = '', startIndex = 0) {\n  const [toConvert, head] = takeWhileAndSlice(\n    [...text.slice(0, startIndex)].reverse(),\n    (char) => !isJapanese(char)\n  );\n  return [\n    head.reverse().join(''),\n    toConvert\n      .split('')\n      .reverse()\n      .join(''),\n    text.slice(startIndex),\n  ];\n}\n\nfunction takeWhileAndSlice(source = {}, predicate = (x) => !!x) {\n  const result = [];\n  const { length } = source;\n  let i = 0;\n  while (i < length && predicate(source[i], i)) {\n    result.push(source[i]);\n    i += 1;\n  }\n  return [result.join(''), source.slice(i)];\n}\n\n/* eslint-disable no-console */\nconst onInput = ({ target: { value, selectionStart, selectionEnd } }) => console.log('input:', { value, selectionStart, selectionEnd });\nconst onCompositionStart = () => console.log('compositionstart');\nconst onCompositionUpdate = ({\n  target: { value, selectionStart, selectionEnd },\n  data,\n}) => console.log('compositionupdate', {\n  data,\n  value,\n  selectionStart,\n  selectionEnd,\n});\nconst onCompositionEnd = () => console.log('compositionend');\n\nconst events = {\n  input: onInput,\n  compositionstart: onCompositionStart,\n  compositionupdate: onCompositionUpdate,\n  compositionend: onCompositionEnd,\n};\n\nconst addDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.addEventListener(event, handler)\n  );\n};\n\nconst removeDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.removeEventListener(event, handler)\n  );\n};\n\nconst ELEMENTS = ['TEXTAREA', 'INPUT'];\n\nlet idCounter = 0;\nconst newId = () => {\n  idCounter += 1;\n  return `${Date.now()}${idCounter}`;\n};\n\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */\nfunction bind(element = {}, options = {}, debug = false) {\n  if (!ELEMENTS.includes(element.nodeName)) {\n    throw new Error(\n      `Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(\n        element\n      )})`\n    );\n  }\n  const onInput = makeOnInput(options);\n  const id = newId();\n  element.setAttribute('data-wanakana-id', id);\n  element.setAttribute('lang', 'ja');\n  element.setAttribute('autoCapitalize', 'none');\n  element.setAttribute('autoCorrect', 'off');\n  element.setAttribute('autoComplete', 'off');\n  element.setAttribute('spellCheck', 'false');\n  element.addEventListener('input', onInput);\n  element.addEventListener('compositionupdate', onComposition);\n  element.addEventListener('compositionend', onComposition);\n  trackListeners(id, onInput, onComposition);\n  if (debug === true) {\n    addDebugListeners(element);\n  }\n}\n\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLElement} element textarea, input\n */\nfunction unbind(element, debug = false) {\n  const listeners = findListeners(element);\n  if (listeners == null) {\n    throw new Error(\n      `Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(\n        element\n      )}`\n    );\n  }\n  const { inputHandler, compositionHandler } = listeners;\n  element.removeAttribute('data-wanakana-id');\n  element.removeAttribute('data-ignore-composition');\n  element.removeEventListener('input', inputHandler);\n  element.removeEventListener('compositionstart', compositionHandler);\n  element.removeEventListener('compositionupdate', compositionHandler);\n  element.removeEventListener('compositionend', compositionHandler);\n  untrackListeners(listeners);\n  if (debug === true) {\n    removeDebugListeners(element);\n  }\n}\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END);\n}\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nconst isCharInitialLongDash = (char, index) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char, index) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira, char, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nlet kanaToHepburnMap = null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nfunction getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap() {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n\n// memoize and deeply compare args so we only recreate when necessary\nconst createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nfunction toRomaji(input = '', options = {}, map) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nconst isCharEnSpace = (x) => x === ' ';\nconst isCharJaSpace = (x) => x === '　';\nconst isCharJaNum = (x) => /[０-９]/.test(x);\nconst isCharEnNum = (x) => /[0-9]/.test(x);\n\nconst TOKEN_TYPES = {\n  EN: 'en',\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other',\n};\n\n// prettier-ignore\nfunction getType(input, compact = false) {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER,\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input): return OTHER;\n      case isCharEnNum(input): return OTHER;\n      case isCharEnSpace(input): return EN;\n      case isCharEnglishPunctuation(input): return OTHER;\n      case isCharJaSpace(input): return JA;\n      case isCharJapanesePunctuation(input): return OTHER;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input): return SPACE;\n      case isCharEnSpace(input): return SPACE;\n      case isCharJaNum(input): return JA_NUM;\n      case isCharEnNum(input): return EN_NUM;\n      case isCharEnglishPunctuation(input): return EN_PUNC;\n      case isCharJapanesePunctuation(input): return JA_PUNC;\n      case isCharKanji(input): return KANJI;\n      case isCharHiragana(input): return HIRAGANA;\n      case isCharKatakana(input): return KATAKANA;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce(\n    (tokens, char) => {\n      const currType = getType(char, compact);\n      const sameType = currType === prevType;\n      prevType = currType;\n      let newValue = char;\n\n      if (sameType) {\n        newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n      }\n\n      return detailed\n        ? tokens.concat({ type: currType, value: newValue })\n        : tokens.concat(newValue);\n    },\n    [initial]\n  );\n  return result;\n}\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) =>\n  (matchKanji && ![...matchKanji].some(isKanji)) || (!matchKanji && isKana(input));\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (\n    !isJapanese(input) ||\n    isLeadingWithoutInitialKana(input, leading) ||\n    isTrailingWithoutFinalKana(input, leading) ||\n    isInvalidMatcher(input, matchKanji)\n  ) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(\n    leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`\n  );\n  return input.replace(okuriganaRegex, '');\n}\n\nexport { ROMANIZATIONS, TO_KANA_METHODS, VERSION, bind, isHiragana, isJapanese, isKana, isKanji, isKatakana, isMixed, isRomaji, stripOkurigana, toHiragana, toKana, toKatakana, toRomaji, tokenize, unbind };\n//# sourceMappingURL=index.js.map\n","/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\nexport default typeOf;\n","import typeOf from './typeOf';\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\nexport default isEmpty;\n","import isEmpty from './isEmpty';\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nexport default isCharInRange;\n","export const VERSION = '5.0.2';\n\nexport const TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nexport const ROMANIZATIONS = {\n  HEPBURN: 'hepburn',\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nexport const DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  IMEMode: false,\n  convertLongVowelMark: true,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\n\n// CharCode References\n// http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n// http://unicode-table.com\n\nexport const LATIN_LOWERCASE_START = 0x61;\nexport const LATIN_LOWERCASE_END = 0x7a;\nexport const LATIN_UPPERCASE_START = 0x41;\nexport const LATIN_UPPERCASE_END = 0x5a;\nexport const LOWERCASE_ZENKAKU_START = 0xff41;\nexport const LOWERCASE_ZENKAKU_END = 0xff5a;\nexport const UPPERCASE_ZENKAKU_START = 0xff21;\nexport const UPPERCASE_ZENKAKU_END = 0xff3a;\nexport const HIRAGANA_START = 0x3041;\nexport const HIRAGANA_END = 0x3096;\nexport const KATAKANA_START = 0x30a1;\nexport const KATAKANA_END = 0x30fc;\nexport const KANJI_START = 0x4e00;\nexport const KANJI_END = 0x9faf;\nexport const PROLONGED_SOUND_MARK = 0x30fc;\nexport const KANA_SLASH_DOT = 0x30fb;\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nexport const KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nexport const JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nexport const JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nexport const ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nexport const EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n","import isCharInRange from './isCharInRange';\nimport { JAPANESE_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanese;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharJapanese from './utils/isCharJapanese';\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isJa = isCharJapanese(char);\n      return !augmented ? isJa : isJa || allowed.test(char);\n    });\n}\n\nexport default isJapanese;\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { DEFAULT_OPTIONS } from '../constants';\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts = {}) => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nexport default mergeWithDefaultOptions;\n","import typeOf from './typeOf';\n\nexport function applyMapping(string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining, currentCursor) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining, lastCursor, currentCursor) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(string, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nexport function transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nexport function getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nexport function createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nexport function mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n","import { transform, getSubTreeOf, createCustomMapping } from './kanaMapping';\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nexport function getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap();\n  }\n  return romajiToKanaMap;\n}\n\nexport const USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nexport function IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { LATIN_UPPERCASE_START, LATIN_UPPERCASE_END } from '../constants';\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\nexport default isCharUpperCase;\n","import isEmpty from './isEmpty';\nimport { PROLONGED_SOUND_MARK } from '../constants';\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\nexport default isCharLongDash;\n","import isEmpty from './isEmpty';\nimport { KANA_SLASH_DOT } from '../constants';\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\nexport default isCharSlashDot;\n","import isEmpty from './isEmpty';\nimport isCharLongDash from './isCharLongDash';\nimport isCharInRange from './isCharInRange';\nimport {\n  HIRAGANA_START,\n  HIRAGANA_END,\n} from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\nexport default isCharHiragana;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharHiragana from './isCharHiragana';\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\nexport default hiraganaToKatakana;\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport { TO_KANA_METHODS } from './constants';\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport {\n  getRomajiToKanaTree,\n  IME_MODE_MAP,\n  USE_OBSOLETE_KANA_MAP,\n} from './utils/romajiToKanaMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\nimport isCharUpperCase from './utils/isCharUpperCase';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nexport function toKana(input = '', options = {}, map) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nexport function splitIntoConvertedKana(input = '', options = {}, map) {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nexport default toKana;\n","import isJapanese from '../isJapanese';\nimport toKana, { createRomajiToKanaMap } from '../toKana';\nimport mergeWithDefaultOptions from './mergeWithDefaultOptions';\n\nlet LISTENERS = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */\nexport function makeOnInput(options) {\n  let prevInput;\n\n  // Enforce IMEMode if not already specified\n  const mergedConfig = Object.assign({}, mergeWithDefaultOptions(options), {\n    IMEMode: options.IMEMode || true,\n  });\n\n  const preConfiguredMap = createRomajiToKanaMap(\n    mergedConfig.IMEMode,\n    mergedConfig.useObsoleteKana,\n    mergedConfig.customKanaMapping\n  );\n\n  const triggers = [\n    ...Object.keys(preConfiguredMap),\n    ...Object.keys(preConfiguredMap).map((char) => char.toUpperCase()),\n  ];\n\n  return function onInput({ target }) {\n    if (\n      target.value !== prevInput\n      && target.dataset.ignoreComposition !== 'true'\n    ) {\n      convertInput(target, mergedConfig, preConfiguredMap, triggers, prevInput);\n    }\n  };\n}\n\nexport function convertInput(target, options, map, triggers, prevInput) {\n  const [head, textToConvert, tail] = splitInput(\n    target.value,\n    target.selectionEnd,\n    triggers\n  );\n  const convertedText = toKana(textToConvert, options, map);\n  const changed = textToConvert !== convertedText;\n\n  if (changed) {\n    const newCursor = head.length + convertedText.length;\n    const newValue = head + convertedText + tail;\n    // eslint-disable-next-line no-param-reassign\n    target.value = newValue;\n    // eslint-disable-next-line no-param-reassign\n    prevInput = newValue;\n\n    if (tail.length) {\n      // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n      setTimeout(() => target.setSelectionRange(newCursor, newCursor), 1);\n    } else {\n      target.setSelectionRange(newCursor, newCursor);\n    }\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    prevInput = target.value;\n  }\n}\n\nexport function onComposition({ type, target, data }) {\n  // navigator.platform is not 100% reliable for singling out all OS,\n  // but for determining desktop \"Mac OS\" it is effective enough.\n  const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n  // We don't want to ignore on Android:\n  // https://github.com/WaniKani/WanaKana/issues/82\n  // But MacOS IME auto-closes if we don't ignore:\n  // https://github.com/WaniKani/WanaKana/issues/71\n  // Other platform Japanese IMEs pass through happily\n  if (isMacOS) {\n    if (type === 'compositionupdate' && isJapanese(data)) {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'true';\n    }\n\n    if (type === 'compositionend') {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'false';\n    }\n  }\n}\n\nexport function trackListeners(id, inputHandler, compositionHandler) {\n  LISTENERS = LISTENERS.concat({\n    id,\n    inputHandler,\n    compositionHandler,\n  });\n}\n\nexport function untrackListeners({ id: targetId }) {\n  LISTENERS = LISTENERS.filter(({ id }) => id !== targetId);\n}\n\nexport function findListeners(el) {\n  return (\n    el && LISTENERS.find(({ id }) => id === el.getAttribute('data-wanakana-id'))\n  );\n}\n\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nexport function splitInput(text = '', cursor = 0, triggers = []) {\n  let head;\n  let toConvert;\n  let tail;\n\n  if (cursor === 0 && triggers.includes(text[0])) {\n    [head, toConvert, tail] = workFromStart(text, triggers);\n  } else if (cursor > 0) {\n    [head, toConvert, tail] = workBackwards(text, cursor);\n  } else {\n    [head, toConvert] = takeWhileAndSlice(\n      text,\n      (char) => !triggers.includes(char)\n    );\n    [toConvert, tail] = takeWhileAndSlice(\n      toConvert,\n      (char) => !isJapanese(char)\n    );\n  }\n\n  return [head, toConvert, tail];\n}\n\nfunction workFromStart(text, catalystChars) {\n  return [\n    '',\n    ...takeWhileAndSlice(\n      text,\n      (char) => catalystChars.includes(char) || !isJapanese(char, /[0-9]/)\n    ),\n  ];\n}\n\nfunction workBackwards(text = '', startIndex = 0) {\n  const [toConvert, head] = takeWhileAndSlice(\n    [...text.slice(0, startIndex)].reverse(),\n    (char) => !isJapanese(char)\n  );\n  return [\n    head.reverse().join(''),\n    toConvert\n      .split('')\n      .reverse()\n      .join(''),\n    text.slice(startIndex),\n  ];\n}\n\nfunction takeWhileAndSlice(source = {}, predicate = (x) => !!x) {\n  const result = [];\n  const { length } = source;\n  let i = 0;\n  while (i < length && predicate(source[i], i)) {\n    result.push(source[i]);\n    i += 1;\n  }\n  return [result.join(''), source.slice(i)];\n}\n","/* eslint-disable no-console */\nconst onInput = ({ target: { value, selectionStart, selectionEnd } }) => console.log('input:', { value, selectionStart, selectionEnd });\nconst onCompositionStart = () => console.log('compositionstart');\nconst onCompositionUpdate = ({\n  target: { value, selectionStart, selectionEnd },\n  data,\n}) => console.log('compositionupdate', {\n  data,\n  value,\n  selectionStart,\n  selectionEnd,\n});\nconst onCompositionEnd = () => console.log('compositionend');\n\nconst events = {\n  input: onInput,\n  compositionstart: onCompositionStart,\n  compositionupdate: onCompositionUpdate,\n  compositionend: onCompositionEnd,\n};\n\nexport const addDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.addEventListener(event, handler)\n  );\n};\n\nexport const removeDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.removeEventListener(event, handler)\n  );\n};\n","import { makeOnInput, onComposition, trackListeners } from './utils/dom';\nimport { addDebugListeners } from './utils/logInputEvents';\n\nconst ELEMENTS = ['TEXTAREA', 'INPUT'];\n\nlet idCounter = 0;\nconst newId = () => {\n  idCounter += 1;\n  return `${Date.now()}${idCounter}`;\n};\n\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */\nfunction bind(element = {}, options = {}, debug = false) {\n  if (!ELEMENTS.includes(element.nodeName)) {\n    throw new Error(\n      `Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(\n        element\n      )})`\n    );\n  }\n  const onInput = makeOnInput(options);\n  const id = newId();\n  element.setAttribute('data-wanakana-id', id);\n  element.setAttribute('lang', 'ja');\n  element.setAttribute('autoCapitalize', 'none');\n  element.setAttribute('autoCorrect', 'off');\n  element.setAttribute('autoComplete', 'off');\n  element.setAttribute('spellCheck', 'false');\n  element.addEventListener('input', onInput);\n  element.addEventListener('compositionupdate', onComposition);\n  element.addEventListener('compositionend', onComposition);\n  trackListeners(id, onInput, onComposition);\n  if (debug === true) {\n    addDebugListeners(element);\n  }\n}\n\nexport default bind;\n","import { findListeners, untrackListeners } from './utils/dom';\nimport { removeDebugListeners } from './utils/logInputEvents';\n\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLElement} element textarea, input\n */\nexport function unbind(element, debug = false) {\n  const listeners = findListeners(element);\n  if (listeners == null) {\n    throw new Error(\n      `Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(\n        element\n      )}`\n    );\n  }\n  const { inputHandler, compositionHandler } = listeners;\n  element.removeAttribute('data-wanakana-id');\n  element.removeAttribute('data-ignore-composition');\n  element.removeEventListener('input', inputHandler);\n  element.removeEventListener('compositionstart', compositionHandler);\n  element.removeEventListener('compositionupdate', compositionHandler);\n  element.removeEventListener('compositionend', compositionHandler);\n  untrackListeners(listeners);\n  if (debug === true) {\n    removeDebugListeners(element);\n  }\n}\n\nexport default unbind;\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { ROMAJI_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharRomaji;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharRomaji from './utils/isCharRomaji';\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n\nexport default isRomaji;\n","import {\n  KATAKANA_START,\n  KATAKANA_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\nexport default isCharKatakana;\n","import isEmpty from './isEmpty';\nimport isCharHiragana from './isCharHiragana';\nimport isCharKatakana from './isCharKatakana';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\nexport default isCharKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKana from './utils/isCharKana';\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\nexport default isKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharHiragana from './utils/isCharHiragana';\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\nexport default isHiragana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKatakana from './utils/isCharKatakana';\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\nexport default isKatakana;\n","import {\n  KANJI_START,\n  KANJI_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END);\n}\n\nexport default isCharKanji;\n","import isEmpty from './utils/isEmpty';\nimport isCharKanji from './utils/isCharKanji';\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\nexport default isKanji;\n","import isKanji from './isKanji';\nimport isHiragana from './isHiragana';\nimport isKatakana from './isKatakana';\nimport isRomaji from './isRomaji';\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nexport default isMixed;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharKatakana from './isCharKatakana';\nconst isCharInitialLongDash = (char, index) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char, index) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira, char, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nexport default katakanaToHiragana;\n","import { transform, getSubTreeOf } from './kanaMapping';\nimport { ROMANIZATIONS } from '../constants';\n\nlet kanaToHepburnMap = null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nexport function getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap() {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isKatakana from './isKatakana';\nimport { getKanaToRomajiTree } from './utils/kanaToRomajiMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nexport function toRomaji(input = '', options = {}, map) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\nexport default toRomaji;\n","import isEmpty from './isEmpty';\nimport { EN_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharEnglishPunctuation;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\nimport toKana from './toKana';\nimport toRomaji from './toRomaji';\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\nexport default toHiragana;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport toKana from './toKana';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\nexport default toKatakana;\n","import isEmpty from './isEmpty';\nimport { JA_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanesePunctuation;\n","import isEmpty from './utils/isEmpty';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isCharJapanesePunctuation from './utils/isCharJapanesePunctuation';\nimport isCharRomaji from './utils/isCharRomaji';\nimport isCharKanji from './utils/isCharKanji';\nimport isCharHiragana from './utils/isCharHiragana';\nimport isCharKatakana from './utils/isCharKatakana';\nimport isCharJapanese from './utils/isCharJapanese';\n\nconst isCharEnSpace = (x) => x === ' ';\nconst isCharJaSpace = (x) => x === '　';\nconst isCharJaNum = (x) => /[０-９]/.test(x);\nconst isCharEnNum = (x) => /[0-9]/.test(x);\n\nexport const TOKEN_TYPES = {\n  EN: 'en',\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other',\n};\n\n// prettier-ignore\nexport function getType(input, compact = false) {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER,\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input): return OTHER;\n      case isCharEnNum(input): return OTHER;\n      case isCharEnSpace(input): return EN;\n      case isCharEnglishPunctuation(input): return OTHER;\n      case isCharJaSpace(input): return JA;\n      case isCharJapanesePunctuation(input): return OTHER;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input): return SPACE;\n      case isCharEnSpace(input): return SPACE;\n      case isCharJaNum(input): return JA_NUM;\n      case isCharEnNum(input): return EN_NUM;\n      case isCharEnglishPunctuation(input): return EN_PUNC;\n      case isCharJapanesePunctuation(input): return JA_PUNC;\n      case isCharKanji(input): return KANJI;\n      case isCharHiragana(input): return HIRAGANA;\n      case isCharKatakana(input): return KATAKANA;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがな４カタ　カナ「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce(\n    (tokens, char) => {\n      const currType = getType(char, compact);\n      const sameType = currType === prevType;\n      prevType = currType;\n      let newValue = char;\n\n      if (sameType) {\n        newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n      }\n\n      return detailed\n        ? tokens.concat({ type: currType, value: newValue })\n        : tokens.concat(newValue);\n    },\n    [initial]\n  );\n  return result;\n}\n\nexport default tokenize;\n","import isJapanese from './isJapanese';\nimport isKana from './isKana';\nimport isKanji from './isKanji';\nimport tokenize from './tokenize';\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) =>\n  (matchKanji && ![...matchKanji].some(isKanji)) || (!matchKanji && isKana(input));\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (\n    !isJapanese(input) ||\n    isLeadingWithoutInitialKana(input, leading) ||\n    isTrailingWithoutFinalKana(input, leading) ||\n    isInvalidMatcher(input, matchKanji)\n  ) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(\n    leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`\n  );\n  return input.replace(okuriganaRegex, '');\n}\n\nexport default stripOkurigana;\n","import { CONJUGATION_TYPES, PARTS_OF_SPEECH } from \"./wordEnums.js\";\nimport { toggleDisplayNone, createArrayOfArrays } from \"./utils.js\";\n\n// Enum for radio options that conditionally show/hide UI elements\nexport const CONDITIONAL_UI_TIMINGS = Object.freeze({\n\talways: \"always\",\n\tonlyAfterAnswering: \"after\",\n});\n\nconst nonConjugationSettings = getNonConjugationSettingsSet();\n\nfunction getNonConjugationSettingsSet() {\n\tconst settings = new Set();\n\tdocument\n\t\t.querySelectorAll(\"#non-conjugation-settings input\")\n\t\t.forEach((input) => settings.add(input.getAttribute(\"name\")));\n\treturn settings;\n}\n\nexport function removeNonConjugationSettings(settings) {\n\tlet prunedSettings = JSON.parse(JSON.stringify(settings));\n\n\tnonConjugationSettings.forEach((s) => {\n\t\tdelete prunedSettings[s];\n\t});\n\treturn prunedSettings;\n}\n\n/**\n * The settings that should be set for new users\n * @returns {Object} settings\n */\nexport const getDefaultSettings = () => {\n\t// First set all checkboxes to true\n\t// document.getElementById(\"options-form\")\n\t// \t.querySelectorAll('[type=\"checkbox\"]').checked = true;\n\tconst inputs = document\n\t\t.getElementById(\"options-form\")\n\t\t.querySelectorAll('[type=\"checkbox\"]');\n\tconst settings = {};\n\tfor (const input of Array.from(inputs)) {\n\t\tsettings[input.name] = true;\n\t}\n\n\t// Set any advanced conjugation checkboxes to false\n\tconst advancedInputs = document\n\t\t.getElementById(\"options-form\")\n\t\t.querySelectorAll('.advanced-section [type=\"checkbox\"]');\n\tfor (const input of Array.from(advancedInputs)) {\n\t\tsettings[input.name] = false;\n\t}\n\n\t// Set input radio values\n\tsettings[\"translationTiming\"] = CONDITIONAL_UI_TIMINGS.always;\n\tsettings[\"furiganaTiming\"] = CONDITIONAL_UI_TIMINGS.always;\n\n\treturn settings;\n};\n\n/**\n * The settings that should be added to a returning user's settings object\n * @returns {Object} settings\n */\nexport const getDefaultAdditiveSettings = () => {\n\tconst settings = {};\n\n\tconst nonConjugationInputs = document\n\t\t.getElementById(\"non-conjugation-settings\")\n\t\t.querySelectorAll('[type=\"checkbox\"]');\n\tfor (let input of Array.from(nonConjugationInputs)) {\n\t\tsettings[input.name] = true;\n\t}\n\n\t// Set input radio values\n\tsettings[\"translationTiming\"] = CONDITIONAL_UI_TIMINGS.always;\n\tsettings[\"furiganaTiming\"] = CONDITIONAL_UI_TIMINGS.always;\n\n\t// All conjugation settings (including advanced options) are added as false\n\tconst conjugationInputs = document\n\t\t.getElementById(\"conjugation-settings\")\n\t\t.querySelectorAll('[type=\"checkbox\"]');\n\tfor (let input of Array.from(conjugationInputs)) {\n\t\tsettings[input.name] = false;\n\t}\n\n\treturn settings;\n};\n\nexport function optionsMenuInit() {\n\tconst optionsGroups = document.getElementsByClassName(\"options-group\");\n\tfor (const optionGroup of Array.from(optionsGroups)) {\n\t\t// Note that this registers a listener for a click anywhere in the\n\t\t// options-group element (not just the checkboxes).\n\t\toptionGroup.addEventListener(\"click\", (e) =>\n\t\t\toptionsGroupCheckError(e.currentTarget)\n\t\t);\n\t}\n\n\tconst verbInputsWithVariations = document.getElementsByClassName(\n\t\t\"verb-has-variations\"\n\t);\n\tconst verbInputsWithPolitenessOnly = document.getElementsByClassName(\n\t\t\"verb-has-politeness\"\n\t);\n\tfor (const input of Array.from(verbInputsWithVariations).concat(\n\t\tArray.from(verbInputsWithPolitenessOnly)\n\t)) {\n\t\tinput.addEventListener(\"click\", showHideVerbVariationOptions);\n\t}\n\n\tconst adjectiveInputsWithVariations = document.getElementsByClassName(\n\t\t\"adjective-has-variations\"\n\t);\n\tfor (const input of Array.from(adjectiveInputsWithVariations)) {\n\t\tinput.addEventListener(\"click\", showHideAdjectiveVariationOptions);\n\t}\n\n\t// document\n\t// \t.getElementById(\"furigana-checkbox\")\n\t// \t.addEventListener(\"click\", showHideFuriganaSubOptions);\n\tdocument\n\t\t.getElementById(\"translation-checkbox\")\n\t\t.addEventListener(\"click\", showHideTranslationSubOptions);\n\n\tdocument\n\t\t.getElementById(\"verbs-checkbox\")\n\t\t.addEventListener(\"click\", verbAndAdjCheckError);\n\t// document\n\t// \t.getElementById(\"adjectives-checkbox\")\n\t// \t.addEventListener(\"click\", verbAndAdjCheckError);\n\n\t// top level errors\n\tconst optionsView = document.getElementById(\"options-view\");\n\t// optionsView.addEventListener(\"click\", verbPresAffPlainCheckError);\n\t// optionsView.addEventListener(\"click\", adjPresAffPlainCheckError);\n}\n\nfunction checkToEnableBackButton() {\n\tlet errors = document.getElementsByClassName(\"settings-error-text\");\n\tfor (let error of Array.from(errors)) {\n\t\t// checks if any error messages take up space on the screen\n\t\tif (error.offsetWidth > 0 && error.offsetHeight > 0) {\n\t\t\tdocument.getElementById(\"back-button\").disabled = true;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tdocument.getElementById(\"back-button\").disabled = false;\n}\n\n/**\n * If enabled is true, sets errorElement's content to errorMessage.\n * Otherwise, hides errorElement and tries to enable the back button.\n *\n * @param {boolean} enabled\n * @param {Element} errorElement\n * @param {String} errorMessage\n */\nfunction toggleError(enabled, errorElement, errorMessage) {\n\tif (enabled) {\n\t\tlet backButton = document.getElementById(\"back-button\");\n\t\terrorElement.textContent = errorMessage;\n\t\ttoggleDisplayNone(errorElement, false);\n\t\tbackButton.disabled = true;\n\t} else {\n\t\ttoggleDisplayNone(errorElement, true);\n\t\tcheckToEnableBackButton();\n\t}\n}\n\nfunction doCheckboxesHaveValue(inputs, shouldBeChecked) {\n\tfor (let input of Array.from(inputs)) {\n\t\tif (input.checked !== shouldBeChecked) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction checkInputsAndToggleError(\n\tinputs,\n\terrorElement,\n\terrorMessage,\n\tshouldBeChecked\n) {\n\ttoggleError(\n\t\tdoCheckboxesHaveValue(inputs, shouldBeChecked),\n\t\terrorElement,\n\t\terrorMessage\n\t);\n}\n\nfunction optionsGroupCheckError(groupElement) {\n\tlet inputs = groupElement.getElementsByTagName(\"input\");\n\tlet errorElement = groupElement.getElementsByClassName(\n\t\t\"settings-error-text\"\n\t)[0];\n\n\tcheckInputsAndToggleError(\n\t\tinputs,\n\t\terrorElement,\n\t\t\"*Must choose at least 1 option from this category\",\n\t\tfalse\n\t);\n}\n\nfunction verbAndAdjCheckError() {\n\tlet inputs = [\n\t\tdocument.querySelector('input[name=\"verb\"]')\n\t\t// document.querySelector('input[name=\"adjective\"]'),\n\t];\n\ttoggleDisplayNone(\n\t\tdocument.getElementById(\"verb-options-container\"),\n\t\t!inputs[0].checked\n\t);\n\t// toggleDisplayNone(\n\t// \tdocument.getElementById(\"adjective-options-container\"),\n\t// \t!inputs[1].checked\n\t// );\n\tlet errorElement = document.getElementById(\"top-must-choose\");\n\n\tcheckInputsAndToggleError(\n\t\tinputs,\n\t\terrorElement,\n\t\t\"*Must choose at least 1 option from this category\",\n\t\tfalse\n\t);\n}\n\n// Relies on naming between verb and adjective checkboxes being parallel in the html\nfunction areOnlyPresAffPlainChecked(partOfSpeech) {\n\t// const allInputsToValidate = Array.from(\n\t// \tdocument\n\t// \t\t.getElementById(`${partOfSpeech}-conjugation-type-group`)\n\t// \t\t.getElementsByTagName(\"input\")\n\t// ).concat(\n\t// \tArray.from(\n\t// \t\tdocument\n\t// \t\t\t.getElementById(`${partOfSpeech}-variations-container`)\n\t// \t\t\t.getElementsByTagName(\"input\")\n\t// \t)\n\t// );\n\tconst allInputsToValidate = Array.from(\n\t\t\tdocument\n\t\t\t\t.getElementById(`${partOfSpeech}-variations-container`)\n\t\t\t\t.getElementsByTagName(\"input\")\n\t\t);\n\n\tconst inputsToBeChecked = new Set([\n\t\t`${partOfSpeech}present`,\n\t\t`${partOfSpeech}affirmative`,\n\t\t`${partOfSpeech}plain`,\n\t]);\n\tfor (const input of allInputsToValidate) {\n\t\t// We're validating that only the inputs in inputsToBeChecked are checked.\n\t\t// Otherwise, return early to prevent the error from being displayed.\n\t\tif (\n\t\t\t(!input.checked && inputsToBeChecked.has(input.name)) ||\n\t\t\t(input.checked && !inputsToBeChecked.has(input.name))\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// If we make it here, then only present, affirmative, and plain were checked in their respective option groups\n\treturn true;\n}\n\nfunction verbPresAffPlainCheckError() {\n\t// let optionsGroup = document.getElementById(\"verb-conjugation-type-group\");\n\t// let errorElement = optionsGroup.getElementsByClassName(\n\t// \t\"settings-error-text\"\n\t// )[0];\n\n\tif (areOnlyPresAffPlainChecked(PARTS_OF_SPEECH.verb)) {\n\t\ttoggleError(\n\t\t\ttrue,\n\t\t\terrorElement,\n\t\t\t\"*Invalid combination: present, affirmative, plain\"\n\t\t);\n\t\t// These inputs could be hidden because the parent \"Verb\" option is unchecked, so check to enable back button\n\t\tcheckToEnableBackButton();\n\t} else {\n\t\toptionsGroupCheckError(optionsGroup);\n\t}\n}\n\nfunction adjPresAffPlainCheckError() {\n\tlet optionsGroup = document.getElementById(\"adjective-type-group\");\n\tlet errorElement = optionsGroup.getElementsByClassName(\n\t\t\"settings-error-text\"\n\t)[0];\n\n\tlet iAdjInput = document.querySelector('input[name=\"adjectivei\"]');\n\tlet irrAdjInput = document.querySelector('input[name=\"adjectiveirregular\"]');\n\tlet naAdjInput = document.querySelector('input[name=\"adjectivena\"]');\n\n\tif (\n\t\tareOnlyPresAffPlainChecked(PARTS_OF_SPEECH.adjective) &&\n\t\t!naAdjInput.checked &&\n\t\t(iAdjInput.checked || irrAdjInput.checked)\n\t) {\n\t\ttoggleError(\n\t\t\ttrue,\n\t\t\terrorElement,\n\t\t\t\"*Invalid combination: い/irregular, present, affirmative, plain\"\n\t\t);\n\t\t// element could be hidden because verb is unchecked, so check to enable back button\n\t\tcheckToEnableBackButton();\n\t} else if (document.querySelector('input[name=\"adjective\"]').checked) {\n\t\toptionsGroupCheckError(optionsGroup);\n\t}\n}\n\n/**\n * Shows or hides UI options based on the values of checkboxes.\n *\n * @param {string} triggeringInputsClass - The class that's been put on inputs that trigger this show/hide\n * @param {string} showHideContainerId - The container to show/hide. Should either be an element with an \"options-group\" class, or be an element that contains other \"options-group\" elements\n * @returns {boolean} - true if the options were shown, false if hidden\n */\nfunction showHideUiOptions(triggeringInputsClass, showHideContainerId) {\n\tconst inputsThatTrigger = document.getElementsByClassName(\n\t\ttriggeringInputsClass\n\t);\n\tconst showHideContainer = document.getElementById(showHideContainerId);\n\t// Check if showHideContainer is an options-group itself, or if it contains options-group elements\n\tconst optionGroups = showHideContainer.classList.contains(\"options-group\")\n\t\t? [showHideContainer]\n\t\t: showHideContainer.getElementsByClassName(\"options-group\");\n\n\tfor (const input of Array.from(inputsThatTrigger)) {\n\t\tif (input.checked) {\n\t\t\tfor (const optionGroup of Array.from(optionGroups)) {\n\t\t\t\toptionsGroupCheckError(optionGroup);\n\t\t\t\ttoggleDisplayNone(optionGroup, false);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tfor (const optionGroup of Array.from(optionGroups)) {\n\t\ttoggleDisplayNone(optionGroup, true);\n\t}\n\treturn false;\n}\n\n// In this context the options Affirmative, Negative, Plain, and Polite\n// are considered \"variations\" on other conjugation types.\n// Not all types (like て for verbs, adverbs for adjectives) have variations.\nfunction showHideVerbVariationOptions() {\n\t// First try to show/hide all variation options\n\tconst showingAllVariations = showHideUiOptions(\n\t\t\"verb-selected\",\n\t\t\"verb-variations-container\"\n\t);\n\n\t// If all variations aren't shown, see if just politeness options should be shown\n\tif (!showingAllVariations) {\n\t\tshowHideUiOptions(\"verb-has-politeness\", \"verb-politeness-container\");\n\t}\n}\nfunction showHideAdjectiveVariationOptions() {\n\tshowHideUiOptions(\n\t\t\"adjective-has-variations\",\n\t\t\"adjective-variations-container\"\n\t);\n}\n\nfunction showHideFuriganaSubOptions() {\n\ttoggleDisplayNone(\n\t\tdocument.getElementById(\"furigana-sub-options\"),\n\t\t!document.getElementById(\"furigana-checkbox\").checked\n\t);\n}\n\nfunction showHideTranslationSubOptions() {\n\ttoggleDisplayNone(\n\t\tdocument.getElementById(\"translation-sub-options\"),\n\t\t!document.getElementById(\"translation-checkbox\").checked\n\t);\n}\n\nexport function applyNonConjugationSettings(settings) {\n\tshowEmojis(settings.emoji);\n\tshowStreak(settings.streak);\n\t// showTranslation and showFurigana are dependent on the state, so we can't set them here\n}\n\nexport function applyAllSettingsFilterWords(settings, completeWordList) {\n\tapplyNonConjugationSettings(settings);\n\n\tlet currentWordList = createArrayOfArrays(completeWordList.length);\n\n\tconst verbRegex = /^verb_.+/;\n\tif (settings.verb !== false) {\n\t\t// Copy all of the verbs over\n\t\tcurrentWordList[0] = [...completeWordList[0]];\n\t\t// currentWordList[0] = [];\n\n\t\tlet verbOptions = Object.keys(settings).filter((el) =>\n\t\t\tverbRegex.test(el)\n\t\t);\n\n\t\t// Filter out the verbs we don't want\n\t\tfor (let i = 0; i < verbOptions.length; i++) {\n\t\t\tif (settings[verbOptions[i]] === true) {\n\t\t\t\tcurrentWordList[0] = currentWordList[0].concat(completeWordList[0].filter(\n\t\t\t\t\tquestionRemoveFiltersController.verbs[verbOptions[i]]\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t}\n\n\tconst adjectiveRegex = /^adjective.+/;\n\tif (settings.adjective !== false) {\n\t\t// Copy all of the adjectives over\n\t\tcurrentWordList[1] = [...completeWordList[1]];\n\n\t\tlet adjectiveOptions = Object.keys(settings).filter((el) =>\n\t\t\tadjectiveRegex.test(el)\n\t\t);\n\t\t// Filter out the adjectives we don't want\n\t\tfor (let i = 0; i < adjectiveOptions.length; i++) {\n\t\t\tif (settings[adjectiveOptions[i]] === false) {\n\t\t\t\tcurrentWordList[1] = currentWordList[1].filter(\n\t\t\t\t\tquestionRemoveFilters.adjectives[adjectiveOptions[i]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.log(currentWordList)\n\treturn currentWordList;\n}\n\n// The input to these functions is a \"Word\" object defined in main.js.\n// If one of these filters is applied to an array of Words,\n// that type of Word will be removed from the array.\nconst questionRemoveFiltersController = {\n\tverbs: {\n\t\t// PRESENT TENSE\n\t\tverb_present_indicative_informal_impolite: function (word) {\n\t\t\tlet bool = ((word.conjugation.type === CONJUGATION_TYPES.present) &&\n\t\t\t\t(word.conjugation.formal === false) &&\n\t\t\t\t(word.conjugation.polite === false))\n\t\t\treturn bool\n\t\t},\n\t\tverb_present_indicative_formal_impolite: function (word) {\n\t\t\tlet bool = ((word.conjugation.type === CONJUGATION_TYPES.present) &&\n\t\t\t\t(word.conjugation.formal === true) &&\n\t\t\t\t(word.conjugation.polite === false))\n\t\t\treturn bool\n\t\t},\n\t\tverb_present_indicative_informal_polite: function (word) {\n\t\t\treturn ((word.conjugation.type === CONJUGATION_TYPES.present) &&\n\t\t\t\t    (word.conjugation.formal === false) &&\n\t\t\t\t    (word.conjugation.polite === true))\n\t\t},\n\t\tverb_present_indicative_formal_polite: function (word) {\n\t\t\treturn ((word.conjugation.type === CONJUGATION_TYPES.present) &&\n\t\t\t\t    (word.conjugation.formal === true) &&\n\t\t\t\t    (word.conjugation.polite === true))\n\t\t},\n\t\t// PAST TENSE\n\t\tverb_past_indicative_informal_impolite: function (word) {\n\t\t\tlet bool = ((word.conjugation.type === CONJUGATION_TYPES.past) &&\n\t\t\t\t(word.conjugation.formal === false) &&\n\t\t\t\t(word.conjugation.polite === false))\n\t\t\treturn bool\n\t\t},\n\t\tverb_past_indicative_formal_impolite: function (word) {\n\t\t\tlet bool = ((word.conjugation.type === CONJUGATION_TYPES.past) &&\n\t\t\t\t(word.conjugation.formal === true) &&\n\t\t\t\t(word.conjugation.polite === false))\n\t\t\treturn bool\n\t\t},\n\t\tverb_past_indicative_informal_polite: function (word) {\n\t\t\treturn ((word.conjugation.type === CONJUGATION_TYPES.past) &&\n\t\t\t\t    (word.conjugation.formal === false) &&\n\t\t\t\t    (word.conjugation.polite === true))\n\t\t},\n\t\tverb_past_indicative_formal_polite: function (word) {\n\t\t\treturn ((word.conjugation.type === CONJUGATION_TYPES.past) &&\n\t\t\t\t    (word.conjugation.formal === true) &&\n\t\t\t\t    (word.conjugation.polite === true))\n\t\t}\n\t}\n}\n\n/**\n * Searches the maxScoreObjects array for a maxScoreObject with specified settings.\n * Make sure visibleConjugationSettings doesn't contain any settings that aren't tied to max score (like \"Show English translations\" for example)\n *\n * @param {Array<MaxScoreObject>} maxScoreObjects\n * @param {Object} visibleConjugationSettings\n * @returns The index where the match was found. If no match was found, returns -1.\n */\nexport function findMaxScoreIndex(maxScoreObjects, visibleConjugationSettings) {\n\tlet settingKeys = Object.keys(visibleConjugationSettings);\n\tlet flag;\n\tfor (let i = 0; i < maxScoreObjects.length; i++) {\n\t\tflag = true;\n\t\tfor (let s of settingKeys) {\n\t\t\tif (maxScoreObjects[i].settings[s] != visibleConjugationSettings[s]) {\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == true) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nexport const showEmojis = function (show) {\n\tdocument.getElementById(\"conjugation-inquery-text\").className = show\n\t\t? \"\"\n\t\t: \"hide-emojis\";\n};\n\nexport const showStreak = function (show) {\n\tdocument.querySelectorAll(\".streak\").forEach((s) => {\n\t\tif (show) {\n\t\t\ts.classList.remove(\"display-none\");\n\t\t} else {\n\t\t\ts.classList.add(\"display-none\");\n\t\t}\n\t});\n};\n\n// Can be shown never, always, or only after answering.\nexport const showFurigana = function (showInDom, makeTransparent = false) {\n\tconst el = document.getElementById(\"verb-text\");\n\tsetDisplayAndTransparency(\n\t\tel,\n\t\tshowInDom,\n\t\t\"hide-furigana\",\n\t\tmakeTransparent,\n\t\t\"transparent-furigana\"\n\t);\n};\n\n// Can be shown never, always, or only after answering.\nexport const showTranslation = function (showInDom, makeTransparent = false) {\n\tconst el = document.getElementById(\"translation\");\n\tsetDisplayAndTransparency(\n\t\tel,\n\t\tshowInDom,\n\t\t\"display-none\",\n\t\tmakeTransparent,\n\t\t\"transparent\"\n\t);\n};\n\n// removeClass should lead to display:none\n// transparentClass should lead to something like opacity: 0 to keep height when hidden\nfunction setDisplayAndTransparency(\n\telement,\n\tshowInDom,\n\tremoveClass,\n\tmakeTransparent,\n\ttransparentClass\n) {\n\t// Reset state\n\telement.classList.remove(removeClass);\n\telement.classList.remove(transparentClass);\n\n\tif (!showInDom) {\n\t\telement.classList.add(removeClass);\n\t\treturn;\n\t}\n\n\tif (makeTransparent) {\n\t\telement.classList.add(transparentClass);\n\t\treturn;\n\t}\n}\n\nexport function selectCheckboxesInUi(settings) {\n\tlet checkboxInputs = document.querySelectorAll(\n\t\t`#options-form input[type=\"checkbox\"]`\n\t);\n\tfor (let input of Array.from(checkboxInputs)) {\n\t\tinput.checked = settings[input.name];\n\t}\n\n\t// selectConditionalUiRadio(\n\t// \tsettings.furiganaTiming,\n\t// \t\"furigana-always-radio\",\n\t// \t\"furigana-after-radio\"\n\t// );\n\tselectConditionalUiRadio(\n\t\tsettings.translationTiming,\n\t\t\"translation-always-radio\",\n\t\t\"translation-after-radio\"\n\t);\n\n\tfunction selectConditionalUiRadio(\n\t\tradioValue,\n\t\talwaysRadioId,\n\t\tonlyAfterAnsweringRadioId\n\t) {\n\t\tswitch (radioValue) {\n\t\t\tcase CONDITIONAL_UI_TIMINGS.always:\n\t\t\t\tdocument.getElementById(alwaysRadioId).checked = true;\n\t\t\t\tbreak;\n\t\t\tcase CONDITIONAL_UI_TIMINGS.onlyAfterAnswering:\n\t\t\t\tdocument.getElementById(onlyAfterAnsweringRadioId).checked = true;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport function showHideOptionsAndCheckErrors() {\n\tshowHideVerbVariationOptions();\n\t// showHideAdjectiveVariationOptions();\n\n\t// showHideFuriganaSubOptions();\n\tshowHideTranslationSubOptions();\n\n\tlet optionsGroups = document.getElementsByClassName(\"options-group\");\n\tfor (let group of Array.from(optionsGroups)) {\n\t\toptionsGroupCheckError(group);\n\t}\n\n\tverbAndAdjCheckError();\n}\n\n/**\n * Overrides values in the settings object based on values selected in the UI\n *\n * @param {Object} settings\n */\nexport function insertSettingsFromUi(settings) {\n\tconst checkboxInputs = document.querySelectorAll(\n\t\t'#options-form input[type=\"checkbox\"]'\n\t);\n\n\tfor (let input of Array.from(checkboxInputs)) {\n\t\tsettings[input.name] = input.checked;\n\t}\n\n\tsettings.furiganaTiming = getConditionalUiSetting(\"furiganaTiming\");\n\tsettings.translationTiming = getConditionalUiSetting(\"translationTiming\");\n\n\t// Default to \"always\"\n\tfunction getConditionalUiSetting(radioName) {\n\t\treturn (\n\t\t\tdocument.querySelector(`input[name=\"${radioName}\"]:checked`)?.value ??\n\t\t\tCONDITIONAL_UI_TIMINGS.always\n\t\t);\n\t}\n\n\treturn settings;\n}\n\n/**\n * Get a settings object that only contains the settings that are currently visible on the screen.\n * Useful for storing max score objects which want as little information as possible since they are stored in localStorage.\n */\nexport function getVisibleConjugationSettings() {\n\tconst visibleConjugationSettings = {};\n\tconst checkboxInputs = document.querySelectorAll(\n\t\t'#options-form input[type=\"checkbox\"]'\n\t);\n\n\tfor (let input of Array.from(checkboxInputs)) {\n\t\tif (\n\t\t\tinput.offsetWidth > 0 &&\n\t\t\tinput.offsetHeight > 0 &&\n\t\t\t!nonConjugationSettings.has(input.name)\n\t\t) {\n\t\t\tvisibleConjugationSettings[input.name] = input.checked;\n\t\t}\n\t}\n\n\treturn visibleConjugationSettings;\n}\n","export const PARTS_OF_SPEECH = Object.freeze({\n\tverb: \"verb\",\n\tadjective: \"adjective\",\n});\n\nexport const CONJUGATION_TYPES = Object.freeze({\n\tpresent: \"Present\",\n\tpast: \"Past\",\n\tte: \"て-form\",\n\tadverb: \"Adverb\",\n\tvolitional: \"Volitional\",\n\tpassive: \"Passive\",\n\tcausative: \"Causative\",\n\tpotential: \"Potential\",\n\timperative: \"Imperative\",\n});\n","export function toggleDisplayNone(element, isDisplayNone) {\n\ttoggleClassName(element, \"display-none\", isDisplayNone);\n}\n\nexport function toggleBackgroundNone(element, isBackgroundNone) {\n\ttoggleClassName(element, \"background-none\", isBackgroundNone);\n}\n\nfunction toggleClassName(element, className, enabled) {\n\tif (enabled) {\n\t\telement.classList.add(className);\n\t} else {\n\t\telement.classList.remove(className);\n\t}\n}\n\nexport function createArrayOfArrays(length) {\n\tlet array = new Array(length);\n\tfor (let i = 0; i < array.length; i++) {\n\t\tarray[i] = [];\n\t}\n\treturn array;\n}\n","export const japaneseWordData = {\n    \"verbs\": [\n        { \"kanji\": \"<ruby>行<rt>い<\\/rt><\\/ruby>く\", \"type\": \"irv\", \"eng\": \"go\", \"group\": \"iku\" },\n        { \"kanji\": \"する\", \"type\": \"irv\", \"eng\": \"do, make\", \"group\": \"suru\" }\n    ],\n    \"adjectives\": [\n        { \"kanji\": \"いい\", \"type\": \"ira\", \"eng\": \"good\" },\n        { \"kanji\": \"かっこいい\", \"type\": \"ira\", \"eng\": \"cool, handsome\" }\n    ]\n}\n\nexport const koreanWordData = {\n    \"verbs\": [\n        {\n            \"hangeul\": \"가다\",\n            \"eng\": \"to go\"\n        },\n        {\n            \"hangeul\": \"가르치다\",\n            \"eng\": \"to teach\"\n        },\n        {\n            \"hangeul\": \"가져가다\",\n            \"eng\": \"to take\"\n        },\n        {\n            \"hangeul\": \"가져오다\",\n            \"eng\": \"to bring\"\n        },\n        {\n            \"hangeul\": \"가지다\",\n            \"eng\": \"to have\"\n        },\n        {\n            \"hangeul\": \"갈아타다\",\n            \"eng\": \"to transfer (eg. transfer to subway line 9)\"\n        },\n        {\n            \"hangeul\": \"감다\",\n            \"eng\": \"to close (one's eyes)\"\n        },\n        {\n            \"hangeul\": \"감사하다\",\n            \"eng\": \"to appreciate\"\n        },\n        {\n            \"hangeul\": \"갖다\",\n            \"eng\": \"to have\"\n        },\n        {\n            \"hangeul\": \"걱정하다\",\n            \"eng\": \"to worry\"\n        },\n        {\n            \"hangeul\": \"건너가다\",\n            \"eng\": \"to cross (over)\"\n        },\n        {\n            \"hangeul\": \"건너다\",\n            \"eng\": \"to cross (over)\"\n        },\n        {\n            \"hangeul\": \"걷다\",\n            \"eng\": \"to walk\"\n        },\n        {\n            \"hangeul\": \"걸다 (clothing, picture, etc)\",\n            \"eng\": \"to hang\"\n        },\n        {\n            \"hangeul\": \"걸다 (communication)\",\n            \"eng\": \"to call\"\n        },\n        {\n            \"hangeul\": \"걸리다 (clothing, picture, etc)\",\n            \"eng\": \"to hang\"\n        },\n        {\n            \"hangeul\": \"걸리다 (illness)\",\n            \"eng\": \"to contract\"\n        },\n        {\n            \"hangeul\": \"걸리다 (carry)\",\n            \"eng\": \"to take\"\n        },\n        {\n            \"hangeul\": \"걸어가다\",\n            \"eng\": \"to walk to\"\n        },\n        {\n            \"hangeul\": \"걸이오다\",\n            \"eng\": \"to walk from\"\n        },\n        {\n            \"hangeul\": \"결정하다\",\n            \"eng\": \"to decide\"\n        },\n        {\n            \"hangeul\": \"결혼하다\",\n            \"eng\": \"to marry\"\n        },\n        {\n            \"hangeul\": \"경험하다\",\n            \"eng\": \"to experience\"\n        },\n        {\n            \"hangeul\": \"계산하다\",\n            \"eng\": \"to calculate\"\n        },\n        {\n            \"hangeul\": \"계시다\",\n            \"eng\": \"to be\"\n        },\n        {\n            \"hangeul\": \"고르다\",\n            \"eng\": \"to choose\"\n        },\n        {\n            \"hangeul\": \"고치다\",\n            \"eng\": \"to repair\"\n        },\n        {\n            \"hangeul\": \"공부하다\",\n            \"eng\": \"to study\"\n        },\n        {\n            \"hangeul\": \"관광하다\",\n            \"eng\": \"to go sightseeing\"\n        },\n        {\n            \"hangeul\": \"구경하다\",\n            \"eng\": \"to look around\"\n        },\n        {\n            \"hangeul\": \"구하다\",\n            \"eng\": \"to look for\"\n        },\n        {\n            \"hangeul\": \"굽다\",\n            \"eng\": \"to grill\"\n        },\n        {\n            \"hangeul\": \"그리다\",\n            \"eng\": \"to draw (a picture)\"\n        },\n        {\n            \"hangeul\": \"그치다\",\n            \"eng\": \"to stop\"\n        },\n        {\n            \"hangeul\": \"기다리다\",\n            \"eng\": \"to wait\"\n        },\n        {\n            \"hangeul\": \"기르다\",\n            \"eng\": \"to raise (a child)\"\n        },\n        {\n            \"hangeul\": \"기뻐하다\",\n            \"eng\": \"to be pleased\"\n        },\n        {\n            \"hangeul\": \"기억하다\",\n            \"eng\": \"to remember\"\n        },\n        {\n            \"hangeul\": \"긴장되다\",\n            \"eng\": \"to be nervous\"\n        },\n        {\n            \"hangeul\": \"길다\",\n            \"eng\": \"to long (adjective)\"\n        },\n        {\n            \"hangeul\": \"깎다\",\n            \"eng\": \"to cut (hair)\"\n        },\n        {\n            \"hangeul\": \"깨다\",\n            \"eng\": \"to break\"\n        }\n    ],\n    \"adjectives\": [\n    ]\n}\n\nexport const wordData = {\n    \"verbs\": [\n        { \"kanji\": \"<ruby>行<rt>い<\\/rt><\\/ruby>く\", \"type\": \"irv\", \"eng\": \"go\", \"group\": \"iku\" },\n        { \"kanji\": \"する\", \"type\": \"irv\", \"eng\": \"do, make\", \"group\": \"suru\" },\n        { \"kanji\": \"<ruby>来<rt>く<\\/rt><\\/ruby>る\", \"type\": \"irv\", \"eng\": \"come\" },\n        { \"kanji\": \"ある\", \"type\": \"irv\", \"eng\": \"have, exists, is (inanimate)\" },\n        { \"kanji\": \"<ruby>問<rt>と<\\/rt><\\/ruby>う\", \"type\": \"irv\", \"eng\": \"ask, accuse\" },\n        { \"kanji\": \"いる\", \"type\": \"ru\", \"eng\": \"exists, is (living things)\" },\n        { \"kanji\": \"<ruby>始<rt>はじ<\\/rt><\\/ruby>める\", \"type\": \"ru\", \"eng\": \"begin\" },\n        { \"kanji\": \"<ruby>借<rt>か<\\/rt><\\/ruby>りる\", \"type\": \"ru\", \"eng\": \"borrow, rent\" },\n        { \"kanji\": \"<ruby>続<rt>つづ<\\/rt><\\/ruby>ける\", \"type\": \"ru\", \"eng\": \"continue, proceed\" },\n        { \"kanji\": \"<ruby>決<rt>き<\\/rt><\\/ruby>める\", \"type\": \"ru\", \"eng\": \"decide, choose\" },\n        { \"kanji\": \"<ruby>食<rt>た<\\/rt><\\/ruby>べる\", \"type\": \"ru\", \"eng\": \"eat\" },\n        { \"kanji\": \"<ruby>忘<rt>わす<\\/rt><\\/ruby>れる\", \"type\": \"ru\", \"eng\": \"forget\" },\n        { \"kanji\": \"<ruby>降<rt>お<\\/rt><\\/ruby>りる\", \"type\": \"ru\", \"eng\": \"get off, go down\" },\n        { \"kanji\": \"<ruby>疲<rt>つか<\\/rt><\\/ruby>れる\", \"type\": \"ru\", \"eng\": \"get tired\" },\n        { \"kanji\": \"<ruby>起<rt>お<\\/rt><\\/ruby>きる\", \"type\": \"ru\", \"eng\": \"get up, wake up\" },\n        { \"kanji\": \"あげる\", \"type\": \"ru\", \"eng\": \"give\" },\n        { \"kanji\": \"<ruby>出<rt>で<\\/rt><\\/ruby>る\", \"type\": \"ru\", \"eng\": \"leave, exit, appear\" },\n        { \"kanji\": \"<ruby>助<rt>たす<\\/rt><\\/ruby>ける\", \"type\": \"ru\", \"eng\": \"help\" },\n        { \"kanji\": \"<ruby>見<rt>み<\\/rt><\\/ruby>る\", \"type\": \"ru\", \"eng\": \"see, look\" },\n        { \"kanji\": \"<ruby>開<rt>あ<\\/rt><\\/ruby>ける\", \"type\": \"ru\", \"eng\": \"open\" },\n        { \"kanji\": \"<ruby>覚<rt>おぼ<\\/rt><\\/ruby>える\", \"type\": \"ru\", \"eng\": \"remember, learn\" },\n        { \"kanji\": \"<ruby>寝<rt>ね<\\/rt><\\/ruby>る\", \"type\": \"ru\", \"eng\": \"sleep, go to bed\" },\n        { \"kanji\": \"<ruby>閉<rt>し<\\/rt><\\/ruby>める\", \"type\": \"ru\", \"eng\": \"close\" },\n        { \"kanji\": \"<ruby>着<rt>き<\\/rt><\\/ruby>る\", \"type\": \"ru\", \"eng\": \"put on, wear (shirt, jacket, etc)\" },\n        { \"kanji\": \"なる\", \"type\": \"u\", \"eng\": \"become\" },\n        { \"kanji\": \"<ruby>乗<rt>の<\\/rt><\\/ruby>る\", \"type\": \"u\", \"eng\": \"board, ride\" },\n        { \"kanji\": \"<ruby>切<rt>き<\\/rt><\\/ruby>る\", \"type\": \"u\", \"eng\": \"cut\" },\n        { \"kanji\": \"やる\", \"type\": \"u\", \"eng\": \"do, give\" },\n        { \"kanji\": \"<ruby>終<rt>お<\\/rt><\\/ruby>わる\", \"type\": \"u\", \"eng\": \"end\" },\n        { \"kanji\": \"<ruby>上<rt>あ<\\/rt><\\/ruby>がる\", \"type\": \"u\", \"eng\": \"go up, rise\", \"altOkurigana\": [\"上る\"] },\n        { \"kanji\": \"<ruby>知<rt>し<\\/rt><\\/ruby>る\", \"type\": \"u\", \"eng\": \"know\" },\n        { \"kanji\": \"<ruby>作<rt>つく<\\/rt><\\/ruby>る\", \"type\": \"u\", \"eng\": \"make, build\" },\n        { \"kanji\": \"<ruby>帰<rt>かえ<\\/rt><\\/ruby>る\", \"type\": \"u\", \"eng\": \"return, go home\" },\n        { \"kanji\": \"<ruby>取<rt>と<\\/rt><\\/ruby>る\", \"type\": \"u\", \"eng\": \"take, steal\" },\n        { \"kanji\": \"<ruby>買<rt>か<\\/rt><\\/ruby>う\", \"type\": \"u\", \"eng\": \"buy\" },\n        { \"kanji\": \"<ruby>笑<rt>わら<\\/rt><\\/ruby>う\", \"type\": \"u\", \"eng\": \"laugh, smile\" },\n        { \"kanji\": \"<ruby>会<rt>あ<\\/rt><\\/ruby>う\", \"type\": \"u\", \"eng\": \"meet\" },\n        { \"kanji\": \"<ruby>言<rt>い<\\/rt><\\/ruby>う\", \"type\": \"u\", \"eng\": \"say, utter\" },\n        { \"kanji\": \"<ruby>思<rt>おも<\\/rt><\\/ruby>う\", \"type\": \"u\", \"eng\": \"think, believe\" },\n        { \"kanji\": \"<ruby>使<rt>つか<\\/rt><\\/ruby>う\", \"type\": \"u\", \"eng\": \"use\" },\n        { \"kanji\": \"<ruby>持<rt>も<\\/rt><\\/ruby>つ\", \"type\": \"u\", \"eng\": \"hold, have\" },\n        { \"kanji\": \"<ruby>待<rt>ま<\\/rt><\\/ruby>つ\", \"type\": \"u\", \"eng\": \"wait\" },\n        { \"kanji\": \"<ruby>立<rt>た<\\/rt><\\/ruby>つ\", \"type\": \"u\", \"eng\": \"stand up\" },\n        { \"kanji\": \"<ruby>聞<rt>き<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"hear, listen\" },\n        { \"kanji\": \"<ruby>引<rt>ひ<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"pull, tug\" },\n        { \"kanji\": \"<ruby>履<rt>は<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"put on, wear (pants, skirt, shoes, etc)\" },\n        { \"kanji\": \"<ruby>歩<rt>ある<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"walk\" },\n        { \"kanji\": \"<ruby>書<rt>か<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"write\" },\n        { \"kanji\": \"<ruby>働<rt>はたら<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"work\" },\n        { \"kanji\": \"<ruby>死<rt>し<\\/rt><\\/ruby>ぬ\", \"type\": \"u\", \"eng\": \"die, pass away\" },\n        { \"kanji\": \"<ruby>飲<rt>の<\\/rt><\\/ruby>む\", \"type\": \"u\", \"eng\": \"drink\" },\n        { \"kanji\": \"<ruby>楽<rt>たの<\\/rt><\\/ruby>しむ\", \"type\": \"u\", \"eng\": \"enjoy, have fun\" },\n        { \"kanji\": \"<ruby>進<rt>すす<\\/rt><\\/ruby>む\", \"type\": \"u\", \"eng\": \"advance, go forward\" },\n        { \"kanji\": \"<ruby>住<rt>す<\\/rt><\\/ruby>む\", \"type\": \"u\", \"eng\": \"live, inhabit\" },\n        { \"kanji\": \"<ruby>読<rt>よ<\\/rt><\\/ruby>む\", \"type\": \"u\", \"eng\": \"read\" },\n        { \"kanji\": \"<ruby>休<rt>やす<\\/rt><\\/ruby>む\", \"type\": \"u\", \"eng\": \"rest, be absent\" },\n        { \"kanji\": \"<ruby>遊<rt>あそ<\\/rt><\\/ruby>ぶ\", \"type\": \"u\", \"eng\": \"play, have a good time\" },\n        { \"kanji\": \"<ruby>学<rt>まな<\\/rt><\\/ruby>ぶ\", \"type\": \"u\", \"eng\": \"study, learn\" },\n        { \"kanji\": \"<ruby>選<rt>えら<\\/rt><\\/ruby>ぶ\", \"type\": \"u\", \"eng\": \"choose, select\" },\n        { \"kanji\": \"<ruby>返<rt>かえ<\\/rt><\\/ruby>す\", \"type\": \"u\", \"eng\": \"return (something), put back\" },\n        { \"kanji\": \"<ruby>押<rt>お<\\/rt><\\/ruby>す\", \"type\": \"u\", \"eng\": \"push, press\" },\n        { \"kanji\": \"<ruby>治<rt>なお<\\/rt><\\/ruby>す\", \"type\": \"u\", \"eng\": \"cure, repair\" },\n        { \"kanji\": \"<ruby>話<rt>はな<\\/rt><\\/ruby>す\", \"type\": \"u\", \"eng\": \"talk, speak\" },\n        { \"kanji\": \"<ruby>探<rt>さが<\\/rt><\\/ruby>す\", \"type\": \"u\", \"eng\": \"search, look for\" },\n        { \"kanji\": \"<ruby>貸<rt>か<\\/rt><\\/ruby>す\", \"type\": \"u\", \"eng\": \"lend, loan\" },\n        { \"kanji\": \"<ruby>泳<rt>およ<\\/rt><\\/ruby>ぐ\", \"type\": \"u\", \"eng\": \"swim\" },\n        { \"kanji\": \"<ruby>脱<rt>ぬ<\\/rt><\\/ruby>ぐ\", \"type\": \"u\", \"eng\": \"take off clothes, undress\" },\n        { \"kanji\": \"<ruby>急<rt>いそ<\\/rt><\\/ruby>ぐ\", \"type\": \"u\", \"eng\": \"hurry\" },\n        { \"kanji\": \"<ruby>稼<rt>かせ<\\/rt><\\/ruby>ぐ\", \"type\": \"u\", \"eng\": \"earn income, make money\" },\n        { \"kanji\": \"<ruby>寛<rt>くつろ<\\/rt><\\/ruby>ぐ\", \"type\": \"u\", \"eng\": \"relax, feel at home\" },\n        { \"kanji\": \"<ruby>繋<rt>つな<\\/rt><\\/ruby>ぐ\", \"type\": \"u\", \"eng\": \"connect, link together\" },\n        { \"kanji\": \"<ruby>分<rt>わ<\\/rt><\\/ruby>かる\", \"type\": \"u\", \"eng\": \"understand\" },\n        { \"kanji\": \"<ruby>勉<rt>べん<\\/rt><\\/ruby><ruby>強<rt>きょう<\\/rt><\\/ruby>する\", \"type\": \"irv\", \"eng\": \"study\", \"group\": \"suru\" },\n        { \"kanji\": \"<ruby>受<rt>う<\\/rt><\\/ruby>け<ruby>持<rt>も<\\/rt><\\/ruby>つ\", \"type\": \"u\", \"eng\": \"take charge of\" },\n        { \"kanji\": \"<ruby>持<rt>も<\\/rt><\\/ruby>って<ruby>行<rt>い<\\/rt><\\/ruby>く\", \"type\": \"irv\", \"eng\": \"take, carry away\", \"group\": \"iku\" },\n        { \"kanji\": \"<ruby>食<rt>た<\\/rt><\\/ruby>べ<ruby>歩<rt>ある<\\/rt><\\/ruby>く\", \"type\": \"u\", \"eng\": \"try food at various restaurants\" }\n    ],\n    \"adjectives\": [\n        { \"kanji\": \"いい\", \"type\": \"ira\", \"eng\": \"good\" },\n        { \"kanji\": \"かっこいい\", \"type\": \"ira\", \"eng\": \"cool, handsome\" },\n        { \"kanji\": \"<ruby>赤<rt>あか<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"red\" },\n        { \"kanji\": \"<ruby>新<rt>あたら<\\/rt><\\/ruby>しい\", \"type\": \"i\", \"eng\": \"new\" },\n        { \"kanji\": \"<ruby>暑<rt>あつ<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"hot (weather)\" },\n        { \"kanji\": \"<ruby>危<rt>あぶ<\\/rt><\\/ruby>ない\", \"type\": \"i\", \"eng\": \"dangerous\" },\n        { \"kanji\": \"<ruby>美<rt>お<\\/rt><\\/ruby><ruby>味<rt>い<\\/rt><\\/ruby>しい\", \"type\": \"i\", \"eng\": \"delicious\" },\n        { \"kanji\": \"<ruby>大<rt>おお<\\/rt><\\/ruby>きい\", \"type\": \"i\", \"eng\": \"big\" },\n        { \"kanji\": \"<ruby>遅<rt>おそ<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"late, slow\" },\n        { \"kanji\": \"<ruby>面<rt>おも<\\/rt><\\/ruby><ruby>白<rt>しろ<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"interesting, funny\" },\n        { \"kanji\": \"<ruby>可<rt>か<\\/rt><\\/ruby><ruby>愛<rt>わい<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"cute, pretty\" },\n        { \"kanji\": \"<ruby>寒<rt>さむ<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"cold (weather)\" },\n        { \"kanji\": \"<ruby>高<rt>たか<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"high, expensive\" },\n        { \"kanji\": \"<ruby>楽<rt>たの<\\/rt><\\/ruby>しい\", \"type\": \"i\", \"eng\": \"fun, pleasant\" },\n        { \"kanji\": \"<ruby>小<rt>ちい<\\/rt><\\/ruby>さい\", \"type\": \"i\", \"eng\": \"small\" },\n        { \"kanji\": \"<ruby>詰<rt>つま<\\/rt><\\/ruby>らない\", \"type\": \"i\", \"eng\": \"uninteresting, boring\", \"altOkurigana\": [\"詰まらない\"] },\n        { \"kanji\": \"<ruby>速<rt>はや<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"fast, quick\" },\n        { \"kanji\": \"<ruby>古<rt>ふる<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"old (thing)\" },\n        { \"kanji\": \"<ruby>欲<rt>ほ<\\/rt><\\/ruby>しい\", \"type\": \"i\", \"eng\": \"wanted, desired\" },\n        { \"kanji\": \"<ruby>難<rt>むずか<\\/rt><\\/ruby>しい\", \"type\": \"i\", \"eng\": \"difficult\" },\n        { \"kanji\": \"<ruby>安<rt>やす<\\/rt><\\/ruby>い\", \"type\": \"i\", \"eng\": \"cheap\" },\n        { \"kanji\": \"<ruby>好<rt>す<\\/rt><\\/ruby>き\", \"type\": \"na\", \"eng\": \"like\" },\n        { \"kanji\": \"<ruby>有<rt>ゆう<\\/rt><\\/ruby><ruby>名<rt>めい<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"famous\" },\n        { \"kanji\": \"きれい\", \"type\": \"na\", \"eng\": \"beautiful, tidy\" },\n        { \"kanji\": \"<ruby>嫌<rt>きら<\\/rt><\\/ruby>い\", \"type\": \"na\", \"eng\": \"dislike\" },\n        { \"kanji\": \"<ruby>静<rt>しず<\\/rt><\\/ruby>か\", \"type\": \"na\", \"eng\": \"quiet\" },\n        { \"kanji\": \"<ruby>元<rt>げん<\\/rt><\\/ruby><ruby>気<rt>き<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"healthy\" },\n        { \"kanji\": \"<ruby>色<rt>いろ<\\/rt><\\/ruby><ruby>々<rt>いろ<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"various\" },\n        { \"kanji\": \"<ruby>心<rt>しん<\\/rt><\\/ruby><ruby>配<rt>ぱい<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"worry, care\" },\n        { \"kanji\": \"<ruby>嫌<rt>いや<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"unpleasant, detestable\" },\n        { \"kanji\": \"<ruby>十<rt>じゅう<\\/rt><\\/ruby><ruby>分<rt>ぶん<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"sufficient\" },\n        { \"kanji\": \"<ruby>立<rt>りっ<\\/rt><\\/ruby><ruby>派<rt>ぱ<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"excellent, splendid\" },\n        { \"kanji\": \"<ruby>同<rt>おな<\\/rt><\\/ruby>じ\", \"type\": \"na\", \"eng\": \"same, alike\" },\n        { \"kanji\": \"<ruby>大<rt>だい<\\/rt><\\/ruby><ruby>丈<rt>じょう<\\/rt><\\/ruby><ruby>夫<rt>ぶ<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"okay, safe\" },\n        { \"kanji\": \"<ruby>真<rt>ま<\\/rt><\\/ruby>っ<ruby>直<rt>す<\\/rt><\\/ruby>ぐ\", \"type\": \"na\", \"eng\": \"straight, direct\", \"altOkurigana\": [\"真直ぐ\", \"真すぐ\", \"真っすぐ\"] },\n        { \"kanji\": \"<ruby>下<rt>へ<\\/rt><\\/ruby><ruby>手<rt>た<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"unskilled\" },\n        { \"kanji\": \"<ruby>簡<rt>かん<\\/rt><\\/ruby><ruby>単<rt>たん<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"simple, easy\" },\n        { \"kanji\": \"<ruby>楽<rt>らく<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"comfortable, easy\" },\n        { \"kanji\": \"<ruby>残<rt>ざん<\\/rt><\\/ruby><ruby>念<rt>ねん<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"unfortunate, disappointing\" },\n        { \"kanji\": \"<ruby>必<rt>ひつ<\\/rt><\\/ruby><ruby>要<rt>よう<\\/rt><\\/ruby>\", \"type\": \"na\", \"eng\": \"necessary\" }\n    ]\n}","// vim: set ts=4 sw=4 expandtab\n// (C) 2010 Dan Bravender - licensed under the AGPL 3.0\n\n// try {\n//     var hangeul       = require('./hangeul'),\n//         pronunciation = require('./pronunciation');\n// } catch(e) {}\n\nimport { hangeul, Geulja } from \"./hangeul.js\"\nimport pronunciation from \"./pronunciation.js\"\n\nvar conjugator = {};\n\nconjugator.no_padchim_rule = function(characters) {\n    /* no_padchim_rule is a helper function for defining merges where a\n        character will take the padchim of a merged character if the first\n        character doesn't already have a padchim, .e.g. 습 -> 가 + 습니다 -> 갑니다.\n    */\n    return function(x, y) {\n        if (!hangeul.padchim(x.charAt(x.length-1)) && y[0] in characters) {\n            return ['borrow padchim', x.substring(0, x.length-1) +\n                                      hangeul.join(hangeul.lead(x[x.length-1]),\n                                                   hangeul.vowel(x[x.length-1]),\n                                                   hangeul.padchim(y[0])) +\n                                      y.substring(1)];\n        }\n    }\n};\n\nconjugator.vowel_contraction = function(vowel1, vowel2, new_vowel, trace) {\n    /* vowel contraction is a helper function for defining common contractions\n       between a character without a padchim and a character that starts with\n        'ᄋ', e.g. ㅐ + ㅕ -> ㅐ when applied to 해 + 였 yields 했.\n    */\n    return function(x, y) {\n        if (hangeul.match(x.charAt(x.length-1), '*', vowel1, null) &&\n            hangeul.match(y.charAt(0), 'ᄋ', vowel2, '*')) {\n            return ['vowel contraction [' + vowel1 + ' ' + vowel2 + ' -> ' + new_vowel + ']',\n                    x.substring(0, x.length-1) +\n                    hangeul.join(hangeul.lead(x.charAt(x.length-1)),\n                                 new_vowel,\n                                 hangeul.padchim(y[0])) +\n                    y.substring(1)];\n        }\n    }\n};\n\nconjugator.drop_l = function(x, y) {\n    if (hangeul.padchim(x[x.length-1]) == 'ᆯ') {\n        conjugator.reasons.push('drop ㄹ')\n        return x.substring(0, x.length-1) +\n               hangeul.join(hangeul.lead(x[x.length-1]),\n                            hangeul.vowel(x[x.length-1])) +\n               y;\n    }\n};\n\nconjugator.drop_l_and_borrow_padchim = function(x, y) {\n    if (hangeul.padchim(x.charAt(x.length-1)) == 'ᆯ') {\n        conjugator.reasons.push('drop ' + hangeul.padchim(x.charAt(x.length-1)) + ' borrow padchim')\n        return x.substring(0, x.length-1) +\n               hangeul.join(hangeul.lead(x[x.length-1]),\n                            hangeul.vowel(x[x.length-1]),\n                            hangeul.padchim(y[0])) +\n               y.substring(1);\n    }\n};\n\nconjugator.dont_insert_eh = function(x, y) {\n    if (hangeul.padchim(x.charAt(x.length-1)) == 'ᆯ' &&\n        y[0] == '면') {\n        return ['join', x + y];\n    }\n};\n\nconjugator.insert_eh = function(characters) {\n    return function(x, y) {\n        if (hangeul.padchim(x.charAt(x.length-1)) && y[0] in characters) {\n            return ['padchim + consonant -> insert 으', x + '으' + y];\n        }\n    }\n};\n\nconjugator.lm_merge = function(x, y) {\n    if (hangeul.padchim(x.charAt(x.length-1)) == 'ᆯ' && y[0] == '음') {\n        return ['ㄹ + ㅁ -> ᆱ',\n                x.substring(0, x.length-1) +\n                hangeul.join(hangeul.lead(x[x.length-1]),\n                             hangeul.vowel(x[x.length-1]),\n                             'ᆱ')];\n    }\n};\n\n/* merge rules is a list of rules that are applied in order when merging a verb \n   stem with a tense ending\n*/\n\nconjugator.merge_rules = [\n    conjugator.no_padchim_rule({'을': true, '습': true, '읍': true, '는': true, '음': true}),\n    conjugator.lm_merge,\n    conjugator.vowel_contraction('ㅐ', 'ㅓ', 'ㅐ'),\n    conjugator.vowel_contraction('ㅡ', 'ㅓ', 'ㅓ'),\n    conjugator.vowel_contraction('ㅜ', 'ㅓ', 'ㅝ'),\n    conjugator.vowel_contraction('ㅗ', 'ㅏ', 'ㅘ'),\n    conjugator.vowel_contraction('ㅚ', 'ㅓ', 'ㅙ'),\n    conjugator.vowel_contraction('ㅙ', 'ㅓ', 'ㅙ'),\n    conjugator.vowel_contraction('ㅘ', 'ㅓ', 'ㅘ'),\n    conjugator.vowel_contraction('ㅝ', 'ㅓ', 'ㅝ'),\n    conjugator.vowel_contraction('ㅏ', 'ㅏ', 'ㅏ'),\n    conjugator.vowel_contraction('ㅡ', 'ㅏ', 'ㅏ'),\n    conjugator.vowel_contraction('ㅣ', 'ㅓ', 'ㅕ'),\n    conjugator.vowel_contraction('ㅓ', 'ㅓ', 'ㅓ'),\n    conjugator.vowel_contraction('ㅓ', 'ㅣ', 'ㅐ'),\n    conjugator.vowel_contraction('ㅏ', 'ㅣ', 'ㅐ'),\n    conjugator.vowel_contraction('ㅑ', 'ㅣ', 'ㅒ'),\n    conjugator.vowel_contraction('ㅒ', 'ㅓ', 'ㅒ'),\n    conjugator.vowel_contraction('ㅔ', 'ㅓ', 'ㅔ'),\n    conjugator.vowel_contraction('ㅕ', 'ㅓ', 'ㅕ'),\n    conjugator.vowel_contraction('ㅏ', 'ㅕ', 'ㅐ'),\n    conjugator.vowel_contraction('ㅖ', 'ㅓ', 'ㅖ'),\n    conjugator.vowel_contraction('ㅞ', 'ㅓ', 'ㅞ'),\n    conjugator.dont_insert_eh,\n    conjugator.insert_eh({'면': true, '세': true, '십': true}),\n    // default rule\n    function (x, y) {\n        return ['join', x + y];\n    }\n];\n\nconjugator.reasons = [];\n\nconjugator.merge = function(x, y) {\n    /* concatenates every element in a list using the rules to\n       merge the strings\n    */\n    var response = null;\n    conjugator.merge_rules.forEach(function(rule) {\n        if (!response) {\n            let output = rule(x, y);\n            if (output) {\n                conjugator.reasons.push((output[0] ? output[0] : '') + ' (' + x + ' + ' + y + ' -> ' + output[1] + ')');\n                response = output[1];\n            }\n        }\n    });\n    return response;\n};\n\nconjugator.both_regular_and_irregular = {\n    '일': true, '곱': true, '파묻': true, '누르': true, '묻': true, '이르': true,\n    '되묻': true, '썰': true, '붓': true, '들까불': true, '굽': true, '걷': true,\n    '뒤까불': true, '까불': true\n};\n\nconjugator.not_p_irregular = {'털썩이잡': true, '넘겨잡': true, '우접': true, '입': true, '맞접': true, '문잡': true, '다잡': true, '까뒤집': true, '배좁': true, '목잡': true, '끄집': true, '잡': true, '옴켜잡': true, '검잡': true, '되순라잡': true, '내씹': true, '모집': true, '따잡': true, '엇잡': true, '까집': true, '겹집': true, '줄통뽑': true, '버르집': true, '지르잡': true, '추켜잡': true, '업': true, '되술래잡': true, '되접': true, '좁디좁': true, '더위잡': true, '말씹': true, '내뽑': true, '집': true, '걸머잡': true, '휘어잡': true, '꿰입': true, '황잡': true, '에굽': true, '내굽': true, '따라잡': true, '맞뒤집': true, '둘러업': true, '늘잡': true, '끄잡': true, '우그려잡': true, '어줍': true, '언걸입': true, '들이곱': true, '껴잡': true, '곱 접': true, '훔켜잡': true, '늦추잡': true, '갈아입': true, '친좁': true, '희짜뽑': true, '마음잡': true, '개미잡': true, '옴씹': true, '치잡': true, '그러잡': true, '움켜잡': true, '씹': true, '비집': true, '꼽': true, '살잡': true, '죄입': true, '졸잡': true, '가려잡': true, '뽑': true, '걷어잡': true, '헐잡': true, '돌라입': true, '덧잡': true, '얕잡': true, '낫잡': true, '부여잡': true, '맞붙잡': true, '걸입': true, '주름잡': true, '걷어입': true, '빌미잡': true, '개잡': true, '겉잡': true, '안쫑잡': true, '좁': true, '힘입': true, '걷잡': true, '바르집': true, '감씹': true, '짓씹': true, '손잡': true, '포집': true, '붙잡': true, '낮잡': true, '책잡': true, '곱잡': true, '흉잡': true, '뒤집': true, '땡잡': true, '어림잡': true, '덧껴입': true, '수줍': true, '뒤잡': true, '꼬집': true, '예굽': true, '덮쳐잡': true, '헛잡': true, '되씹': true, '낮추잡': true, '날파람잡': true, '틀어잡': true, '헤집': true, '남의달잡': true, '바로잡': true, '흠잡': true, '파잡': true, '얼추잡': true, '손꼽': true, '접': true, '차려입': true, '골라잡': true, '거머잡': true, '후려잡': true, '머줍': true, '넉장뽑': true, '사로잡': true, '덧입': true, '껴입': true, '얼입': true, '우집': true, '설잡': true, '늦잡': true, '비좁': true, '고르잡': true, '때려잡': true, '떼집': true, '되잡': true, '홈켜잡': true, '내곱': true, '곱씹': true, '빼입': true, '들이굽': true, '새잡': true, '이르집': true, '떨쳐입': true};\n\nconjugator.not_s_irregular = {'내솟': true, '빗': true, '드솟': true, '비웃': true, '뺏': true, '샘솟': true, '벗': true, '들이웃': true, '솟': true, '되뺏': true, '빼앗': true, '밧': true, '애긋': true, '짜드라웃': true, '어그솟': true, '들솟': true, '씻': true, '빨가벗': true, '깃': true, '벌거벗': true, '엇': true, '되빼앗': true, '웃': true, '앗': true, '헐벗': true, '용솟': true, '덧솟': true, '발가벗': true, '뻘거벗': true, '날솟': true, '치솟': true};\n\nconjugator.not_d_irregular = {'맞받': true, '내딛': true, '내리받': true, '벋': true, '뒤닫': true, '주고받': true, '공얻': true, '무뜯': true, '물어뜯': true, '여닫': true, '그러묻': true, '잇닫': true, '덧묻': true, '되받': true, '뻗': true, '올리닫': true, '헐뜯': true, '들이닫': true, '활걷': true, '겉묻': true, '닫': true, '창받': true, '건네받': true, '물손받': true, '들이받': true, '강요받': true, '내리벋': true, '받': true, '이어받': true, '부르걷': true, '응받': true, '검뜯': true, '인정받': true, '내려딛': true, '내쏟': true, '내리뻗': true, '너름받': true, '세받': true, '내 돋': true, '돌려받': true, '쥐어뜯': true, '껴묻': true, '본받': true, '뒤받': true, '강종받': true, '내리닫': true, '떠받': true, '테받': true, '내받': true, '흠뜯': true, '두남받': true, '치받': true, '부르돋': true, '대받': true, '설굳': true, '처닫': true, '얻': true, '들이돋': true, '돋': true, '죄받': true, '쏟': true, '씨받': true, '딱장받': true, '치걷': true, '믿': true, '치벋': true, '버림받': true, '북돋': true, '딛': true, '치고받': true, '욱걷': true, '물려받': true, '뜯': true, '줴뜯': true, '넘겨받': true, '안받': true, '내뻗': true, '내리쏟': true, '벋딛': true, '뒤묻': true, '뻗딛': true, '치뻗': true, '치닫': true, '줄밑걷': true, '굳': true, '내닫': true, '내림받': true};\n\nconjugator.not_h_irregular = {'들이좋': true, '터놓': true, '접어놓': true, '좋': true, '풀어놓': true, '내쌓': true, '꼴좋': true, '치쌓': true, '물어넣': true, '잇닿': true, '끝닿': true, '그러넣': true, '뽕놓': true, '낳': true, '내리찧': true, '힘닿': true, '내려놓': true, '세놓': true, '둘러놓': true, '들놓': true, '맞찧': true, '잡아넣': true, '돌라쌓': true, '덧쌓': true, '갈라땋': true, '주놓': true, '갈라놓': true, '들이닿': true, '집어넣': true, '닿': true, '의좋': true, '막놓': true, '내놓': true, '들여놓': true, '사놓': true, '썰레놓': true, '짓찧': true, '벋놓': true, '찧': true, '침놓': true, '들이찧': true, '둘러쌓': true, '털어놓': true, '담쌓': true, '돌라놓': true, '되잡아넣': true, '끌어넣': true, '덧놓': true, '맞닿': true, '처넣': true, '빻': true, '뻥놓': true, '내리쌓': true, '곱놓': true, '설레발놓': true, '우겨넣': true, '놓': true, '수놓': true, '써넣': true, '널어놓': true, '덮쌓': true, '연닿': true, '헛놓': true, '돌려놓': true, '되쌓': true, '욱여넣': true, '앗아넣': true, '올려놓': true, '헛방놓': true, '날아놓': true, '뒤놓': true, '업수놓': true, '가로놓': true, '맞놓': true, '펴놓': true, '내켜놓': true, '쌓': true, '끙짜놓': true, '들이쌓': true, '겹쌓': true, '기추놓': true, '넣': true, '불어넣': true, '늘어놓': true, '긁어놓': true, '어긋놓': true, '앞넣': true, '눌러놓': true, '땋': true, '들여쌓': true, '빗놓': true, '사이좋': true, '되놓': true, '헛불놓': true, '몰아넣': true, '먹놓': true, '밀쳐놓': true, '살닿': true, '피새놓': true, '빼놓': true, '하차놓': true, '틀어넣': true};\n\nconjugator.not_l_euh_irregular = {'우러르': true, '따르': true, '붙따르': true, '늦치르': true, '다다르': true, '잇따르': true, '치르': true};\n\nconjugator.not_l_irregular = {};\n\nconjugator.after_last_space = function(infinitive) {\n    return infinitive.split(' ').reverse()[0];\n};\n\nconjugator.is_s_irregular = function(infinitive, regular) {\n    if (regular) {\n        return false;\n    }\n    return hangeul.match(infinitive.charAt(infinitive.length-1), '*', '*', 'ᆺ') &&\n           !(conjugator.after_last_space(infinitive) in conjugator.not_s_irregular);\n};\n\n\nconjugator.is_l_irregular = function(infinitive, regular) {\n    if (regular) {\n        return false;\n    }\n    return hangeul.match(infinitive.charAt(infinitive.length-1), '*', '*', 'ᆯ') &&\n           !(conjugator.after_last_space(infinitive) in conjugator.not_l_irregular);\n}\n\nconjugator.is_l_euh_irregular = function(infinitive, regular) {\n    if (regular) {\n        return false;\n    }\n    return hangeul.match(infinitive.charAt(infinitive.length-1), 'ᄅ', 'ㅡ', null) &&\n           !(conjugator.after_last_space(infinitive) in conjugator.not_l_euh_irregular);\n};\n\nconjugator.is_h_irregular = function(infinitive, regular) {\n    if (regular) {\n        return false;\n    }\n    return (hangeul.padchim(infinitive.charAt(infinitive.length-1)) == 'ᇂ' ||\n           infinitive.charAt(infinitive.length-1) == '러') &&\n           !(conjugator.after_last_space(infinitive) in conjugator.not_h_irregular);\n};\n\nconjugator.is_p_irregular = function(infinitive, regular) {\n    if (regular) {\n        return false;\n    }\n    return hangeul.match(infinitive.charAt(infinitive.length-1), '*', '*', 'ᆸ') &&\n           !(conjugator.after_last_space(infinitive) in conjugator.not_p_irregular);\n};\n\nconjugator.is_d_irregular = function(infinitive, regular) {\n    if (regular) {\n        return false;\n    }\n    return hangeul.match(infinitive.charAt(infinitive.length-1), '*', '*', 'ᆮ') &&\n           !(conjugator.after_last_space(infinitive) in conjugator.not_d_irregular);\n};\n\nconjugator.verb_types = {\n    'ㅅ 불규칙 동사 (irregular verb)': conjugator.is_s_irregular,\n    'ㄹ 불규칙 동사 (irregular verb)': conjugator.is_l_irregular,\n    '르 불규칙 동사 (irregular verb)': conjugator.is_l_euh_irregular,\n    'ㅎ 불규칙 동사 (irregular verb)': conjugator.is_h_irregular,\n    'ㅂ 불규칙 동사 (irregular verb)': conjugator.is_p_irregular,\n    'ㄷ 불규칙 동사 (irregular verb)': conjugator.is_d_irregular\n};\n\nconjugator.verb_type = function(infinitive, regular) {\n    if (regular) {\n        return 'regular verb';\n    }\n    for (irregular_name in conjugator.verb_types) {\n        func = conjugator.verb_types[irregular_name];\n        if (func(conjugator.base(infinitive))) {\n            return irregular_name;\n        }\n    }\n    return 'regular verb';\n}\n\nconjugator.base = function(infinitive, regular) {\n    if (infinitive.charAt(infinitive.length-1) == '다') {\n        return infinitive.substring(0, infinitive.length-1);\n    } else {\n        return infinitive;\n    }\n};\n\nconjugator.base2 = function(infinitive, regular) {\n    infinitive = conjugator.base(infinitive, regular);\n\n    if (infinitive == '아니') {\n        infinitive = new hangeul.Geulja('아니');\n        infinitive.hidden_padchim = true;\n        return infinitive;\n    }\n    if (infinitive == '뵙') {\n        return '뵈';\n    }\n    if (infinitive == '푸') {\n        return '퍼';\n    }\n    let new_infinitive = infinitive;\n    if (conjugator.is_h_irregular(infinitive, regular)) {\n        new_infinitive = conjugator.merge(infinitive.substring(0, infinitive.length-1) +\n                                          hangeul.join(hangeul.lead(infinitive.charAt(infinitive.length-1)),\n                                                       hangeul.vowel(infinitive.charAt(infinitive.length-1))),\n                                          '이');\n        conjugator.reasons.push('ㅎ irregular (' + infinitive + ' -> ' + new_infinitive + ')');\n    } else if (conjugator.is_p_irregular(infinitive, regular)) {\n        // only some verbs get ㅗ (highly irregular)\n        let new_vowel;\n        if (infinitive in {'묻잡': true} ||\n            infinitive.charAt(infinitive.length-1) in {'돕': true, '곱': true}) {\n            new_vowel = 'ㅗ';\n        } else {\n            new_vowel = 'ㅜ';\n        }\n        new_infinitive = conjugator.merge(infinitive.substring(0, infinitive.length-1) +\n                                          hangeul.join(hangeul.lead(infinitive.charAt(infinitive.length-1)),\n                                                       hangeul.vowel(infinitive.charAt(infinitive.length-1))),\n                                          hangeul.join('ᄋ', new_vowel))\n        conjugator.reasons.push('ㅂ irregular (' + infinitive + ' -> ' + new_infinitive + ')');\n    } else if (conjugator.is_d_irregular(infinitive, regular)) {\n        new_infinitive = new hangeul.Geulja(infinitive.substring(0, infinitive.length-1) +\n                                            hangeul.join(hangeul.lead(infinitive.charAt(infinitive.length-1)),\n                                            hangeul.vowel(infinitive.charAt(infinitive.length-1)),\n                                             'ᆯ'));\n        new_infinitive.original_padchim = 'ᆮ';\n        conjugator.reasons.push('ㄷ irregular (' + infinitive + ' -> ' + new_infinitive + ')');\n    } else if (conjugator.is_s_irregular(infinitive, regular)) {\n        new_infinitive = new hangeul.Geulja(infinitive.substring(0, infinitive.length-1) +\n                                            hangeul.join(hangeul.lead(infinitive.charAt(infinitive.length-1)),\n                                            hangeul.vowel(infinitive.charAt(infinitive.length-1))));\n        new_infinitive.hidden_padchim = true;\n        conjugator.reasons.push('ㅅ irregular (' + infinitive + ' -> ' + new_infinitive + ' [hidden padchim])');\n    }\n    return new_infinitive;\n};\n\nconjugator.base3 = function(infinitive, regular) {\n    infinitive = conjugator.base(infinitive, regular);\n    if (infinitive == '아니') {\n        return '아니';\n    }\n    if (infinitive == '푸') {\n        return '푸';\n    }\n    if (infinitive == '뵙') {\n        return '뵈';\n    }\n    if (conjugator.is_h_irregular(infinitive, regular)) {\n        return infinitive.substring(0, infinitive.length-1) +\n               hangeul.join(hangeul.lead(infinitive.charAt(infinitive.length-1)),\n                            hangeul.vowel(infinitive.charAt(infinitive.length-1)))\n    } else if (conjugator.is_p_irregular(infinitive, regular)) {\n        return infinitive.substring(0, infinitive.length-1) +\n               hangeul.join(hangeul.lead(infinitive.charAt(infinitive.length-1)),\n                            hangeul.vowel(infinitive.charAt(infinitive.length-1))) + '우';\n    } else {\n        return conjugator.base2(infinitive, regular);\n    }\n};\n\nconjugator.declarative_present_informal_low = function(infinitive, regular, further_use) {\n    infinitive = conjugator.base2(infinitive, regular);\n    if (!further_use && ((infinitive == '이' && !infinitive.hidden_padchim) ||\n                         infinitive == '아니') ||\n                        (regular && infinitive.charAt(infinitive.length-1) == '이')) {\n        conjugator.reasons.push('야 irregular');\n        return infinitive + '야';\n    }\n    // 르 irregular\n    if (regular && infinitive == '이르') {\n        return '일러';\n    }\n    if (conjugator.is_l_euh_irregular(infinitive, regular)) {\n        let new_base = infinitive.substring(0, infinitive.length-2) +\n                   hangeul.join(hangeul.lead(infinitive[infinitive.length-2]),\n                                hangeul.vowel(infinitive[infinitive.length-2]),\n                                'ᆯ');\n        if (infinitive.substring(infinitive.length-2, infinitive.length) in {'푸르': true, '이르': true}) {\n            new_base = new_base + hangeul.join('ᄅ',\n                                               hangeul.vowel(hangeul.find_vowel_to_append(new_base)))\n            conjugator.reasons.push('irregular stem + ' + infinitive + ' -> ' + new_base);\n            return infinitive + '러';\n        } else if (hangeul.find_vowel_to_append(infinitive.substring(0, infinitive.length-1)) == '아') {\n            new_base += '라'\n            conjugator.reasons.push('르 irregular stem change [' + infinitive + ' -> ' + new_base + ']');\n            return new_base;\n        } else {\n            new_base += '러';\n            conjugator.reasons.push('르 irregular stem change [' + infinitive + ' -> ' + new_base + ']');\n            return new_base;\n        }\n    } else if (infinitive.charAt(infinitive.length-1) == '하') {\n        return conjugator.merge(infinitive, '여');\n    } else if (conjugator.is_h_irregular(infinitive, regular)) {\n        return conjugator.merge(infinitive, '이');\n    }\n    return conjugator.merge(infinitive, hangeul.find_vowel_to_append(infinitive));\n};\nconjugator.declarative_present_informal_low.conjugation = true;\n\nconjugator.declarative_present_informal_high = function(infinitive, regular) {\n    infinitive = conjugator.base2(infinitive, regular)\n    if ((infinitive == '이' && !infinitive.hidden_padchim) ||\n        (infinitive.charAt(infinitive.length-1) == '이' && regular) ||\n        infinitive == '아니') {\n        conjugator.reasons.push('에요 irregular')\n        return infinitive + '에요';\n    }\n    return conjugator.merge(conjugator.declarative_present_informal_low(infinitive, regular, true), '요');\n};\nconjugator.declarative_present_informal_high.conjugation = true;\n\nconjugator.declarative_present_formal_low = function(infinitive, regular) {\n    if (conjugator.is_l_irregular(conjugator.base(infinitive), regular)) {\n        return conjugator.drop_l_and_borrow_padchim(conjugator.base(infinitive, regular), '는다');\n    }\n    return conjugator.merge(conjugator.base(infinitive, regular), '는다');\n};\nconjugator.declarative_present_formal_low.conjugation = true;\n\nconjugator.declarative_present_formal_high = function(infinitive, regular) {\n    if (conjugator.is_l_irregular(conjugator.base(infinitive), regular)) {\n        return conjugator.drop_l_and_borrow_padchim(conjugator.base(infinitive, regular), '습니다');\n    }\n    return conjugator.merge(conjugator.base(infinitive, regular), '습니다')\n};\nconjugator.declarative_present_formal_high.conjugation = true;\n\nconjugator.past_base = function(infinitive, regular) {\n    let ps = conjugator.declarative_present_informal_low(infinitive, regular, true);\n    if (hangeul.find_vowel_to_append(ps) == '아') {\n        return conjugator.merge(ps, '았');\n    } else {\n        return conjugator.merge(ps, '었');\n    }\n};\nconjugator.past_base.conjugation = true;\n\nconjugator.declarative_past_informal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.past_base(infinitive, regular), '어');\n};\nconjugator.declarative_past_informal_low.conjugation = true;\n\nconjugator.declarative_past_informal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.declarative_past_informal_low(infinitive, regular), '요');\n};\nconjugator.declarative_past_informal_high.conjugation = true;\n\nconjugator.declarative_past_formal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.past_base(infinitive, regular), '다');\n};\nconjugator.declarative_past_formal_low.conjugation = true;\n\nconjugator.declarative_past_formal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.past_base(infinitive, regular), '습니다');\n};\nconjugator.declarative_past_formal_high.conjugation = true;\n\nconjugator.future_base = function(infinitive, regular) {\n    if (conjugator.is_l_irregular(conjugator.base(infinitive, regular))) {\n        return conjugator.drop_l_and_borrow_padchim(conjugator.base3(infinitive, regular), '을');\n    }\n    return conjugator.merge(conjugator.base3(infinitive, regular), '을');\n};\nconjugator.future_base.conjugation = true;\n\nconjugator.declarative_future_informal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.future_base(infinitive, regular), ' 거야');\n};\nconjugator.declarative_future_informal_low.conjugation = true;\n\nconjugator.declarative_future_informal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.future_base(infinitive, regular), ' 거예요');\n};\nconjugator.declarative_future_informal_high.conjugation = true;\n\nconjugator.declarative_future_formal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.future_base(infinitive, regular), ' 거다');\n};\nconjugator.declarative_future_formal_low.conjugation = true;\n\nconjugator.declarative_future_formal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.future_base(infinitive, regular), ' 겁니다');\n};\nconjugator.declarative_future_formal_high.conjugation = true;\n\nconjugator.declarative_future_conditional_informal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base(infinitive, regular), '겠어');\n};\nconjugator.declarative_future_conditional_informal_low.conjugation = true;\n\nconjugator.declarative_future_conditional_informal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base(infinitive, regular), '겠어요');\n};\nconjugator.declarative_future_conditional_informal_high.conjugation = true;\n\nconjugator.declarative_future_conditional_formal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base(infinitive, regular), '겠다');\n};\nconjugator.declarative_future_conditional_formal_low.conjugation = true;\n\nconjugator.declarative_future_conditional_formal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base(infinitive, regular), '겠습니다');\n};\nconjugator.declarative_future_conditional_formal_high.conjugation = true;\n\nconjugator.inquisitive_present_informal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.declarative_present_informal_low(infinitive, regular), '?');\n};\nconjugator.inquisitive_present_informal_low.conjugation = true;\n\nconjugator.inquisitive_present_informal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.declarative_present_informal_high(infinitive, regular), '?');\n};\nconjugator.inquisitive_present_informal_high.conjugation = true;\n\nconjugator.inquisitive_present_formal_low = function(infinitive, regular) {\n    infinitive = conjugator.base(infinitive, regular);\n    if (conjugator.is_l_irregular(infinitive, regular)) {\n        return conjugator.drop_l(infinitive, '니?');\n    }\n    return conjugator.merge(infinitive, '니?');\n};\nconjugator.inquisitive_present_formal_low.conjugation = true;\n\nconjugator.inquisitive_present_formal_high = function(infinitive, regular) {\n    infinitive = conjugator.base(infinitive, regular);\n    if (conjugator.is_l_irregular(infinitive, regular)) {\n        return conjugator.drop_l_and_borrow_padchim(infinitive, '습니까?');\n    }\n    return conjugator.merge(infinitive, '습니까?');\n};\nconjugator.inquisitive_present_formal_high.conjugation = true;\n\nconjugator.inquisitive_past_informal_low = function(infinitive, regular) {\n    return conjugator.declarative_past_informal_low(infinitive, regular) + '?';\n};\nconjugator.inquisitive_past_informal_low.conjugation = true;\n\nconjugator.inquisitive_past_informal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.declarative_past_informal_high(infinitive, regular), '?');\n};\nconjugator.inquisitive_past_informal_high.conjugation = true;\n\nconjugator.inquisitive_past_formal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.past_base(infinitive, regular), '니?');\n};\nconjugator.inquisitive_past_formal_low.conjugation = true;\n\nconjugator.inquisitive_past_formal_high = function(infinitive, regular) {\n    return conjugator.merge(conjugator.past_base(infinitive, regular), '습니까?');\n};\nconjugator.inquisitive_past_formal_high.conjugation = true;\n\nconjugator.imperative_present_informal_low = function(infinitive, regular) {\n    return conjugator.declarative_present_informal_low(infinitive, regular);\n};\nconjugator.imperative_present_informal_low.conjugation = true;\n\nconjugator.imperative_present_informal_high = function(infinitive, regular) {\n    if (conjugator.is_l_irregular(conjugator.base(infinitive, regular))) {\n        return conjugator.drop_l(conjugator.base3(infinitive, regular), '세요');\n    }\n    return conjugator.merge(conjugator.base3(infinitive, regular), '세요');\n};\nconjugator.imperative_present_informal_high.conjugation = true;\n\nconjugator.imperative_present_formal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.imperative_present_informal_low(infinitive, regular), '라');\n};\nconjugator.imperative_present_formal_low.conjugation = true;\n\nconjugator.imperative_present_formal_high = function(infinitive, regular) {\n    if (conjugator.is_l_irregular(conjugator.base(infinitive, regular))) {\n        return conjugator.drop_l(conjugator.base3(infinitive, regular), '십시오');\n    }\n    return conjugator.merge(conjugator.base3(infinitive, regular), '십시오');\n};\nconjugator.imperative_present_formal_high.conjugation = true;\n\nconjugator.propositive_present_informal_low = function(infinitive, regular) {\n    return conjugator.declarative_present_informal_low(infinitive, regular);\n};\nconjugator.propositive_present_informal_low.conjugation = true;\n\nconjugator.propositive_present_informal_high = function(infinitive, regular) {\n    return conjugator.declarative_present_informal_high(infinitive, regular);\n};\nconjugator.propositive_present_informal_high.conjugation = true;\n\nconjugator.propositive_present_formal_low = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base(infinitive, regular), '자');\n};\nconjugator.propositive_present_formal_low.conjugation = true;\n\nconjugator.propositive_present_formal_high = function(infinitive, regular) {\n    infinitive = conjugator.base(infinitive);\n    if (conjugator.is_l_irregular(infinitive, regular)) {\n        return conjugator.drop_l_and_borrow_padchim(conjugator.base3(infinitive, regular), '읍시다');\n    }\n    return conjugator.merge(conjugator.base3(infinitive, regular), '읍시다');\n};\nconjugator.propositive_present_formal_high.conjugation = true;\n\nconjugator.connective_if = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base3(infinitive, regular), '면');\n};\nconjugator.connective_if.conjugation = true;\n\nconjugator.connective_and = function(infinitive, regular) {\n    infinitive = conjugator.base(infinitive, regular);\n    return conjugator.merge(conjugator.base(infinitive, regular), '고');\n};\nconjugator.connective_and.conjugation = true;\n\nconjugator.nominal_ing = function(infinitive, regular) {\n    return conjugator.merge(conjugator.base3(infinitive, regular), '음');\n};\nconjugator.nominal_ing.conjugation = true;\n\nconjugator.conjugations = [];\n\nfor (let f in conjugator) {\n    if (f && conjugator[f].conjugation) {\n        conjugator.conjugations.push(f);\n    }\n}\n\nconjugator.display_conjugations = function(infinitive, regular, callback) {\n    var both_regular_and_irregular = false;\n    infinitive = conjugator.base(infinitive, regular);\n    out = '';\n    if (infinitive in conjugator.both_regular_and_irregular) {\n        both_regular_and_irregular = true;\n        out += '<dd class=\"warning\">warning</dd>';\n        out += '<dt>This verb has both regular and irregular forms.</dt>';\n    }\n    out += '<div class=\"conjugation\"><dd>verb type</dd>';\n    out += '<dt>' + conjugator.verb_type(infinitive, regular)\n    if (both_regular_and_irregular) {\n        out += ' <button id=\"form-change\">view ' + (regular ? 'irregular' : 'regular') + ' form</button>';\n    }\n    out += '</dt></div>';\n    for (conjugation in conjugator) {\n        conjugator.reasons = [];\n        if (conjugator[conjugation].conjugation) {\n            out += '<div class=\"conjugation\"><dd>' + conjugation.replace(/_/g, ' ') + '</dd>';\n            var conjugated = conjugator[conjugation](infinitive, regular);\n            var pron = pronunciation.get_pronunciation(conjugated);\n            var romanized = romanization.romanize(pron);\n            out += '<dt>' + conjugated + ' <button class=\"show-reasons\">↴</button></dt>';\n            out += '<ul class=\"reasons\">';\n            out += '<li>pronunciation [' + (pron != conjugated ? (pron + ' / ') : '') + romanized + ']</li>';\n            for (reason in conjugator.reasons) {\n                out += '<li>' + conjugator.reasons[reason] + '</li>';\n            }\n            out += '</ul></div>';\n        }\n    }\n    callback(out);\n};\n\nconjugator.each_conjugation = function(infinitive, regular, callback) {\n    infinitive = conjugator.base(infinitive, regular);\n    for (conjugation in conjugator) {\n        conjugator.reasons = [];\n        if (conjugator[conjugation].conjugation) {\n            var r = {};\n            r.infinitive = infinitive;\n            r.conjugation_name = conjugation.replace(/_/g, ' ');\n            r.conjugated = conjugator[conjugation](infinitive, regular);\n            r.pronunciation = pronunciation.get_pronunciation(r.conjugated);\n            r.romanized = romanization.romanize(r.pronunciation);\n            r.reasons = [];\n            for (reason in conjugator.reasons) {\n                r.reasons.push(conjugator.reasons[reason]);\n            }\n            callback(r);\n        }\n    }\n};\n\nexport var conjugator_functions = {\n\t\"declarative\": {\n\t\t\"present\": {\n\t\t\t\"informal\": {\n\t\t\t\t\"plain\": conjugator.declarative_present_informal_low,\n\t\t\t\t\"polite\": conjugator.declarative_present_informal_high\n\t\t\t}, \n\t\t\t\"formal\": {\n\t\t\t\t\"plain\": conjugator.declarative_present_formal_low,\n\t\t\t\t\"polite\": conjugator.declarative_present_formal_high\n\t\t\t}\n\t\t},\n\t\t\"past\": {\n\t\t\t\"informal\": {\n\t\t\t\t\"plain\": conjugator.declarative_past_informal_low,\n\t\t\t\t\"polite\": conjugator.declarative_past_informal_high\n\t\t\t}, \n\t\t\t\"formal\": {\n\t\t\t\t\"plain\": conjugator.declarative_past_formal_low,\n\t\t\t\t\"polite\": conjugator.declarative_past_formal_high\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// Export functions to node\ntry {\n    for (f in conjugator) {\n        exports[f] = conjugator[f];\n    }\n} catch(e) {}\n","// vim: set ts=4 sw=4 expandtab\n// (C) 2010 Dan Bravender - licensed under the AGPL 3.0\n\ntry {\n    var hangeul = require('./hangeul');\n} catch(e) {}\n\nvar pronunciation = {};\n\npronunciation.padchim_to_lead = {\n    'ᆨ': 'ᄀ',\n    'ᆩ': 'ᄁ',\n    'ᆫ': 'ᄂ',\n    'ᆮ': 'ᄃ',\n    'ᆯ': 'ᄅ',\n    'ᆷ': 'ᄆ',\n    'ᆸ': 'ᄇ',\n    'ᆺ': 'ᄉ',\n    'ᆻ': 'ᄊ',\n    'ᆼ': 'ᄋ',\n    'ᆽ': 'ᄌ',\n    'ᆾ': 'ᄎ',\n    'ᆿ': 'ᄏ',\n    'ᇀ': 'ᄐ',\n    'ᇁ': 'ᄑ',\n    'ᇂ': 'ᄒ'\n};\n\npronunciation.move_padchim_to_replace_eung = function(x, y) {\n    if (hangeul.padchim(x[x.length-1]) == 'ᆼ') {\n        return;\n    }\n    if (hangeul.padchim(x[x.length-1]) in pronunciation.padchim_to_lead &&\n        hangeul.lead(y[0]) == 'ᄋ') {\n        return [x.substring(0, x.length-1) + hangeul.join(hangeul.lead(x[x.length-1]),\n                                                          hangeul.vowel(x[x.length-1])),\n                hangeul.join(pronunciation.padchim_to_lead[hangeul.padchim(x[x.length-1])],\n                             hangeul.vowel(y[0]),\n                             hangeul.padchim(y[0])) +\n                y.substring(1)];\n    }\n};\n\npronunciation.change_padchim_pronunciation = function(to, changers) {\n    return function(x, y) {\n        if (hangeul.padchim(x[x.length-1]) in changers) {\n            return [x.substring(0, x.length-1) +\n                    hangeul.join(hangeul.lead(x[x.length-1]),\n                                 hangeul.vowel(x[x.length-1]),\n                                 to),\n                    y];\n        }\n    }\n};\n\npronunciation.consonant_combination_rule = function(x_padchim, y_lead, new_padchim,\n                                                    new_lead, y_vowel) {\n    return function(x, y) {\n        if (y_vowel && hangeul.vowel(y[0]) != y_vowel) {\n            return;\n        }\n        if ((hangeul.padchim(x[x.length-1]) == x_padchim || x_padchim == '*') &&\n            (hangeul.lead(y[0]) == y_lead || y_lead == '*')) {\n            return [x.substring(0, x.length-1) +\n                    hangeul.join(hangeul.lead(x[x.length-1]),\n                                 hangeul.vowel(x[x.length-1]),\n                                 new_padchim == '*' ? hangeul.padchim(x[-1]) : new_padchim),\n                    hangeul.join(new_lead == '*' ? hangeul.lead(y[0]) : new_lead,\n                                 hangeul.vowel(y[0]),\n                                 hangeul.padchim(y[0])) +\n                    y.substring(1)];\n        }\n    }\n};\n\npronunciation.skip_non_hangeul = function(x, y) {\n    if (!hangeul.is_hangeul(x[x.length-1])) {\n        return [x, y, true];\n    }\n};\n\npronunciation.merge_rules = [\n/* WARNING: Please be careful when adding/modifying rules since padchim \n            hangeul.and lead characters are different Unicode characters. Please see:\n            http://www.kfunigraz.ac.at/~katzer/korean_hangul_unicode.html\n\n   Rules from http://en.wikibooks.org/wiki/Korean/Advanced_Pronunciation_Rules\n*/\n    pronunciation.skip_non_hangeul,\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄋ', null, 'ᄋ', null),\n    // ㄱㄴ becomes ㅇㄴ\n    pronunciation.consonant_combination_rule('ᆨ', 'ᄂ', 'ᆼ', 'ᄂ', null),\n    // ㄱㅁ becomes ㅇㅁ\n    pronunciation.consonant_combination_rule('ᆨ', 'ᄆ', 'ᆼ', 'ᄆ', null),\n    // ㅋㄴ becomes ㅇㄴ\n    pronunciation.consonant_combination_rule('ᆿ', 'ᄂ', 'ᆼ', 'ᄂ', null),\n    // ㅋㅁ becomes ㅇㅁ\n    pronunciation.consonant_combination_rule('ᆿ', 'ᄆ', 'ᆼ', 'ᄆ', null),\n    // ㄷㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᆮ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    // ㄷㅁ becomes ㄴㅁ\n    pronunciation.consonant_combination_rule('ᆮ', 'ᄆ', 'ᆫ', 'ᄆ', null),\n    // ㅅㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᆺ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    // ㅆㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᆻ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    // ㅅㅁ becomes ㄴㅁ\n    pronunciation.consonant_combination_rule('ᆺ', 'ᄆ', 'ᆫ', 'ᄆ', null),\n    // ㄱ ㅆ becomes ㄱ ㅆ\n    pronunciation.consonant_combination_rule('ᆨ', 'ᄉ', 'ᆨ', 'ᄊ', null),\n    // ㅈㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᆽ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    // ㅈㅁ becomes ㄴㅁ\n    pronunciation.consonant_combination_rule('ᆽ', 'ᄆ', 'ᆫ', 'ᄆ', null),\n    // ㅊㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᆾ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    // ㅊㅁ becomes ㄴㅁ\n    pronunciation.consonant_combination_rule('ᆾ', 'ᄆ', 'ᆫ', 'ᄆ', null),\n    // ㅌㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᇀ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    // ㅌㅁ becomes ㄴㅁ\n    pronunciation.consonant_combination_rule('ᇀ', 'ᄆ', 'ᆫ', 'ᄆ', null),\n    //  ㅎㄴ becomes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄂ', 'ᆫ', 'ᄂ', null),\n    //  ㅎㅁ becomes ㄴㅁ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄆ', 'ᆫ', 'ᄆ', null),\n    //  ㅂㄴ becomes ㅁㄴ\n    pronunciation.consonant_combination_rule('ᆸ', 'ᄂ', 'ᆷ', 'ᄂ', null),\n    // ㅂㅁ becomes ㅁㅁ\n    pronunciation.consonant_combination_rule('ᆸ', 'ᄆ', 'ᆷ', 'ᄆ', null),\n    // ㅍㄴ becomes ㅁㄴ\n    pronunciation.consonant_combination_rule('ᇁ', 'ᄂ', 'ᆷ', 'ᄂ', null),\n    // ㅍㅁ becomes ㅁㅁ\n    pronunciation.consonant_combination_rule('ᇁ', 'ᄆ', 'ᆷ', 'ᄆ', null),\n    //  ㄱㅎ becomes ㅋ\n    pronunciation.consonant_combination_rule('ᆨ', 'ᄒ', null, 'ᄏ', null),\n    //  ㅎㄱ becomes ㅋ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄀ', null, 'ᄏ', null),\n    // ㅎㄷ becomes ㅌ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄃ', null, 'ᄐ', null),\n    // ㄷㅎ becomes ㅌ\n    pronunciation.consonant_combination_rule('ᆮ', 'ᄒ', null, 'ᄐ', null),\n    // ㅂㅎ becomes ㅍ\n    pronunciation.consonant_combination_rule('ᆸ', 'ᄒ', null, 'ᄑ', null),\n    // ㅎㅂ becomes ㅍ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄇ', null, 'ᄑ', null),\n    // ㅈㅎ becomes ㅊ\n    pronunciation.consonant_combination_rule('ᆽ', 'ᄒ', null, 'ᄎ', null),\n    // ㅎㅈ becomes ㅊ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄌ', null, 'ᄎ', null),\n    // ㅎㅅ becomes ㅆ\n    pronunciation.consonant_combination_rule('ᇂ', 'ᄉ', null, 'ᄊ', null),\n    //ㄷ이 becomes 지\n    pronunciation.consonant_combination_rule('ᆮ', 'ᄋ', null, 'ᄌ', 'ㅣ'),\n    //ㅌ이 becomes 치\n    pronunciation.consonant_combination_rule('ᇀ', 'ᄋ', null, 'ᄎ', 'ㅣ'),\n    //ㄱㄹ becomes ㅇㄴ\n    pronunciation.consonant_combination_rule('ᆨ', 'ᄅ', 'ᆼ', 'ᄂ', null),\n    //ㄴㄹ becomes ㄹㄹ // TODO: (not sure how to fix pronunciation) also sometimes ㄴㄴ\n    pronunciation.consonant_combination_rule('ᆫ', 'ᄅ', 'ᆯ', 'ᄅ', null),\n    // ㅁㄹ becomes ㅁㄴ\n    pronunciation.consonant_combination_rule('ᆷ', 'ᄅ', 'ᆷ', 'ᄂ', null),\n    // ㅇㄹ becomes ㅇㄴ\n    pronunciation.consonant_combination_rule('ᆼ', 'ᄅ', 'ᆼ', 'ᄂ', null),\n    // ㅂㄹ becomes ㅁㄴ\n    pronunciation.consonant_combination_rule('ᆸ', 'ᄅ', 'ᆷ', 'ᄂ', null),\n    // ㅅ ㅎ becomes ㅌ\n    pronunciation.consonant_combination_rule('ᆺ', 'ᄒ', null, 'ᄐ', null),\n    // 받침 followed by ㅇ: replace ㅇ with 받침 (use second 받침 if there are two). Otherwise, 받침 followed by consonant:\n    pronunciation.move_padchim_to_replace_eung,\n    //    * ㄱ, ㅋ: like ㄱ\n    //    * ㄷ, ㅅ, ㅈ, ㅊ, ㅌ, ㅎ: like ㄷ\n    //    * ㅂ, ㅍ: like ㅂ\n    // Double padchim rules\n    pronunciation.consonant_combination_rule('ᆱ', 'ᄋ', 'ᆯ', 'ᄆ', null),\n    pronunciation.consonant_combination_rule('ᆹ', 'ᄋ', 'ᆸ', 'ᄉ', null),\n    pronunciation.consonant_combination_rule('ᆱ', '*', 'ᆷ', '*', null),\n    pronunciation.consonant_combination_rule('ᆶ', 'ᄋ', null, 'ᄅ', null),\n    pronunciation.consonant_combination_rule('ᆶ', '*', 'ᆯ', '*', null),\n    pronunciation.consonant_combination_rule('ᆬ', 'ᄋ', 'ᆫ', 'ᄌ', null),\n    pronunciation.consonant_combination_rule('ᆬ', '*', 'ᆫ', '*', null),\n    // 학교 -> 학꾜\n    pronunciation.consonant_combination_rule('ᆨ', 'ᄀ', 'ᆨ', 'ᄁ', null),\n    // 밥솥-> 밥쏟\n    pronunciation.consonant_combination_rule('ᆸ', 'ᄉ', 'ᆸ', 'ᄊ', null),\n    // 있습니다 -> 이씀니다\n    pronunciation.consonant_combination_rule('ᆻ', 'ᄉ', null, 'ᄊ', null),\n    pronunciation.change_padchim_pronunciation('ᆮ', {'ᆺ': true, 'ᆻ': true, 'ᆽ': true, 'ᆾ': true, 'ᇀ': true, 'ᇂ': true}),\n    pronunciation.change_padchim_pronunciation('ᆸ', {'ᇁ': true}),\n    pronunciation.consonant_combination_rule('ᆮ', 'ᄃ', null, 'ᄄ'),\n    function (x, y) { return [x, y] }\n];\n\npronunciation.apply_rules = function(x, y) {\n    result = null;\n    pronunciation.merge_rules.forEach(function(rule) {\n        merge = rule(x, y);\n        if (merge && merge.length == 3) {\n            x = merge[0];\n            y = merge[1];\n            stop = merge[2];\n            if (stop) {\n                result = x + y;\n            }\n        } else if (merge) {\n            x = merge[0];\n            y = merge[1];\n        }\n    });\n    if (result) {\n        return result;\n    }\n    return x + y;\n};\n\npronunciation.get_pronunciation = function(word) {\n    return (word + String.fromCharCode(0)).split('').reduce(pronunciation.apply_rules).substring(0, word.length);\n};\n\n// Export functions to node\ntry {\n    for (f in pronunciation) {\n        exports[f] = pronunciation[f];\n    }\n} catch(e) {}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","$741555d9057b000f$var$typeOf","value","toString","call","slice","toLowerCase","$741555d9057b000f$var$isEmpty","input","length","$741555d9057b000f$var$isCharInRange","char","start","end","code","charCodeAt","id","exports","init","module","err","Error","register","parcelRegister","$62537be26463873a$export$5fc85369385cf331","__value__","_length","hidden_padchim","original_padchim","charAt","result","String","prototype","apply","arguments","$62537be26463873a$export$559d605efc99d06a","valueOf","Geulja","is_hangeul","character","lead","fromCharCode","Math","floor","vowel","padchim_offset","padchim_character","padchim","p","join","lead_offset","vowel_offset","find_vowel_to_append","string","self","append","split","reverse","forEach","match","l","f","$741555d9057b000f$export$4cb93ec9ed11137c","HIRAGANA","KATAKANA","$741555d9057b000f$var$DEFAULT_OPTIONS","useObsoleteKana","passRomaji","upcaseKatakana","IMEMode","convertLongVowelMark","romanization","$741555d9057b000f$var$KANA_PUNCTUATION","$741555d9057b000f$var$JAPANESE_RANGES","$741555d9057b000f$export$33dfa193fc452c06","allowed","augmented","every","isJa","$741555d9057b000f$var$isCharJapanese","some","test","$741555d9057b000f$var$safeIsNaN","Number","isNaN","$741555d9057b000f$var$areInputsEqual","newInputs","lastInputs","first","second","i","$741555d9057b000f$var$memoizeOne","resultFn","isEqual","cache","memoized","newArgs","_i","lastThis","lastArgs","lastResult","clear","$741555d9057b000f$var$has","hasOwnProperty","$741555d9057b000f$var$find","iter","tar","key","keys","$741555d9057b000f$var$dequal","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","Array","Set","size","has","Map","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","$741555d9057b000f$var$mergeWithDefaultOptions","opts","assign","$741555d9057b000f$var$transform","tree","entries","reduce","map","subtree","endOfBranch","$741555d9057b000f$var$getSubTreeOf","correctSubTree","undefined","$741555d9057b000f$var$createCustomMapping","customMap","customTree","roma","kana","subTree","transformMap","mapSubtree","customSubtree","newSubtree","JSON","parse","stringify","$741555d9057b000f$var$mergeCustomMapping","customMapping","$741555d9057b000f$var$BASIC_KUNREI","u","o","k","t","h","m","y","r","w","g","z","d","b","$741555d9057b000f$var$SPECIAL_SYMBOLS$1","$741555d9057b000f$var$CONSONANTS","q","$741555d9057b000f$var$SMALL_Y$1","ya","yi","yu","ye","yo","$741555d9057b000f$var$SMALL_VOWELS","$741555d9057b000f$var$ALIASES","sh","ch","cy","chy","shy","j","jy","shi","chi","tsu","ji","fu","$741555d9057b000f$var$SMALL_LETTERS","tu","wa","ka","ke","$741555d9057b000f$var$SPECIAL_CASES","wu","wi","we","kwa","whu","tha","thu","tho","dha","dhu","dho","$741555d9057b000f$var$AIUEO_CONSTRUCTIONS","wh","kw","qw","gw","sw","ts","th","tw","dh","dw","fw","$741555d9057b000f$var$romajiToKanaMap","$741555d9057b000f$var$USE_OBSOLETE_KANA_MAP","$741555d9057b000f$var$isCharUpperCase","$741555d9057b000f$var$isCharLongDash","$741555d9057b000f$var$createRomajiToKanaMap","customKanaMapping","$741555d9057b000f$var$createRomajiToKanaMap$1","kanaTree","subtreeOf","consonant","yKana","symbol","jsymbol","aiueoKana","nChar","c","alternative","allExceptLast","last","parentTree","kunreiRoma","chars","xSubtree","getAlternatives","list","alt","startsWith","concat","replace","altRoma","prefix","altParentTree","addTsu","tsuTree","freeze","$741555d9057b000f$var$IME_MODE_MAP","mapCopy","$741555d9057b000f$var$LISTENERS","$741555d9057b000f$var$onComposition","type","target","data","window","navigator","platform","dataset","ignoreComposition","$741555d9057b000f$var$takeWhileAndSlice","source","predicate","x","push","$741555d9057b000f$var$events","selectionStart","selectionEnd","console","log","compositionstart","compositionupdate","compositionend","$741555d9057b000f$var$addDebugListeners","event","handler","addEventListener","$741555d9057b000f$var$ELEMENTS","$741555d9057b000f$var$idCounter","$741555d9057b000f$var$newId","now","$741555d9057b000f$var$kanaToHepburnMap","$741555d9057b000f$var$BASIC_ROMAJI","あ","い","う","え","お","か","き","く","け","こ","さ","し","す","せ","そ","た","ち","つ","て","と","な","に","ぬ","ね","の","は","ひ","ふ","へ","ほ","ま","み","む","め","も","ら","り","る","れ","ろ","や","ゆ","よ","わ","ゐ","ゑ","を","ん","が","ぎ","ぐ","げ","ご","ざ","じ","ず","ぜ","ぞ","だ","ぢ","づ","で","ど","ば","び","ぶ","べ","ぼ","ぱ","ぴ","ぷ","ぺ","ぽ","ゔぁ","ゔぃ","ゔ","ゔぇ","ゔぉ","$741555d9057b000f$var$SPECIAL_SYMBOLS","$741555d9057b000f$var$AMBIGUOUS_VOWELS","$741555d9057b000f$var$SMALL_Y","ゃ","ゅ","ょ","$741555d9057b000f$var$SMALL_Y_EXTRA","ぃ","ぇ","$741555d9057b000f$var$SMALL_AIUEO","ぁ","ぅ","ぉ","$741555d9057b000f$var$YOON_KANA","$741555d9057b000f$var$YOON_EXCEPTIONS","$741555d9057b000f$var$SMALL_KANA","っ","$741555d9057b000f$var$SOKUON_WHITELIST","customRomajiMapping","$741555d9057b000f$var$createKanaToHepburnMap","romajiTree","setTrans","transliteration","firstRomajiChar","yRoma","$741555d9057b000f$var$resolveTsu","includes","$18fe9b1b6336f500$export$aa00f474800863da","verb","adjective","$18fe9b1b6336f500$export$45aabe1f61557e96","present","past","te","adverb","volitional","passive","causative","potential","imperative","$820877bea407f5fe$export$ef83af2c8dc2c683","element","isDisplayNone","$820877bea407f5fe$var$toggleClassName","$820877bea407f5fe$export$877ee1ca1de102fd","isBackgroundNone","className","enabled","classList","add","remove","$820877bea407f5fe$export$4720c7d384d77b7d","array","$68e612a17b33f886$export$1a0f0b5f10fa2085","always","onlyAfterAnswering","$68e612a17b33f886$var$nonConjugationSettings","$68e612a17b33f886$var$getNonConjugationSettingsSet","settings","document","querySelectorAll","getAttribute","$68e612a17b33f886$export$f598fee9a8761f8f","inputs","getElementById","from","name","$68e612a17b33f886$export$100e28ec40f7f33c","$68e612a17b33f886$var$checkInputsAndToggleError","errorElement1","errorMessage","shouldBeChecked","$68e612a17b33f886$var$toggleError","backButton","textContent","disabled","$68e612a17b33f886$var$checkToEnableBackButton","error","getElementsByClassName","offsetWidth","offsetHeight","$68e612a17b33f886$var$doCheckboxesHaveValue","checked","$68e612a17b33f886$var$optionsGroupCheckError","groupElement","getElementsByTagName","$68e612a17b33f886$var$verbAndAdjCheckError","querySelector","$68e612a17b33f886$var$showHideUiOptions","triggeringInputsClass","showHideContainerId","inputsThatTrigger","showHideContainer","optionGroups","contains","optionGroup","$68e612a17b33f886$var$showHideVerbVariationOptions","$68e612a17b33f886$var$showHideAdjectiveVariationOptions","$68e612a17b33f886$var$showHideTranslationSubOptions","$68e612a17b33f886$export$7b52e59d7da90ebe","$68e612a17b33f886$export$3feb6355be08b5e5","emoji","$68e612a17b33f886$export$aee73cd064bb7d20","streak","$68e612a17b33f886$var$questionRemoveFiltersController","verbs","verb_present_indicative_informal_impolite","word","conjugation","formal","polite","verb_present_indicative_formal_impolite","verb_present_indicative_informal_polite","verb_present_indicative_formal_polite","verb_past_indicative_informal_impolite","verb_past_indicative_formal_impolite","verb_past_indicative_informal_polite","verb_past_indicative_formal_polite","show","$68e612a17b33f886$export$e91dd64c29cc7054","showInDom","makeTransparent","$68e612a17b33f886$var$setDisplayAndTransparency","$68e612a17b33f886$export$42fe1bab90555082","removeClass","transparentClass","$14c78789229899a8$exports","$14c78789229899a8$export$1b246651ba34c93e","$8ro1P","$666feef8e7b6d3b0$exports","$666feef8e7b6d3b0$var$hangeul","$666feef8e7b6d3b0$var$pronunciation","padchim_to_lead","move_padchim_to_replace_eung","substring","change_padchim_pronunciation","to","changers","consonant_combination_rule","x_padchim","y_lead","new_padchim","new_lead","y_vowel","skip_non_hangeul","merge_rules","apply_rules","rule","merge","stop","get_pronunciation","$14c78789229899a8$var$conjugator","f1","no_padchim_rule","characters","hangeul","vowel_contraction","vowel1","vowel2","new_vowel","trace","drop_l","reasons","drop_l_and_borrow_padchim","dont_insert_eh","insert_eh","lm_merge","response","output","both_regular_and_irregular","not_p_irregular","not_s_irregular","not_d_irregular","not_h_irregular","not_l_euh_irregular","not_l_irregular","after_last_space","infinitive","is_s_irregular","regular","is_l_irregular","is_l_euh_irregular","is_h_irregular","is_p_irregular","is_d_irregular","verb_types","verb_type","irregular_name","func","base","base2","new_infinitive","base3","declarative_present_informal_low","further_use","new_base","declarative_present_informal_high","declarative_present_formal_low","declarative_present_formal_high","past_base","ps","declarative_past_informal_low","declarative_past_informal_high","declarative_past_formal_low","declarative_past_formal_high","future_base","declarative_future_informal_low","declarative_future_informal_high","declarative_future_formal_low","declarative_future_formal_high","declarative_future_conditional_informal_low","declarative_future_conditional_informal_high","declarative_future_conditional_formal_low","declarative_future_conditional_formal_high","inquisitive_present_informal_low","inquisitive_present_informal_high","inquisitive_present_formal_low","inquisitive_present_formal_high","inquisitive_past_informal_low","inquisitive_past_informal_high","inquisitive_past_formal_low","inquisitive_past_formal_high","imperative_present_informal_low","imperative_present_informal_high","imperative_present_formal_low","imperative_present_formal_high","propositive_present_informal_low","propositive_present_informal_high","propositive_present_formal_low","propositive_present_formal_high","connective_if","connective_and","nominal_ing","conjugations","display_conjugations","callback","out","conjugated","pron","romanized","romanize","reason","each_conjugation","conjugation_name","pronunciation","$2b6e161c9edcf319$var$isTouch","msMaxTouchPoints","$2b6e161c9edcf319$var$SCREENS","question","results","$2b6e161c9edcf319$var$changeVerbBoxFontColor","color","style","$2b6e161c9edcf319$var$loadNewWord","wordList","$2b6e161c9edcf319$var$pickRandomWord","random","probability","$2b6e161c9edcf319$var$updateCurrentWord","verbHtml","wordJSON","replaceAll","innerHTML","eng","$2b6e161c9edcf319$var$conjugationInqueryFormatting","newString","createInqueryText","text","$2b6e161c9edcf319$var$Conjugation","validAnswers","conjugationType","affirmative","$2b6e161c9edcf319$var$Word","wasRecentlyIncorrect","$2b6e161c9edcf319$var$WordRecentlySeen","wasCorrect","$2b6e161c9edcf319$var$normalizeProbabilities","currentWords","totalProbability","$2b6e161c9edcf319$var$setAllProbabilitiesToValue","$2b6e161c9edcf319$export$bebac4be63daee5b","score","words","mainInput","options","debug","nodeName","onInput","$741555d9057b000f$var$makeOnInput","prevInput","mergedConfig","preConfiguredMap","triggers","toUpperCase","$741555d9057b000f$var$convertInput","head","textToConvert","tail","$741555d9057b000f$var$splitInput","cursor","toConvert","catalystChars","$741555d9057b000f$var$workBackwards","startIndex","convertedText","$741555d9057b000f$export$4973add5c59f0c7b","config","$741555d9057b000f$var$splitIntoConvertedKana","mapping","convertEnding","newChunk","remaining","currentCursor","firstChar","lastCursor","nextSubtree","nextChar","root","kanaToken","enforceHiragana","enforceKatakana","$741555d9057b000f$var$hiraganaToKatakana","kata","$741555d9057b000f$var$isCharSlashDot","$741555d9057b000f$var$isCharHiragana","kataChar","$741555d9057b000f$var$KATAKANA_START","newCursor","newValue","setTimeout","setSelectionRange","setAttribute","inputHandler","compositionHandler","initState","inputKeyPress","settingsButtonClicked","backButtonClicked","animationName","onKeyDown","bind","onTouchEnd","currentTarget","verbInputsWithVariations","verbInputsWithPolitenessOnly","loadMainView","state","activeScreen","currentStreak0OnReset","loadWordOnReset","currentWord","currentWordList","furigana","furiganaTiming","translation","translationTiming","focus","keyCode","which","activeElement","stopPropagation","inputValue","blur","$2b6e161c9edcf319$var$updateStatusBoxes","entryText","statusBox","background","$2b6e161c9edcf319$var$typeToWordBoxColor","inputWasCorrect","$2b6e161c9edcf319$var$updateProbabilites","wordsRecentlySeenQueue","currentWordWasCorrect","roundsToWait","group","currentConjugation","getPartOfSpeech","filter","newProbability","dequeuedWord","shift","currentMinProb","$2b6e161c9edcf319$var$findMinProb","min","$2b6e161c9edcf319$var$addToScore","amount","maxScoreObjects","maxScoreIndex","max","current","parseInt","newAmount","localStorage","setItem","selectConditionalUiRadio","radioValue","alwaysRadioId","onlyAfterAnsweringRadioId","preventDefault","getConditionalUiSetting","radioName","visibleConjugationSettings","newMaxScoreIndex","flag","settingKeys","applySettingsUpdateWordList","completeWordList","$2b6e161c9edcf319$var$createWordList","JSONWords","$2b6e161c9edcf319$var$getAllKoreanConjugations","allConjugations","tenses","formalities","politeness","mood","tense","formality","conjugator_function","conjugator_functions","flat","getItem","prunedSettings","filteredWords","verbRegex","verbOptions","el","adjectiveRegex","adjectiveOptions","questionRemoveFilters","adjectives","SPECIAL_SYMBOLS","SMALL_Y","createRomajiToKanaMap"],"version":3,"file":"index.549ccfa0.js.map"}